#+TITLE: Wiedzmin's literate Emacs configuration
#+OPTIONS: toc:4 h:4

* bootstrapping
** path utils
   #+BEGIN_SRC emacs-lisp
     (defun at-homedir (&optional suffix)
       (concat home-directory suffix))

     (defun at-org-dir (&optional suffix)
       (concat (at-homedir "/org") suffix))

     (defun at-data-dir (&optional suffix)
       (concat (at-config-basedir "data") suffix))
   #+END_SRC
**** TODO unify slashes usage
** input method utils (internal emacs keyboard layouts switching)
*** reverse input method
    it makes Emacs with non-English system keyboard layout
    to behave correctly with keybindings
    It definitley makes sense while using Emacs in such X WMs
    when there is no chance to hook into keyboard layouts switching
    (those are probably all, except StumpWM/XMonad, AFAIK)
    #+BEGIN_SRC emacs-lisp
      (defun reverse-input-method (input-method)
          "Build the reverse mapping of single letters from INPUT-METHOD."
          (interactive
           (list (read-input-method-name "Use input method (default current): ")))
          (if (and input-method (symbolp input-method))
                  (setq input-method (symbol-name input-method)))
          (let ((current current-input-method)
                      (modifiers '(nil (control) (meta) (control meta))))
              (when input-method
                  (activate-input-method input-method))
              (when (and current-input-method quail-keyboard-layout)
                  (dolist (map (cdr (quail-map)))
                      (let* ((to (car map))
                                   (from (quail-get-translation
                                                  (cadr map) (char-to-string to) 1)))
                          (when (and (characterp from) (characterp to))
                              (dolist (mod modifiers)
                                  (define-key local-function-key-map
                                      (vector (append mod (list from)))
                                      (vector (append mod (list to)))))))))
              (when input-method
                  (activate-input-method current))))

      (defadvice read-passwd (around my-read-passwd disable)
        (let ((local-function-key-map nil))
          ad-do-it))
    #+END_SRC
*** toggling input method
    This method uses external kbdd utility
    #+BEGIN_SRC emacs-lisp :tangle no
      ;;TODO: maybe implement as advice
      (defun toggle-input-method ()
        "Toggle input method while keeping system keyboard layout in latin.
        Essential for WMs without this functionality built-in."
        (interactive)
        (toggle-input-method)
        (when (executable-find "kbdd")
          (start-process "dbus-send"
                         nil
                         "dbus-send"
                         "--dest=ru.gentoo.KbddService"
                         "/ru/gentoo/KbddService"
                         "ru.gentoo.kbdd.set_layout"
                         "uint32:1")))
    #+END_SRC
** set the very basic variable values
   #+BEGIN_SRC emacs-lisp
     (setq message-log-max t) ;; we don't want to lose any startup log info
     (setq home-directory (getenv "HOME"))
     (setq global-username user-login-name)
     (setq shell-file-name "/bin/bash")
     (setq custom-file (at-config-basedir "customizations.el"))

     (setq diredp-hide-details-initially-flag nil) ;; otherwise we'll have very clipped dired info

     (reverse-input-method 'russian-computer)

     (fset 'yes-or-no-p 'y-or-n-p)
   #+END_SRC
** working directories
   A bunch of directories for various working datasets
   As the order of loading corresponding extensions,
   is cumbersome to maintain we should customize them ASAP (here)
   #+BEGIN_SRC emacs-lisp
     ;;TODO: think of less straightforward customization way
     (setq auto-save-list-file-prefix (at-data-dir "/auto-save-list/.saves-"))
     (setq bookmark-default-file (at-data-dir "/bookmarks"))
     (setq tramp-persistency-file-name (at-data-dir "/tramp"))
     (setq eshell-directory-name (at-data-dir "/eshell/"))
     (setq shared-game-score-directory (at-data-dir "/games"))
     (setq pcache-directory (at-data-dir "/var/pcache/"))
     (setq url-configuration-directory (at-data-dir "/url/"))
     (setq request-storage-directory (at-data-dir "/request"))
     (setq image-dired-dir (at-data-dir "/image-dired/"))
   #+END_SRC
** set some constants
   #+BEGIN_SRC emacs-lisp
     (setq custom/yasnippet-dir (at-config-basedir "resources/yasnippet/"))
     (setq custom/yasnippet-private-dir (at-config-basedir "resources/yasnippet-private/"))


     (setq custom/org-capture-file (at-org-dir "/refile.org"))

     (setq custom/jabber-history-dir (at-homedir "/.emacs-jabber"))

     (setq custom/erc-autoaway-message "I'm gone (autoaway after %i seconds)")

     (setq custom/juick-tmp-dir "~/.juick-avatars/")
     (setq custom/psto-tmp-dir "~/.psto-avatars/")

     (setq custom/jabber-resource "laptoptop")
     (setq custom/hyperspec-root "~/help/HyperSpec/")

     (setq custom/wl-domain "ronin.homelinux.net")

     (setq custom/maildir-folder "~/Mail")

     ;; pylookup
     (defun at-pylookup-dir (&optional suffix)
       (concat (at-config-basedir "el-get/pylookup") suffix))

     (defconst emacs-tmp-dir (at-homedir "/.emacs-backups"))

     (setq custom/php-manual-path "/home/octocat/documentation/php-chunked-xhtml/")
   #+END_SRC
** Encryption
   #+BEGIN_SRC emacs-lisp
     (use-package epa
       :config
       (epa-file-enable)
       (setq epg-gpg-home-directory "~/.gnupg"))
   #+END_SRC
** load various private credentials from GPG-encrypted file
   #+BEGIN_SRC emacs-lisp
     (load (at-config-basedir "credentials.el.gpg"))
   #+END_SRC
* appearance
** populate fonts inventory
   #+BEGIN_SRC emacs-lisp
     (define-namespace custom/

     (defvar fonts-def (make-hash-table :test 'equal)
       "User's font definitions")

     (defun set-xwindows-font (key)
       (set-face-attribute 'default nil :font (gethash key fonts-def)))

     (setf (gethash "consolas-base" fonts-def) "Consolas:size=12")
     (setf (gethash "terminus" fonts-def) "Terminus:size=14")
     (setf (gethash "terminus-bold" fonts-def) "TerminusBold:size=12")
     (setf (gethash "monaco" fonts-def) "Monaco:size=12")
     (setf (gethash "ptmono" fonts-def) "PTMono:size=12")
     (setf (gethash "adobe-courier-bold-14" fonts-def) "-Adobe-Courier-bold-normal-normal-*-14-*-*-*-m-90-iso10646-1")
     (setf (gethash "adobe-helvetica-bold-12" fonts-def) "-Adobe-Helvetica-bold-normal-normal-*-12-*-*-*-*-70-iso10646-1")
     (setf (gethash "adobe-helvetica-bold-14" fonts-def) "-Adobe-Helvetica-bold-normal-normal-*-14-*-*-*-*-82-iso10646-1")
     (setf (gethash "adobe-utopia-bold-12" fonts-def) "-Adobe-Utopia-bold-normal-normal-*-12-*-*-*-*-70-iso10646-1")
     (setf (gethash "lucidatypewriter-bold-12" fonts-def) "-B&H-LucidaTypewriter-bold-normal-normal-Sans-12-*-*-*-m-70-iso10646-1")
     (setf (gethash "adobe-helvetica-bold-12-1" fonts-def) "-adobe-helvetica-bold-o-normal--12-*-75-75-p-69-iso10646-1")
     (setf (gethash "dec-terminal-bold-14" fonts-def) "-DEC-Terminal-bold-normal-normal-*-14-*-*-*-c-80-iso10646-1")
     (setf (gethash "dec-terminal-normal-14" fonts-def) "-DEC-Terminal-normal-normal-normal-*-14-*-*-*-c-80-iso10646-1")
     (setf (gethash "misc-fixed-normal-13" fonts-def) "-Misc-Fixed-normal-normal-normal-*-13-*-*-*-c-70-iso10646-1")
     (setf (gethash "adobe-courier-bold-12" fonts-def) "-adobe-courier-bold-r-normal--12-*-75-75-m-70-iso10646-1")
     (setf (gethash "b&h-luxi-mono-bold" fonts-def) "-b&h-Luxi Mono-bold-normal-normal-*-*-*-*-*-m-0-iso10646-1")
     (setf (gethash "b&h-lucidatypewriter-bold-12" fonts-def) "-b&h-lucidatypewriter-bold-r-normal-sans-12-*-75-75-m-70-iso10646-1")
     (setf (gethash "b&h-lucidatypewriter-medium-12" fonts-def) "-b&h-lucidatypewriter-medium-r-normal-sans-12-*-75-75-m-70-iso10646-1")
     (setf (gethash "bitstream-courier-10-pitch-bold" fonts-def) "-bitstream-Courier 10 Pitch-bold-normal-normal-*-*-*-*-*-m-0-iso10646-1")
     (setf (gethash "bitstream-courier-10-pitch-normal" fonts-def) "-bitstream-Courier 10 Pitch-normal-normal-normal-*-*-*-*-*-m-0-iso10646-1")
     (setf (gethash "bitstream-terminal-medium-18" fonts-def) "-bitstream-terminal-medium-r-normal--18-*-100-100-c-110-iso8859-1")
     (setf (gethash "dec-terminal-bold-14-1" fonts-def) "-dec-terminal-bold-r-normal--14-*-75-75-c-80-iso8859-1")
     (setf (gethash "dec-terminal-medium-14" fonts-def) "-dec-terminal-medium-r-normal--14-*-75-75-c-80-iso8859-1")
     (setf (gethash "ibm-courier-bold" fonts-def) "-ibm-Courier-bold-normal-normal-*-*-*-*-*-m-0-iso10646-1")
     (setf (gethash "ibm-courier-normal" fonts-def) "-ibm-Courier-normal-normal-normal-*-*-*-*-*-m-0-iso10646-1")
     (setf (gethash "microsoft-consolas-for-powerline-bold" fonts-def) "-microsoft-Consolas for Powerline-bold-normal-normal-*-*-*-*-*-m-0-iso10646-1")
     (setf (gethash "microsoft-consolas-for-powerline-normal" fonts-def) "-microsoft-Consolas for Powerline-normal-normal-normal-*-*-*-*-*-m-0-iso10646-1")
     (setf (gethash "microsoft-consolas-bold" fonts-def) "-microsoft-Consolas-bold-normal-normal-*-*-*-*-*-m-0-iso10646-1")
     (setf (gethash "microsoft-consolas-normal" fonts-def) "-microsoft-Consolas-normal-normal-normal-*-*-*-*-*-m-0-iso10646-1")
     (setf (gethash "misc-fixed-bold-13" fonts-def) "-misc-fixed-bold-r-normal--13-*-75-75-c-70-iso10646-1")
     (setf (gethash "misc-fixed-medium-r-normal-13" fonts-def) "-misc-fixed-medium-r-normal--13-*-75-75-c-70-iso10646-1")
     (setf (gethash "misc-fixed-medium-r-normal-13" fonts-def) "-misc-fixed-medium-r-normal--13-*-75-75-c-80-iso10646-1")
     (setf (gethash "misc-fixed-medium-r-normal-14" fonts-def) "-misc-fixed-medium-r-normal--14-*-75-75-c-70-iso10646-1")
     (setf (gethash "monotype-andale-mono-normal" fonts-def) "-monotype-Andale Mono-normal-normal-normal-*-*-*-*-*-m-0-iso10646-1")
     (setf (gethash "monotype-courier-new-bold" fonts-def) "-monotype-Courier New-bold-normal-normal-*-*-*-*-*-m-0-iso10646-1")
     (setf (gethash "monotype-courier-new-normal" fonts-def) "-monotype-Courier New-normal-normal-normal-*-*-*-*-*-m-0-iso10646-1")
     (setf (gethash "dejavu-sans-mono-bold" fonts-def) "-unknown-DejaVu Sans Mono-bold-normal-normal-*-*-*-*-*-m-0-iso10646-1")
     (setf (gethash "dejavu-sans-mono-normal" fonts-def) "-unknown-DejaVu Sans Mono-normal-normal-normal-*-*-*-*-*-m-0-iso10646-1")
     (setf (gethash "freemono-bold" fonts-def) "-unknown-FreeMono-bold-normal-normal-*-*-*-*-*-m-0-iso10646-1")
     (setf (gethash "freemono-normal" fonts-def) "-unknown-FreeMono-normal-normal-normal-*-*-*-*-*-m-0-iso10646-1")
     (setf (gethash "liberation-mono-bold" fonts-def) "-unknown-Liberation Mono-bold-normal-normal-*-*-*-*-*-m-0-iso10646-1")
     (setf (gethash "liberation-mono-normal" fonts-def) "-unknown-Liberation Mono-normal-normal-normal-*-*-*-*-*-m-0-iso10646-1")
     (setf (gethash "urw-nimbus-mono-l-bold" fonts-def) "-urw-Nimbus Mono L-bold-normal-normal-*-16-*-*-*-m-0-iso10646-1")
     (setf (gethash "urw-nimbus-mono-l-normal" fonts-def) "-urw-Nimbus Mono L-normal-normal-normal-*-*-*-*-*-m-0-iso10646-1")
     (setf (gethash "xos4-terminus-bold-16" fonts-def) "-xos4-Terminus-bold-normal-normal-*-16-*-*-*-c-80-iso10646-1")
     (setf (gethash "bsvera-sans-mono" fonts-def) "Bitstream Vera Sans Mono:size=12")
     (setf (gethash "hack-regular" fonts-def) "Hack:size=12")
     (setf (gethash "fantasque" fonts-def) "Fantasque Sans Mono:size=14")
     (setf (gethash "sourcepro" fonts-def) "Source Code Pro:style=Bold:size=13")

     )
   #+END_SRC
** setup smart modeline
   #+BEGIN_SRC emacs-lisp
     (use-package smart-mode-line
       :ensure t
       :ensure rich-minority
       :config
       (setq sml/no-confirm-load-theme t)
       (setq sml/theme 'respectful)
       (setq sml/battery-format " %p%% ")
       (sml/setup)
       (set-face-attribute 'sml/discharging nil :foreground "tomato"))
   #+END_SRC
** load themes and choose one
   #+BEGIN_SRC emacs-lisp
     (use-package deep-thought-theme :ensure t :disabled t)
     (use-package material-theme :ensure t :disabled t)
     (use-package nzenburn-theme :ensure t :disabled t)
     (use-package zenburn-theme :ensure t :disabled t)
     (use-package darkburn-theme :ensure t)

     (load-theme 'darkburn t)
     (setq color-theme-is-global t)
   #+END_SRC
** set common colors
   #+BEGIN_SRC emacs-lisp
     (defvar bg-colors "emacs background colors list")
     (defvar fg-colors "emacs foreground colors list")

     (setq bg-colors '("cornsilk" "gray0" "gray18" "gray40"))
     (setq fg-colors '("gainsboro" "navy"))
     (setq mouse-colors '("firebrick" "yellow"))

     (set-cursor-color "chartreuse2")
   #+END_SRC
** setup fonts
   #+BEGIN_SRC emacs-lisp
     (setq font-lock-maximum-decoration t)
     (setq scalable-fonts-allowed t)

     (custom/set-xwindows-font "consolas-base")

     (use-package unicode-fonts :ensure t)
     (unicode-fonts-setup)
   #+END_SRC
** update some faces values
   #+BEGIN_SRC emacs-lisp
     (when (boundp 'zenburn-colors-alist)
       (set-face-attribute 'default nil :background "#1A1A1A")
       (set-face-attribute 'region nil :background (cdr (assoc "zenburn-bg-2" zenburn-colors-alist))))
   #+END_SRC
* persistence
** definitions
   #+BEGIN_SRC emacs-lisp
     (defun desktop-autosave-save ()
       (desktop-save-in-desktop-dir))
     (add-hook 'auto-save-hook (lambda () (desktop-autosave-save)))

     (defun my-desktop-ignore-semantic (desktop-buffer-file-name)
       "Function to ignore cedet minor modes during restore of buffers"
       nil)
   #+END_SRC
** save history
   #+BEGIN_SRC emacs-lisp
     (use-package savehist
       :config
       (setq savehist-file (at-data-dir "/savehist"))
       (setq savehist-save-minibuffer-history t)
         (setq savehist-autosave-interval 60)
         (setq history-length t)
         (setq history-delete-duplicates t)
       (setq savehist-additional-variables
             '(kill-ring
               search-ring
               regexp-search-ring))
       (savehist-mode t))
   #+END_SRC
** maintain recent files
   #+BEGIN_SRC emacs-lisp
     (use-package recentf
       :defer t
       :init
       (use-package recentf-ext :ensure t)
       :config
       (progn
         (setq recentf-save-file (at-data-dir "/.recentf"))
         (setq recentf-max-saved-items 250)
         (setq recentf-max-menu-items 15)
         ;; get rid of `find-file-read-only' and replace it with something more useful.
         (recentf-mode t) ;enable recent files mode.
         ))
   #+END_SRC
** backups
   #+BEGIN_SRC emacs-lisp
     (setq auto-save-file-name-transforms `((".*" ,emacs-tmp-dir t)))
     (setq backup-directory-alist `(("." . ,emacs-tmp-dir)))
     (setq backup-by-copying t)
     (setq backup-by-copying-when-linked t)
     (setq delete-old-versions -1)
     (setq version-control t)

     (use-package backup-walker
       :ensure t
       ;;TODO: bind to key and other stuff
       )
   #+END_SRC
** desktop
   #+BEGIN_SRC emacs-lisp
     (use-package desktop
         :config
         (setq-default desktop-missing-file-warning nil)
         (setq-default desktop-path '("~"))
         (setq-default desktop-save t)
         (setq-default desktop-save-mode t)
         (setq-default save-place t)
         (setq history-length t)
         (setq history-delete-duplicates t)
         (setq desktop-buffers-not-to-save
                     (concat "\\(" "^nn\\.a[0-9]+\\|\\.log\\|(ftp)\\|^tags\\|^TAGS"
                                     "\\|\\.emacs.*\\|\\.diary\\|\\.newsrc-dribble\\|\\.bbdb"
                                     "\\)$"))
         (desktop-save-mode t)
         (setq desktop-restore-eager 10)
         (desktop-load-default)

         (add-to-list 'desktop-globals-to-save '(buffer-name-history      . 100))
         (add-to-list 'desktop-globals-to-save '(dired-regexp-history     . 20))
         (add-to-list 'desktop-globals-to-save '(extended-command-history . 100))
         (add-to-list 'desktop-globals-to-save '(file-name-history        . 500))
         (add-to-list 'desktop-globals-to-save '(grep-history             . 50))
         (add-to-list 'desktop-globals-to-save '(minibuffer-history       . 100))
         (add-to-list 'desktop-globals-to-save '(query-replace-history    . 60))
         (add-to-list 'desktop-globals-to-save '(read-expression-history  . 60))
         (add-to-list 'desktop-globals-to-save '(regexp-history           . 60))
         (add-to-list 'desktop-globals-to-save '(regexp-search-ring       . 20))
         (add-to-list 'desktop-globals-to-save '(search-ring              . 20))
         (add-to-list 'desktop-globals-to-save '(shell-command-history    . 50))
         (add-to-list 'desktop-globals-to-save 'file-name-history)

         (add-to-list 'desktop-locals-to-save 'buffer-file-coding-system)
         (add-to-list 'desktop-locals-to-save 'tab-width)
         (add-to-list 'desktop-locals-to-save 'buffer-file-coding-system)

         (add-to-list 'desktop-modes-not-to-save 'dired-mode)
         (add-to-list 'desktop-modes-not-to-save 'Info-mode)
         (add-to-list 'desktop-modes-not-to-save 'info-lookup-mode)
         (add-to-list 'desktop-modes-not-to-save 'fundamental-mode))
   #+END_SRC
* common
** emacs server
*** defininitions
    #+BEGIN_SRC emacs-lisp
      (define-namespace custom/

      (defun server-save-edit ()
          (interactive)
          (save-buffer)
          (server-edit))

      (defun save-buffer-clients-on-exit ()
          (interactive)
          (if (and (boundp 'server-buffer-clients) server-buffer-clients)
                  (server-save-edit)
              (save-buffers-kill-emacs t)))

      )
    #+END_SRC
*** setup
    #+BEGIN_SRC emacs-lisp
      (add-hook 'server-visit-hook
                (lambda () (local-set-key (kbd "C-c C-c") 'custom/server-save-edit)))
      ;; (add-hook 'kill-emacs-hook 'custom/save-buffer-clients-on-exit)

      (unless (and (string-equal "root" (getenv "USER"))
                   (server-running-p))
        ;; Only start server mode if I'm not root and it is not running
        (require 'server)
        (server-start))
    #+END_SRC
** some keyboard related stuff
   #+BEGIN_SRC emacs-lisp
       ;;;###autoload
     (defun keys-describe-prefixes ()
       (interactive)
       (with-output-to-temp-buffer "*Bindings*"
         (dolist (letter-group (list
                                (cl-loop for c from ?a to ?z
                                         collect (string c))
                                (cl-loop for c from ?α to ?ω
                                         collect (string c))))
           (dolist (prefix '("" "C-" "M-" "C-M-"))
             (princ (mapconcat
                     (lambda (letter)
                       (let ((key (concat prefix letter)))
                         (format ";; (global-set-key (kbd \"%s\") '%S)"
                                 key
                                 (key-binding (kbd key)))))
                     letter-group
                     "\n"))
             (princ "\n\n")))))

     (use-package keyfreq
       :ensure t
       :defer t
       :config
       (progn
         (keyfreq-mode 1)
         (keyfreq-autosave-mode 1)))

     (use-package unbound :ensure t)
   #+END_SRC
** remove elc after save
   If you're saving an elisp file, likely the .elc is no longer valid.
   #+BEGIN_SRC emacs-lisp
     (add-hook 'after-save-hook
               (lambda ()
               (if (and (equal major-mode 'emacs-lisp-mode)
                        (file-exists-p (concat buffer-file-name "c")))
                     (delete-file (concat buffer-file-name "c")))))
   #+END_SRC
** a handy macro to execute code only in major mode it makes sense in
   #+BEGIN_SRC emacs-lisp
     (define-namespace custom/

     (defmacro with-major-mode (mode &rest body)
       `(lambda () (interactive)
          (when (eq major-mode ,mode)
            (progn ,@body))))

     )
   #+END_SRC
** Enable functions that are disabled by default
   #+BEGIN_SRC emacs-lisp
     (put 'dired-find-alternate-file 'disabled nil)
     (put 'downcase-region 'disabled nil)
     (put 'downcase-region 'disabled nil)
     (put 'erase-buffer 'disabled nil)
     (put 'narrow-to-region 'disabled nil)
     (put 'scroll-left 'disabled nil)
     (put 'scroll-right 'disabled nil)
     (put 'set-goal-column 'disabled nil)
     (put 'upcase-region 'disabled nil)
     (put 'upcase-region 'disabled nil)

     (setq disabled-command-function nil)
   #+END_SRC
** world time
   #+BEGIN_SRC emacs-lisp
     (setq display-time-world-list
           '(("Europe/Moscow" "Moscow")
             ("America/New_York" "New York")))
   #+END_SRC
** security
   #+BEGIN_SRC emacs-lisp
     (use-package epg)

     (setq password-cache-expiry 7200)
     (setq password-cache t)
   #+END_SRC
** local variables processing
   #+BEGIN_SRC emacs-lisp
     (setq enable-local-variables nil)
   #+END_SRC
** warnings processing
   #+BEGIN_SRC emacs-lisp
     (setq warning-suppress-types nil)
   #+END_SRC
** frames
*** call this on WM side to sync frames and heads count
    #+BEGIN_SRC emacs-lisp
      (define-namespace custom/

      (defun update-frames (heads-count)
        (let ((frames-count (length (frame-list))))
          (cond
           ((= heads-count 2)
            (when (= frames-count 1)
              (make-frame-command)))
           ((= heads-count 1)
            (when (> frames-count 1)
              (delete-other-frames)))
           (t
            (delete-other-frames)))))

      )
    #+END_SRC
*** appearance
    #+BEGIN_SRC emacs-lisp
      (setq frame-title-format "emacs - %b %f")

      (setq inhibit-startup-echo-area-message "octocat")
      (setq inhibit-startup-message t)
      (setq inhibit-startup-screen t)
      (setq initial-scratch-message nil)

      (setq line-number-mode t)

      (setq resize-mini-windows t)
      (setq max-mini-window-height 0.33)

      (setq column-number-mode t)

      (load-library "time")
      (setq display-time-day-and-date t)
      (setq display-time-form-list (list 'time 'load))
      (setq display-time-mail-file t)
      (setq display-time-string-forms '( day " " monthname " (" dayname ") " 24-hours ":" minutes))

      (setq use-dialog-box nil)
      (setq visible-bell t)
      (setq size-indication-mode t)
      (setq split-width-threshold nil)
      (setq enable-recursive-minibuffers t)
      (setq echo-keystrokes 0.1)
      (setq truncate-partial-width-windows nil)

      (and (fboundp 'scroll-bar-mode) (scroll-bar-mode 0))
      (menu-bar-mode -1)
      (scroll-bar-mode 0)
      (blink-cursor-mode 0)
      (tool-bar-mode 0)
      (tooltip-mode nil)
      (global-font-lock-mode t)
      (display-battery-mode 1)
      (display-time)

      (use-package popwin :ensure t)
      (use-package vline :ensure t)

      (use-package volatile-highlights
        :ensure t
        :config
        (volatile-highlights-mode t))
    #+END_SRC
** GC tweaks
   #+BEGIN_SRC emacs-lisp
     (setq gc-cons-percentage 0.3)
     (setq gc-cons-threshold 20000000)
   #+END_SRC
** hooks for tabs and spaces ;]
   #+BEGIN_SRC emacs-lisp
     ;; clean trailing whitespaces automatically
     (setq custom/trailing-whitespace-modes
           '(
             c++-mode
             c-mode
             haskell-mode
             emacs-lisp-mode
             lisp-mode
             scheme-mode
             erlang-mode
             python-mode
             js-mode
             js2-mode
             html-mode
             lua-mode
             yaml-mode
             ))
     ;; untabify some modes
     (setq custom/untabify-modes
           '(
             haskell-mode
             emacs-lisp-mode
             lisp-mode
             scheme-mode
             erlang-mode
             clojure-mode
             python-mode
             ))

     (defun common-hooks/trailing-whitespace-hook ()
       (when (member major-mode custom/trailing-whitespace-modes)
         (delete-trailing-whitespace)))

     (defun common-hooks/untabify-hook ()
       (when (member major-mode custom/untabify-modes)
         (untabify (point-min) (point-max))))

     (add-hook 'before-save-hook 'common-hooks/trailing-whitespace-hook)
     (add-hook 'before-save-hook 'common-hooks/untabify-hook)
   #+END_SRC
** encodings
   #+BEGIN_SRC emacs-lisp
     (setq locale-coding-system 'utf-8)
     (set-default buffer-file-coding-system 'utf-8-unix)
     (set-default default-buffer-file-coding-system 'utf-8-unix)
     (prefer-coding-system 'utf-8)
     (set-buffer-file-coding-system 'utf-8 'utf-8-unix)
     (set-default-coding-systems 'utf-8)
     (set-keyboard-coding-system 'utf-8)
     (set-selection-coding-system 'utf-8)
     (set-terminal-coding-system 'utf-8)
     (define-coding-system-alias 'UTF-8 'utf-8)
   #+END_SRC
** uniquify buffer names
   #+BEGIN_SRC emacs-lisp
     (use-package uniquify
       :config
       (progn
         (setq uniquify-buffer-name-style 'post-forward)
         (setq uniquify-separator ":")
         (setq uniquify-ignore-buffers-re "^\\*")
         (setq uniquify-strip-common-suffix nil)))
   #+END_SRC
** diminish modeline contents
   #+BEGIN_SRC emacs-lisp
     (use-package rich-minority
       :ensure t
       :config
       (setq rm-blacklist
             '(" GitGutter"
               " VHl"
               " WLR"
               " Emmet"
               " Wrap"
               " Fill"
               " Abbrev"
               " SliNav"
               " Helm"
               )))

     (use-package diminish
       :ensure t
       :commands diminish)
   #+END_SRC
** view system processes info
   #+BEGIN_SRC emacs-lisp
     (use-package list-processes+ :ensure t)

     (global-set-key (kbd "C-x c") 'proced)
   #+END_SRC
** OS-specific stuff
   Besides the common part of the common setup (sic!) there is also 
   a little part of customizations begin specific to OS Emacs is 
   running on. So here they are (conditionally loaded):
*** linux specific
    #+BEGIN_SRC emacs-lisp :tangle (if (eq system-type 'gnu/linux) "yes" "no")
      (setq x-alt-keysym 'meta)

      (setq browse-url-browser-function 'browse-url-generic)
      (setq browse-url-generic-program "/usr/bin/firefox")
    #+END_SRC
*** darwin specific
    #+BEGIN_SRC emacs-lisp :tangle (if (eq system-type 'darwin) "yes" "no")
      ;; key bindings
      (cua-mode t)
      (setq mac-option-key-is-meta t)
      (setq mac-command-key-is-meta nil)
      (setq process-connection-type nil)
      (setq mac-command-modifier 'hyper)    ;meta|super
      (setq mac-pass-command-to-system nil)   ;;avoid hiding with M-h
      (global-set-key [(hyper x)] 'cua-cut-region)
      (global-set-key [(hyper c)] 'cua-copy-region)
      (global-set-key [(hyper v)] 'cua-paste)
      (global-set-key [kp-delete] 'delete-char) ;; sets fn-delete to be right-delete
      (setq mac-control-modifier 'control)

      ;; Ignore .DS_Store files with ido mode
      (add-to-list 'ido-ignore-files "\\.DS_Store")

      (setq locate-command "mdfind")
      (setq helm-locate-command "mdfind")

      (prefer-coding-system 'utf-8-unix)
      (set-default-coding-systems 'utf-8-unix)
      (if (< emacs-major-version 23)
          (set-keyboard-coding-system 'utf-8))
      (set-clipboard-coding-system 'utf-8)
      (set-terminal-coding-system 'utf-8)
    #+END_SRC
** ubiquitous hydra
*** some definitions
    #+BEGIN_SRC emacs-lisp
      (define-namespace custom/

      ;; some customizations for nested hydras
      (defvar hydra-stack nil)

      (defun hydra-push (expr)
        (push `(lambda () ,expr) hydra-stack))

      (defun hydra-pop ()
        (interactive)
        (let ((x (pop hydra-stack)))
          (when x
            (funcall x))))

      )
    #+END_SRC
*** use it
    #+BEGIN_SRC emacs-lisp
      (use-package hydra :ensure t)
    #+END_SRC
* navigate
** URLs, links and TAPs
*** definitions
    #+BEGIN_SRC emacs-lisp
      (define-namespace custom/

      ;;TODO: make implemetation less straightforward or find "right way" to do it
      (defun process-thing-at-point ()
        (interactive)
        (cond
         ((equal major-mode 'ag-mode) (compile-goto-error))
         ((or (equal major-mode 'org-agenda-mode)
              (equal major-mode 'org-mode)) (org-return))
         ((or (equal major-mode 'jabber-chat-mode)
              (equal major-mode 'erc-mode)) (browse-url (thing-at-point 'url t)))
         (t (browse-url (thing-at-point 'url t)))))

      ;;TODO: find a common way for all url-browsing functionality in config
      ;;to handle special cases like spaces in urls, etc.
      (defun open-urls-in-region (beg end)
        "Open URLs between BEG and END."
        (interactive "r")
        (save-excursion
          (save-restriction
            (let ((urls))
              (narrow-to-region beg end)
              (goto-char (point-min))
              (while (re-search-forward org-plain-link-re nil t)
                (push (thing-at-point 'url) urls))
              (dolist (url (reverse urls))
                (browse-url url))))))

      (defvar url-regexp "\\(http\\(s\\)*://\\)\\(www.\\)*\\|\\(www.\\)")

      (defun find-url-backward ()
        (interactive)
        (re-search-backward url-regexp nil t))

      (defun find-url-forward ()
        (interactive)
        (re-search-forward url-regexp nil t)
        )

      )
    #+END_SRC
*** setup
    #+BEGIN_SRC emacs-lisp
      (use-package ace-link
        :ensure t
        :config
        (ace-link-setup-default))

      (use-package link-hint
        :ensure t)
    #+END_SRC
** cursor positioning
   #+BEGIN_SRC emacs-lisp
     (define-namespace custom/

     ;;Make cursor stay in the same column when scrolling using pgup/dn.
     ;;Previously pgup/dn clobbers column position, moving it to the
     ;;beginning of the line.
     ;;<http://www.dotemacs.de/dotfiles/ElijahDaniel.emacs.html>
     (defadvice scroll-up (around ewd-scroll-up first act)
       "Keep cursor in the same column."
       (let ((col (current-column)))
         ad-do-it
         (move-to-column col)))
     (defadvice scroll-down (around ewd-scroll-down first act)
       "Keep cursor in the same column."
       (let ((col (current-column)))
         ad-do-it
         (move-to-column col)))

     (defun smarter-move-beginning-of-line (arg)
       "Move point back to indentation of beginning of line.

       Move point to the first non-whitespace character on this line.
       If point is already there, move to the beginning of the line.
       Effectively toggle between the first non-whitespace character and
       the beginning of the line.

       If ARG is not nil or 1, move forward ARG - 1 lines first.  If
       point reaches the beginning or end of the buffer, stop there."
       (interactive "^p")
       (setq arg (or arg 1))
       ;; Move lines first
       (when (/= arg 1)
         (let ((line-move-visual nil))
           (forward-line (1- arg))))
       (let ((orig-point (point)))
         (back-to-indentation)
         (when (= orig-point (point))
           (move-beginning-of-line 1))))

     (defun skip-to-next-blank-line ()
       (interactive)
       (let ((inhibit-changing-match-data t))
         (forward-char 1)
         (unless (search-forward-regexp "^\\s *$" nil t)
           (forward-char -1))))

     (defun skip-to-previous-blank-line ()
       (interactive)
       (let ((inhibit-changing-match-data t))
         (forward-char -1)
         (unless (search-backward-regexp "^\\s *$" nil t)
           (forward-char 1))))

     ;; When popping the mark, continue popping until the cursor actually moves
     ;; Also, if the last command was a copy - skip past all the expand-region cruft.
     (defadvice pop-to-mark-command (around ensure-new-position activate)
       (let ((p (point)))
         (when (eq last-command 'save-region-or-current-line)
           ad-do-it
           ad-do-it
           ad-do-it)
         (dotimes (i 10)
           (when (= p (point)) ad-do-it))))

     )

     (setq scroll-preserve-screen-position 'always)

     (use-package saveplace
         :config
         (setq save-place-file (at-data-dir "/.emacs-places"))
         (setq save-place t))

     (setq-default save-place t)
   #+END_SRC
** helm
*** definitions
    #+BEGIN_SRC emacs-lisp
      (define-namespace custom/

      (defun helm-find-files ()
        (interactive)
        (helm-other-buffer '(
                             helm-source-files-in-current-dir
                             helm-source-recentf
                             helm-source-file-name-history
                             helm-source-findutils
                             helm-source-locate
                             )
                           "*helm-find-files*"))

      (require 'helm-utils)
      (defvar helm-source-portage-files
        `((name . "Portage files")
          (candidates . ,(helm-walk-directory "/etc/portage" :path 'full))
          (action . (lambda (candidate)
                      (helm-find-file-as-root candidate)))))

      )
    #+END_SRC
*** setup
    #+BEGIN_SRC emacs-lisp
      (use-package helm
        :defer t
        :init
        (use-package helm-config)
        (use-package helm-files)
        (use-package helm-info)
        (use-package helm-locate)
        (use-package helm-misc)
        (use-package helm-grep)
        (use-package wgrep-helm :ensure t) ;TODO: maybe configure
        (use-package helm-projectile :ensure t
              :config
              (helm-projectile-on))
        (use-package helm-descbinds :ensure t)
        (use-package helm-themes :ensure t)
        (use-package helm-helm-commands :ensure t)
        (use-package helm-dired-recent-dirs :ensure t)
        (use-package helm-flycheck :ensure t)
        :config
        (use-package ac-helm :ensure auto-complete)
        (progn
          (setq helm-quick-update t)
          (setq helm-split-window-in-side-p t)
          (setq helm-ff-search-library-in-sexp t)
          (setq helm-ff-file-name-history-use-recentf t)
          (setq helm-buffers-fuzzy-matching t)
          (setq helm-recentf-fuzzy-match t)
          (setq helm-locate-fuzzy-match t)
          (setq helm-M-x-fuzzy-match t)
          (setq helm-apropos-fuzzy-match t)
          (setq helm-apropos-fuzzy-match t)
          (setq helm-move-to-line-cycle-in-source t)
          (setq helm-adaptive-history-file (at-data-dir "/helm-adaptive-history"))
          (set-face-attribute 'hydra-face-blue nil :foreground "#00bfff")
          (pushnew 'python-mode helm-buffers-favorite-modes)
          (bind-key "C-<down>" 'helm-next-source helm-map)
          (bind-key "C-<up>" 'helm-previous-source helm-map)
          (bind-key "C-x b" 'helm-buffers-list)
          (bind-key "C-*" 'helm-mark-all helm-map)
          (bind-key "C-x j j" 'helm-bookmarks)
          (bind-key "M-x" 'helm-M-x)
          (bind-key "C-h a" 'helm-apropos)
          (bind-key "C-h r" 'helm-info-emacs)
          (bind-key "C-h r" 'helm-info-at-point)
          (bind-key "C-x C-r" 'helm-recentf)
          ;;TODO: investigate and bind 'helm-resume
          ;;TODO: investigate and bind 'helm-multi-files
          (helm-mode t)
          (helm-adaptive-mode 1)
          (helm-autoresize-mode 1)
          (helm-descbinds-mode 1)             ; find the cause of "attempt to delete minibuffer window"
          ;;TODO: investigate and bind 'helm-descbinds
          ))

      (use-package helm-ag
        :ensure t
        :config
        (setq helm-ag-insert-at-point 'symbol)
        (setq helm-ag-fuzzy-match t)
        ;;TODO: add other common escapes
        (defadvice helm-ag--query (after escape-search-term activate)
          (setq helm-ag--last-query (replace-regexp-in-string "\\*" "\\\\*" helm-ag--last-query))))

      ;;TODO: sync and maybe slurp something from rc-cc
      (use-package helm-gtags
        :ensure t
        :defer t
        :config
        (progn
          (setq helm-gtags-path-style 'relative)
          (setq helm-gtags-ignore-case t)
          (setq helm-gtags-auto-update t)
          (setq helm-gtags-use-input-at-cursor t)
          (setq helm-gtags-pulse-at-cursor t)
          (setq helm-gtags-suggested-key-mapping t)
          (bind-key "M-t" 'helm-gtags-find-tag helm-gtags-mode-map)
          (bind-key "M-r" 'helm-gtags-find-rtag helm-gtags-mode-map)
          (bind-key "C-M-s" 'helm-gtags-find-symbol helm-gtags-mode-map)
          (bind-key "M-s s" 'helm-gtags-select helm-gtags-mode-map)
          (bind-key "M-g M-p" 'helm-gtags-parse-file helm-gtags-mode-map)
          (bind-key "C-c <" 'helm-gtags-previous-history helm-gtags-mode-map)
          (bind-key "C-c >" 'helm-gtags-next-history helm-gtags-mode-map)
          (bind-key "M-." 'helm-gtags-dwim helm-gtags-mode-map)
          (bind-key "M-," 'helm-gtags-pop-stack helm-gtags-mode-map)
          (bind-key "M-s t" 'helm-gtags-tags-in-this-function helm-gtags-mode-map)
          (add-hook 'dired-mode-hook 'helm-gtags-mode)
          (add-hook 'c-mode-hook 'helm-gtags-mode)
          (add-hook 'c++-mode-hook 'helm-gtags-mode)))

      ;;(use-package helm-fuzzier
      ;;  :ensure t
      ;;  :config
      ;;  (helm-fuzzier-mode 1))

      (use-package helm-flx
        :ensure t
        :config
        (helm-flx-mode 1))
    #+END_SRC
** projectile
*** definitions
    #+BEGIN_SRC emacs-lisp
      (define-namespace custom/

      (defvar suppress-projectile-symbol-at-point nil
        "Whether to suppress inserting symbol at point while using projectile searches")

      (defadvice projectile-symbol-at-point (around projectile-suppress-symbol-at-point activate)
        (if suppress-projectile-symbol-at-point
            (setq ad-return-value "")
          (setq ad-return-value ad-do-it)))

      (defun projectile-ag (arg)
        (interactive "p")
        (message "arg: %s" arg)
        (if (equal arg 4)
            (setq suppress-projectile-symbol-at-point t)
          (setq suppress-projectile-symbol-at-point nil))
        (call-interactively 'projectile-ag))

      )
    #+END_SRC
*** setup
    #+BEGIN_SRC emacs-lisp
      (use-package projectile
          :ensure t
          :commands (projectile-find-file custom/projectile-ag)
          :config
          (progn
              (projectile-global-mode) ;; to enable in all buffers
              (setq projectile-enable-caching t)
              (setq projectile-cache-file (at-data-dir "/projectile.cache"))
              (setq projectile-known-projects-file (at-data-dir "/projectile-bookmarks.eld"))
              (setq projectile-require-project-root nil)
              (setq projectile-switch-project-action 'helm-projectile)
              (setq projectile-completion-system 'ivy)
              (setq projectile-tags-command
                          "find %s -type f -print | egrep -v \"/[.][a-zA-Z]\" | etags -")
              (add-to-list 'projectile-other-file-alist '("html" "js"))
              (add-to-list 'projectile-other-file-alist '("js" "html"))
              (diminish 'projectile-mode "prj")
              (defhydra hydra-projectile (:color teal)
                  "
          PROJECT: %(projectile-project-root)
          find                         Project               More
          ---------------------------------------------------------------------------------------
          _fd_irectory                 i_pb_uffer            _c_ommander
          _ft_est file                 in_pf_o               _s_witch to buffer
          _ff_ile                      run _pt_ests          switch to buffer (other _w_indow)
          file d_fw_im                 _pc_ompile            _d_ired
          file o_ft_her window         _pi_nvalidate cache   display _b_uffer
          _fo_ther file                _pk_ill buffers       _r_ecentf
          other file _fO_ther window
          "
                  ("fd" helm-projectile-find-dir)
                  ("ft" projectile-find-test-file)
                  ("ff" helm-projectile-find-file)
                  ("fw" helm-projectile-find-file-dwim)
                  ("ft" projectile-find-file-dwim-other-window)
                  ("fo" helm-projectile-find-other-file)
                  ("fO" projectile-find-other-file-other-window)
                  ("pb" projectile-ibuffer)
                  ("pf" projectile-project-info)
                  ("pt" projectile-test-project)
                  ("pc" projectile-compile-project)
                  ("pi" projectile-invalidate-cache)
                  ("pk" projectile-kill-buffers)
                  ("ps" projectile-switch-project)
                  ("c" projectile-commander)
                  ("s" projectile-switch-to-buffer)
                  ("w" projectile-switch-to-buffer-other-window)
                  ("d" projectile-dired)
                  ("b" projectile-display-buffer)
                  ("r" projectile-recentf)
                  ;;TODO: write legend
                  ("s" projectile-run-command-in-root)
                  ("S" projectile-run-async-shell-command-in-root))
              (global-set-key (kbd "<f8>") 'hydra-projectile/body)
              ))
    #+END_SRC
** dired
*** always refresh contents
    #+BEGIN_SRC emacs-lisp
      (define-namespace custom/

      ;; Updated file system on all buffer switches if in dired mode
      (defadvice switch-to-buffer-other-window (after auto-refresh-dired (buffer &optional norecord) activate)
        (if (equal major-mode 'dired-mode)
            (revert-buffer)))
      (defadvice switch-to-buffer (after auto-refresh-dired (buffer &optional norecord) activate)
        (if (equal major-mode 'dired-mode)
            (revert-buffer)))
      (defadvice display-buffer (after auto-refresh-dired (buffer &optional not-this-window frame) activate)
        (if (equal major-mode 'dired-mode)
            (revert-buffer)))
      (defadvice other-window (after auto-refresh-dired (arg &optional all-frame) activate)
        (if (equal major-mode 'dired-mode)
            (revert-buffer)))

      )
    #+END_SRC
*** navigate to margins
    #+BEGIN_SRC emacs-lisp
      (define-namespace custom/

      ;; C-a is nicer in dired if it moves back to start of files
      (defun dired-back-to-start-of-files ()
        (interactive)
        (backward-char (- (current-column) 2)))

      ;; M-up is nicer in dired if it moves to the third line - straight to the ".."
      (defun dired-back-to-top ()
        (interactive)
        (beginning-of-buffer)
        (next-line 2)
        (dired-back-to-start-of-files))

      ;; M-down is nicer in dired if it moves to the last file
      (defun dired-jump-to-bottom ()
        (interactive)
        (end-of-buffer)
        (next-line -1)
        (dired-back-to-start-of-files))

      )
    #+END_SRC
*** sort contents
    #+BEGIN_SRC emacs-lisp
      (define-namespace custom/

      (defun dired-sort ()
        "Sort dired listings with directories first."
        (save-excursion
          (let (buffer-read-only)
            (forward-line 2) ;; beyond dir. header
            (sort-regexp-fields t "^.*$" "[ ]*." (point) (point-max)))
          (set-buffer-modified-p nil)))

      (defadvice dired-readin
          (after dired-after-updating-hook first () activate)
        "Sort dired listings with directories first before adding marks."
        (dired-sort))

      )
    #+END_SRC
*** utils
    #+BEGIN_SRC emacs-lisp
      (define-namespace custom/

      (defun dired-open-term ()
        "Open an `ansi-term' that corresponds to current directory."
        (interactive)
        (let ((current-dir (dired-current-directory)))
          (term-send-string
           (custom/terminal)
           (if (file-remote-p current-dir)
               (let ((v (tramp-dissect-file-name current-dir t)))
                 (format "ssh %s@%s\n"
                         (aref v 1) (aref v 2)))
             (format "cd '%s'\n" current-dir)))))

      (defun sudo-dired ()
        (interactive)
        (require 'tramp)
        (let ((dir (expand-file-name default-directory)))
          (if (string-match "^/sudo:" dir)
              (user-error "Already in sudo")
            (dired (concat "/sudo::" dir)))))

      )
    #+END_SRC
*** setup
    #+BEGIN_SRC emacs-lisp
      (defvar *directory-separator* '?/)
      (define-obsolete-function-alias 'make-local-hook 'ignore "21.1")
      (define-obsolete-variable-alias 'directory-sep-char '*directory-separator*)

      (use-package dired
        :init
        (use-package dired-sort-menu :ensure t)
        :config
        (setq dired-recursive-deletes 'top) ;; Allows recursive deletes
        (setq dired-dwim-target t)
        (setq dired-listing-switches "-lah1v --group-directories-first")
        (global-set-key (kbd "C-c x") 'direx:jump-to-directory)
        ;; (global-set-key (kbd "C-c C-j") 'dired-jump)
        (bind-key "C-c C-s" 'dired-toggle-sudo dired-mode-map)
        (bind-key "C-c C-m" 'custom/get-file-md5 dired-mode-map)
        (bind-key "!" 'custom/sudo-dired dired-mode-map)
        (bind-key "C-a" 'custom/dired-back-to-start-of-files dired-mode-map)
        (bind-key "C-x C-k" 'dired-do-delete dired-mode-map) ;; Delete with C-x C-k to match file buffers and magit
        (bind-key "`" 'custom/dired-open-term dired-mode-map)
        (define-key dired-mode-map (vector 'remap 'beginning-of-buffer) 'custom/dired-back-to-top)
        (define-key dired-mode-map (vector 'remap 'end-of-buffer) 'custom/dired-jump-to-bottom))

      (use-package dired+
        :ensure t
        :config
        ;; TODO: check if this is not obsolete yet
        (setq diredp-ignored-file-name 'green-face)
        (setq diredp-other-priv 'white-face)
        (setq diredp-rare-priv 'white-red-face)
        (setq diredp-compressed-file-suffix 'darkyellow-face))

      (use-package wdired
        :defer t
        :config
        (progn
          (setq wdired-allow-to-change-permissions 'advanced)
          (setq wdired-allow-to-change-permissions t)
          (bind-key "C-a" 'custom/dired-back-to-start-of-files wdired-mode-map)
          (bind-key (vector 'remap 'beginning-of-buffer) 'custom/dired-back-to-top wdired-mode-map)
          (bind-key (vector 'remap 'end-of-buffer) 'custom/dired-jump-to-bottom wdired-mode-map)
          (bind-key "r" 'wdired-change-to-wdired-mode dired-mode-map)
          ))

      (use-package dired-x)
      (use-package dired-toggle-sudo :ensure t)

      ;; Reload dired after making changes
      (--each '(dired-do-rename
                dired-create-directory
                wdired-abort-changes)
        (eval `(defadvice ,it (after revert-buffer activate)
                 (revert-buffer))))

      (use-package dired-filetype-face :ensure t)
    #+END_SRC
** bookmark+
   #+BEGIN_SRC emacs-lisp
     (use-package bookmark+
       :ensure t
       :init
       (use-package crosshairs :ensure t)
       :config
       (setq bmkp-last-bookmark-file (at-data-dir "/bookmarks")))
   #+END_SRC
** search
*** definitions
    #+BEGIN_SRC emacs-lisp
      (define-namespace custom/

      (defun occur-and-switch (search)
        (interactive "sSearch for: ")
        (occur (regexp-quote search))
        (switch-to-buffer-other-window "*Occur*"))

      (defadvice occur-mode-goto-occurrence (after close-occur activate)
        (delete-other-windows))

      (defun isearch-occur ()
        (interactive)
        (let ((case-fold-search isearch-case-fold-search))
          (occur-and-switch (if isearch-regexp isearch-string
                              (regexp-quote isearch-string)))))

      )
    #+END_SRC
*** setup
    #+BEGIN_SRC emacs-lisp
      (use-package wgrep :ensure t)

      (use-package occur-context-resize
        :ensure t)

      (use-package phi-search :ensure t)

      (use-package sift
        :ensure t
        :config
        (defadvice sift-regexp (around escape-search-term activate)
          (ad-set-arg 0 (replace-regexp-in-string "\\*" "\\\\*" (ad-get-arg 0)))
          ad-do-it))

      (use-package phi-search-mc
        :ensure t
        :config
        (phi-search-mc/setup-keys)
        (add-hook 'isearch-mode-hook 'phi-search-from-isearch-mc/setup-keys))

      (use-package fuzzy
        :ensure t
        :config
        (turn-on-fuzzy-isearch))
    #+END_SRC
** operations with windows
   #+BEGIN_SRC emacs-lisp
     (use-package zoom-window
       :ensure t
       :config
       (setq zoom-window-mode-line-color "DarkGreen"))

     (use-package windmove
       :bind
       (("C-s-<up>" . windmove-up)
        ("C-s-<down>" . windmove-down)
        ("C-s-<left>" . windmove-left)
        ("C-s-<right>" . windmove-right)
        ))

     (use-package windsize :ensure t)

     (use-package framemove
       :ensure t
       :config
       (setq framemove-hook-into-windmove t))

     (use-package ace-window
       :ensure t
       :init
       (setq aw-background nil)
       (setq aw-leading-char-style 'char)
       :config
       (set-face-attribute 'aw-mode-line-face nil :foreground "white")
       (custom-set-faces
        '(aw-leading-char-face
          ((t (:inherit ace-jump-face-foreground :height 3.0))))))

     (use-package transpose-frame
       :ensure t
       :config
       (defhydra hydra-transpose-frame ()
         "frames geometry management"
         ("t" transpose-frame "transpose")
         ("i" flip-frame "flip")
         ("o" flop-frame "flop")
         ("r" rotate-frame "rotate")
         ("<left>" rotate-frame-anticlockwise "rotate <-")
         ("<right>" rotate-frame-clockwise "rotate ->")
         ("q" nil "cancel"))
       (global-set-key (kbd "C-<f2>") 'hydra-transpose-frame/body))

     ;;TODO: plan docstring
     (defhydra hydra-window (global-map "<f2>")
       "window"
       ("<left>" windmove-left "left")
       ("<down>" windmove-down "down")
       ("<up>" windmove-up "up")
       ("<right>" windmove-right "right")
       ("w" ace-window "ace" :color blue)
       ("3" (lambda ()
              (interactive)
              (split-window-right)
              (windmove-right)
              (switch-to-next-buffer))
        "vert")
       ("2" (lambda ()
              (interactive)
              (split-window-below)
              (windmove-down)
              (switch-to-next-buffer))
        "horiz")
       ("u" hydra-universal-argument "universal")
       ("s" (lambda () (interactive) (ace-window 4)) "swap")
       ("d" (lambda () (interactive) (ace-window 16)) "delete")
       ("1" delete-other-windows "1" :color blue)
       ("i" ace-maximize-window "a1" :color blue)
       ("<C-up>" windsize-up "move splitter up")
       ("<C-down>" windsize-down "move splitter down")
       ("<C-left>" windsize-left "move splitter left")
       ("<C-right>" windsize-right "move splitter right")
       ("=" text-scale-increase)
       ("-" text-scale-decrease)
       ("f" make-frame-command)
       ("F" delete-other-frames)              ;; TODO: maybe provide current frame deletion also
       ("q" nil "cancel"))
   #+END_SRC
** scope
*** definitions
**** ibuffer
     #+BEGIN_SRC emacs-lisp
       (define-namespace custom/

       (defun ibuffer-filter-by-extname (qualifier)
         (interactive "sFilter by extname: ")
         (ibuffer-filter-by-filename (concat "\\." qualifier "$")))

       )
     #+END_SRC
*** setup
    #+BEGIN_SRC emacs-lisp
      (defhydra hydra-scope (:color blue)
        "
        Narrow to            Widen
        ------------------------------------
        _r_egion             _w_iden
        _d_efun              _z_oom window
        defun + _c_omments
        "
        ("r" narrow-to-region)
        ("d" narrow-to-defun)
        ("c" narrow-to-defun+comments-above)
        ("o" org-narrow-to-subtree)
        ("w" widen)
        ("z" zoom-window-zoom)
        ("N" recursive-narrow-or-widen-dwim)
        ("W" recursive-widen-dwim)
        ;;TODO: maybe add org narrowing
        ("q" nil "cancel"))
      (global-set-key (kbd "<f9>") 'hydra-scope/body)

      (use-package ibuffer
        :defer t
        :config
        (progn
          (setq ibuffer-default-sorting-mode 'major-mode) ;recency
          (setq ibuffer-always-show-last-buffer :nomini)
          (setq ibuffer-default-shrink-to-minimum-size t)
          (setq ibuffer-jump-offer-only-visible-buffers t)
          (setq ibuffer-saved-filters
                '(("dired" ((mode . dired-mode)))
                  ("foss" ((filename . "foss")))
                  ("pets" ((filename . "pets")))
                  ("jabberchat" ((mode . jabber-chat-mode)))
                  ("orgmode" ((mode . org-mode)))
                  ("elisp" ((mode . emacs-lisp-mode)))
                  ("fundamental" ((mode . fundamental-mode)))
                  ("haskell" ((mode . haskell-mode)))))
          (setq ibuffer-saved-filter-groups custom/ibuffer-saved-filter-groups)
          (add-hook 'ibuffer-mode-hook
                    (lambda () (ibuffer-switch-to-saved-filter-groups "default"))) ;; Make sure we're always using our buffer groups
          (add-hook 'ibuffer-mode-hook
                    (lambda () (define-key ibuffer-mode-map (kbd "M-o") 'other-window))) ; was ibuffer-visit-buffer-1-window
          (bind-key "/ ." 'custom/ibuffer-filter-by-extname ibuffer-mode-map)
          ))

      ;;TODO: merge to hydra or create a new one + maybe expand with other useful bindings
      (define-key ctl-x-4-map "nd" 'ni-narrow-to-defun-indirect-other-window)
      (define-key ctl-x-4-map "nn" 'ni-narrow-to-region-indirect-other-window)
      (define-key ctl-x-4-map "np" 'ni-narrow-to-page-indirect-other-window)

      (use-package recursive-narrow :ensure t)
    #+END_SRC
** warping
   #+BEGIN_SRC emacs-lisp
     (use-package swoop
       :ensure t
       :config
       (progn
         (bind-key "<down>" 'swoop-action-goto-line-next swoop-map)
         (bind-key "<up>" 'swoop-action-goto-line-prev swoop-map)))

     (use-package swiper
       :config
       (setq ivy-display-style 'fancy)
       (custom-set-faces
        '(swiper-minibuffer-match-face-1
          ((t :background "#dddddd")))
        '(swiper-minibuffer-match-face-2
          ((t :background "#bbbbbb" :weight bold)))
        '(swiper-minibuffer-match-face-3
          ((t :background "#bbbbff" :weight bold)))
        '(swiper-minibuffer-match-face-4
          ((t :background "#ffbbff" :weight bold)))))

     (use-package avy
       :ensure t
       :config
       (setq avy-timeout-seconds 0.5)
       (set-face-attribute 'avy-goto-char-timer-face nil :foreground "green" :weight 'bold))

     (use-package beacon
       :ensure t
       :config
       (setq beacon-color "#666600")
       (setq beacon-size 60))

     (use-package filecache)
   #+END_SRC
** hydras and keybindings
   #+BEGIN_SRC emacs-lisp
     ;;TODO: plan docstring
     (defhydra hydra-entries ()
       ("!" flycheck-first-error "ace" :color blue)
       ("<up>" flycheck-previous-error "previous error")
       ("<down>" flycheck-next-error "next error")
       ("<prior>" custom/find-url-backward "previous url")
       ("<next>" custom/find-url-forward "next url")
       ("<left>" previous-error "previous error")
       ("<right>" next-error "next error")
       ("k" smerge-prev "previous conflict")
       ("j" smerge-next "next conflict")
       ("r" custom/open-urls-in-region :color blue)
       ("=" custom/skip-to-next-blank-line)
       ("-" custom/skip-to-previous-blank-line)
       ("h" git-gutter:previous-hunk)
       ("l" git-gutter:next-hunk)
       ("f" link-hint-open-link :color blue)
       ("y" link-hint-copy-link :color blue)
       ("<return>" custom/process-thing-at-point "execute ;)" :color blue)
       ("q" nil "cancel"))
     (global-set-key (kbd "<f3>") 'hydra-entries/body)

     (defhydra hydra-navigate (:color blue)
       "
       Search                 Various
       ------------------------------
       _r_ recursive grep     _h_ helm-mini
       _s_ semantic/imenu     _q_ projectile
       _m_ multi swoop        _f_ find files
       _i_ find occurencies   _p_ switch project
       _o_ find in buffer     _c_ helm-flycheck
       _g_ ag in project      _w_ select w3m buffer
       _t_ google-translate at point
       _T_ google translate
       _l_ org headlines
       "
       ("h" helm-mini)
       ("q" helm-projectile)
       ("r" sift-regexp)
       ("f" custom/helm-find-files)
       ("s" helm-semantic-or-imenu)
       ("p" helm-projectile-switch-project)
       ("c" helm-flycheck)
       ("m" swoop-multi)
       ("i" swoop)
       ("o" (lambda () (interactive) (swoop "")))
       ("g" helm-ag-project-root)
       ("w" w3m-select-buffer)
       ("t" google-translate-at-point)
       ("T" google-translate-query-translate)
       ("l" (custom/with-major-mode 'org-mode (helm-org-in-buffer-headings)))
       ("L" helm-org-agenda-files-headings)
       ("a" avy-goto-char-timer "goto char within window" :color blue)
       ("A" avy-goto-word-0 "goto word within window" :color blue))
     (global-set-key (kbd "C-`") 'hydra-navigate/body)

     (global-unset-key (kbd "C-s"))
     (global-unset-key (kbd "C-r"))
     (global-unset-key (kbd "C-M-s"))
     (global-unset-key (kbd "C-M-r"))
     (global-unset-key (kbd "C-x C-b"))
     (global-set-key (kbd "C-s") 'phi-search)
     (global-set-key (kbd "C-r") 'phi-search-backward)
   #+END_SRC
* editing
** utils for files and buffers
   #+BEGIN_SRC emacs-lisp
     (define-namespace custom/

     (defun copy-file-name-to-clipboard ()
       "Copy the current buffer file name to the clipboard."
       (interactive)
       (let ((filename (if (equal major-mode 'dired-mode)
                           default-directory
                         (buffer-file-name))))
         (when filename
           (kill-new filename)
           (message "Copied buffer file name '%s' to the clipboard." filename))))

     (defun rename-file-and-buffer ()
       "Rename the current buffer and file it is visiting."
       (interactive)
       (let ((filename (buffer-file-name)))
         (if (not (and filename (file-exists-p filename)))
             (message "Buffer is not visiting a file!")
           (let ((new-name (read-file-name "New name: " filename)))
             (cond
              ((vc-backend filename) (vc-rename-file filename new-name))
              (t
               (rename-file filename new-name t)
               (set-visited-file-name new-name t t)))))))

     ;;<http://www.cabochon.com/~stevey/blog-rants/my-dot-emacs-file.html>
     (defun rename-file-and-buffer (new-name)
       "Renames both current buffer and file it is visiting to NEW-NAME."
       (interactive "sNew name: ")
       (let ((name (buffer-name))
             (filename (buffer-file-name)))
         (if (not filename)
             (message "Buffer '%s' is not visiting a file!" name)
           (if (get-buffer new-name)
               (message "A buffer named '%s' already exists!" new-name)
             (progn
               (rename-file name new-name 1)
               (rename-buffer new-name)
               (set-visited-file-name new-name)
               (set-buffer-modified-p nil))))))

     (defun spawn-buffer()
       (interactive)
       (let ((buffer-name (generate-new-buffer-name "*new-buffer*")))
         (generate-new-buffer buffer-name)
         (switch-to-buffer buffer-name)))

     (defun get-file-md5 ()
       (interactive)
       (when (derived-mode-p 'dired-mode)
         (let ((abs-file-name (dired-get-filename)))
           (unless (file-directory-p abs-file-name)
             (with-temp-buffer
               (let ((prefix-arg t))
                 (shell-command (format "md5sum %s" abs-file-name))
                 (buffer-string)))))))

     )

     (use-package scratch :ensure t)
   #+END_SRC
** regions and rectangles
*** definitions
    #+BEGIN_SRC emacs-lisp
      (define-namespace custom/

      (defadvice whole-line-or-region-kill-region
          (before whole-line-or-region-kill-read-only-ok activate)
        (interactive "p")
        (unless kill-read-only-ok (barf-if-buffer-read-only)))

      (defun cite-region (arg)
        (clipboard-kill-ring-save (region-beginning) (region-end))
        (with-temp-buffer
          (let ((comment-start "> "))
            (yank)
            (comment-region (point-min) (point-max))
            (when (> arg 1)
              (beginning-of-buffer)
              (insert "\n"))
            (clipboard-kill-region (point-min) (point-max)))))

      (defun append-cited-region (arg)
        (interactive "P")
        (custom/cite-region (prefix-numeric-value arg))
        (end-of-buffer)
        (yank))

      ;; Compliment to kill-rectangle (just like kill-ring-save compliments
      ;; kill-region)
      ;; http://www.emacsblog.org/2007/03/17/quick-tip-set-goal-column/#comment-183
      (defun kill-save-rectangle (start end &optional fill)
        "Save the rectangle as if killed, but don't kill it. See
        `kill-rectangle' for more information."
        (interactive "r\nP")
        (kill-rectangle start end fill)
        (goto-char start)
        (yank-rectangle))

      (defun compact-spaces-in-region (beg end)
        "replace all whitespace in the region with single spaces"
        (interactive "r")
        (save-excursion
          (save-restriction
            (narrow-to-region beg end)
            (goto-char (point-min))
            (while (re-search-forward "\\s-+" nil t)
              (replace-match "")))))

      )
    #+END_SRC
*** setup
    #+BEGIN_SRC emacs-lisp
     (use-package expand-region
       :ensure t
       :defer t
       :bind ("C-=" . er/expand-region))

     (use-package region-bindings-mode
       :ensure t
       :config
       (region-bindings-mode-enable)
       (setq region-bindings-mode-disable-predicates '((lambda () buffer-read-only)))
       (bind-key "M-<down>" 'mc/mark-next-like-this region-bindings-mode-map)
       (bind-key "M-<up>" 'mc/mark-previous-like-this region-bindings-mode-map)
       (bind-key "8" 'mc/mark-all-like-this region-bindings-mode-map)
       (bind-key "6" 'mc/edit-beginnings-of-lines region-bindings-mode-map)
       (bind-key "4" 'mc/edit-ends-of-lines region-bindings-mode-map)
       (bind-key "3" 'mc/mark-more-like-this-extended region-bindings-mode-map)
       (bind-key "5" 'mc/mark-all-in-region region-bindings-mode-map)
       (bind-key "9" 'mc/mark-all-like-this-in-defun region-bindings-mode-map)
       (bind-key "0" 'mc/mark-all-like-this-dwim region-bindings-mode-map)
       (bind-key "`" 'mc/sort-regions region-bindings-mode-map)
       (bind-key "1" 'mc/insert-numbers region-bindings-mode-map)
       (bind-key "<up>" 'mc/reverse-regions region-bindings-mode-map))

     (use-package whole-line-or-region ;; if no region is active, act on current line
       :ensure t
       :defer t
       :config
       (progn
         (whole-line-or-region-mode 1)
         (setq whole-line-or-region-extensions-alist
               '((comment-dwim whole-line-or-region-comment-dwim-2 nil)
                 (copy-region-as-kill whole-line-or-region-copy-region-as-kill nil)
                 (kill-region whole-line-or-region-kill-region nil)
                 (kill-ring-save whole-line-or-region-kill-ring-save nil)
                 (yank whole-line-or-region-yank nil)
                 ))))

     (use-package wrap-region
       :ensure t
       :config
       (progn
         (wrap-region-global-mode 1)
         (wrap-region-add-wrapper "*" "*")
         (wrap-region-add-wrapper "(" ")")
         (wrap-region-add-wrapper "{-" "-}" "#")
         (wrap-region-add-wrapper "/* " " */" "#" '(javascript-mode css-mode))))
    #+END_SRC
** switch case
   #+BEGIN_SRC emacs-lisp
     (define-namespace custom/

     (defun downcase-dwim (arg)
       (interactive "p")
       (if (region-active-p)
           (downcase-region (region-beginning) (region-end))
         (downcase-word arg)))

     (defun upcase-dwim (arg)
       (interactive "p")
       (if (region-active-p)
           (upcase-region (region-beginning) (region-end))
         (upcase-word arg)))

     (defun capitalize-dwim (arg)
       (interactive "P")
       (when (consp arg) (setq arg 1))
       (if (region-active-p)
           (capitalize-region (region-beginning) (region-end))
         (capitalize-word (prefix-numeric-value arg))))

     )
   #+END_SRC
** move and bind text around
*** definitions
    #+BEGIN_SRC emacs-lisp
      (define-namespace custom/

      ;; This override for transpose-words fixes what I consider to be a flaw with the
      ;; default implementation in simple.el. To traspose chars or lines, you always
      ;; put the point on the second char or line to transpose with the previous char
      ;; or line. The default transpose-words implementation does the opposite by
      ;; flipping the current word with the next word instead of the previous word.
      ;; The new implementation below instead makes transpose-words more consistent
      ;; with how transpose-chars and trasponse-lines behave.
      (defun transpose-words (arg)
        "[Override for default transpose-words in simple.el]
        Interchange words around point, leaving point at end of
        them. With prefix arg ARG, effect is to take word before or
        around point and drag it backward past ARG other words (forward
        if ARG negative). If ARG is zero, the words around or after
        point and around or after mark are interchanged."
        (interactive "*p")
        (if (eolp) (forward-char -1))
        (transpose-subr 'backward-word arg)
        (forward-word (+ arg 1)))

      )
    #+END_SRC
*** setup
    #+BEGIN_SRC emacs-lisp
      (use-package anchored-transpose :ensure t)

      (use-package drag-stuff
        :ensure t
        :defer t
        :config
        (progn
          (setq drag-stuff-modifier '(meta shift))
          (turn-off-drag-stuff-mode)
          ))

      (use-package snakehump :ensure t)
      (use-package adaptive-wrap :ensure t)
      (use-package hungry-delete :ensure t)
      (use-package replace+ :ensure t)

      (use-package multiple-cursors
        :ensure t
        :config
        (setq mc/list-file (at-data-dir "/.mc-lists.el")))

      (use-package mc-extras
        ;;TODO: explore and bind functions
        :ensure t
        :defer t)

      ;; Transpose stuff with M-t
      (global-unset-key (kbd "M-t")) ;; which used to be transpose-words
      ;;TODO: plan docstring
      (defhydra hydra-transpose ()
        ("M-b" backward-word "prev word")
        ("M-f" forward-word "next word")
        ("<up>" previous-line "prev line")
        ("<down>" next-line "next line")
        ("<left>" backward-char "prev char")
        ("<right>" forward-char "next char")
        ("_" undo-tree-undo "undo last")
        ("w" custom/transpose-words "on words")
        ("s" transpose-sexps "on sexps")
        ("p" transpose-params "on params")
        ("a" anchored-transpose "anchored")
        ("q" nil "cancel"))
      (global-set-key (kbd "M-t") 'hydra-transpose/body)
    #+END_SRC
** commenting
   #+BEGIN_SRC emacs-lisp
     (define-namespace custom/

     ;; see http://emacs-fu.blogspot.ru/2010/01/duplicating-lines-and-commenting-them.html
     (defun duplicate-and-comment-line (arg)
       "comment line at point; if COMMENTFIRST is non-nil, comment the original"
       (interactive "P")
       (beginning-of-line)
       (push-mark)
       (end-of-line)
       (let ((str (buffer-substring (region-beginning) (region-end))))
         (when arg
           (comment-region (region-beginning) (region-end)))
         (insert-string
          (concat (if (= 0 (forward-line 1)) "" "\n") str "\n"))
         (forward-line -1)))

     )

     (use-package comment-dwim-2
       :ensure t
       :config
       (global-set-key (kbd "M-]") 'comment-dwim-2))

     (use-package rebox2
       :ensure t
       ;;TODO: bind commands
       )

     (setq comment-style 'indent)
   #+END_SRC
** clipboard and killring
   #+BEGIN_SRC emacs-lisp
     (use-package xclip
       :ensure t
       :config
       (xclip-mode 1))

     (use-package savekill
       :ensure t
       :config
       (setq save-kill-file-name (at-data-dir "/kill-ring-saved.el")))
   #+END_SRC
** undo/redo
   #+BEGIN_SRC emacs-lisp
     (setq undo-limit 1000000)

     (use-package undo-tree
       :defer t
       :ensure t
       :config
       (progn
         (global-undo-tree-mode t)
         (setq undo-tree-mode-lighter "")
         (setq undo-tree-visualizer-timestamps t)
         (setq undo-tree-visualizer-diff t)
         ))
   #+END_SRC
** utils
*** definitions
    #+BEGIN_SRC emacs-lisp
      (define-namespace custom/

      ;; current date and time.
      (defun insert-current-date-time()
        "Insert the current date and time at point."
        (interactive "*")
        (insert (format-time-string "[%d.%m.%Y - %H:%M]" (current-time))))

      (defun strip-prefix (prefix lines)
        (s-join "\n"
                (mapcar (lambda (s) (s-chop-prefix prefix s))
                        (s-lines lines))))

      )
    #+END_SRC
*** setup
    #+BEGIN_SRC emacs-lisp
      (use-package table) ;; table
      (use-package footnote)
      (use-package epoch-view :ensure t)
      (use-package re-builder :defer t)

      (use-package wc-mode :ensure t)

      (use-package yatemplate
        :init
        (auto-insert-mode)
        :config
        (setq yatemplate-dir (at-config-basedir "resources/auto-insert"))
        (yatemplate-fill-alist))

      (use-package whitespace
        :defer t)

      (use-package mark
        :ensure t
        :config
        (defhydra hydra-mark ()
          ("<right>" forward-mark "forward-mark")
          ("<left>" backward-mark "backward-mark")
          ("<down>" show-marks "show-marks"))
        (global-set-key (kbd "<f12>") 'hydra-mark/body))

      (use-package page-break-lines
        :ensure t
        :config
        (turn-on-page-break-lines-mode))

      ;; (use-package macro-math
      ;;   :config
      ;;   (global-set-key "\C-x~" 'macro-math-eval-and-round-region)
      ;;   (global-set-key "\C-x=" 'macro-math-eval-region))

      ;;TODO: consolidate all whitespaces utils
      (use-package ws-butler
        :commands ws-buttler-mode
        :ensure t)
    #+END_SRC
** major modes
   #+BEGIN_SRC emacs-lisp
     (use-package rst)

     (use-package generic
       :defer t
       :init
       (use-package generic-x)
       :config
       (progn
         (define-generic-mode 'keymap-mode
           '("#")
           '("control" "meta" "shift" "alt" "altgr" "compose" "keycode")
           nil
           '(".keymap\\'" ".map\\'")
           nil)
         (setq generic-default-modes (delete 'javascript-generic-mode
                                             generic-default-modes))))
     (use-package vimrc-mode
       :ensure t
       :defer t
       :mode ".vim\\(rc\\)?$")
   #+END_SRC
** sexps
   #+BEGIN_SRC emacs-lisp
     (use-package highlight-sexp :ensure t)

     (use-package smartparens
       :ensure t
       :config
       (use-package smartparens-config)
       (smartparens-global-strict-mode t)
       (show-smartparens-global-mode t)
       (sp-use-smartparens-bindings)
       (define-key smartparens-mode-map (kbd "C-M-t") 'sp-transpose-sexp)
       (bind-key "M-F" nil smartparens-mode-map)
       (bind-key "M-B" nil smartparens-mode-map)
       (bind-key "M-<backspace>" nil smartparens-mode-map)
       (define-key sp-keymap (kbd "C-S-a") 'sp-beginning-of-sexp)
       (define-key sp-keymap (kbd "C-S-d") 'sp-end-of-sexp)
       (define-key emacs-lisp-mode-map (kbd ")") 'sp-up-sexp)
       (define-key sp-keymap (kbd "C-<left_bracket>") 'sp-select-previous-thing)
       (define-key sp-keymap (kbd "C-c s r n") 'sp-narrow-to-sexp)
       (define-key sp-keymap (kbd "C-c s t") 'sp-prefix-tag-object)
       (define-key sp-keymap (kbd "C-c s p") 'sp-prefix-pair-object)
       (define-key sp-keymap (kbd "C-c s y") 'sp-prefix-symbol-object)
       (define-key sp-keymap (kbd "C-c s c") 'sp-convolute-sexp)
       (define-key sp-keymap (kbd "C-c s a") 'sp-absorb-sexp)
       (define-key sp-keymap (kbd "C-c s w") 'sp-rewrap-sexp)
       (define-key sp-keymap (kbd "C-c s e") 'sp-emit-sexp)
       (define-key sp-keymap (kbd "C-c s p") 'sp-add-to-previous-sexp)
       (define-key sp-keymap (kbd "C-c s n") 'sp-add-to-next-sexp)
       (define-key sp-keymap (kbd "C-c s j") 'sp-join-sexp)
       (define-key sp-keymap (kbd "C-c s s") 'sp-split-sexp))
   #+END_SRC
** some fancy editing methods
   #+BEGIN_SRC emacs-lisp
     (use-package edit-indirect :ensure t)
     (use-package narrow-indirect :ensure t)
     (use-package multifiles :ensure t)

     (use-package miniedit
       :defer t
       :ensure t
       :commands minibuffer-edit
       :init (miniedit-install))
   #+END_SRC
** indentation
   #+BEGIN_SRC emacs-lisp
     (setq indent-tabs-mode nil)

     (use-package dtrt-indent
       :ensure t
       :config
       (dtrt-indent-mode))

     (setq-default tab-width 4)
   #+END_SRC
** setup basic minor modes
   #+BEGIN_SRC emacs-lisp
     (auto-compression-mode t)
     (delete-selection-mode t)
     (electric-indent-mode -1)
     (global-auto-revert-mode 1);; Auto refresh buffers
     (show-paren-mode t)
     (transient-mark-mode 1)
   #+END_SRC
** set variables
   #+BEGIN_SRC emacs-lisp
     (setq auto-revert-verbose nil)
     (setq global-auto-revert-non-file-buffers t)
     (setq default-input-method 'russian-computer)
     (setq delete-by-moving-to-trash t);; Move files to trash when deleting
     (setq kill-whole-line t)
     (setq kmacro-ring-max 16)
     (setq mark-even-if-inactive t)
     (setq next-line-add-newlines nil)
     (setq redisplay-dont-pause t) ;; Redraw the entire screen before checking for pending input events.
     (setq sentence-end-double-space nil)
     (setq tab-always-indent t)
     (setq transient-mark-mode t)
     (setq user-full-name (capitalize global-username))
     (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
     ;; don't let the cursor go into minibuffer prompt
     (setq minibuffer-prompt-properties
           '(read-only t point-entered minibuffer-avoid-prompt face minibuffer-prompt))

     (set-default 'indent-tabs-mode nil);; Never insert tabs
     (setq-default fill-column 200)
     (setq-default indicate-empty-lines t)
     (setq-default transient-mark-mode t)
     (setq-default truncate-lines t);; Don't break lines for me, please

     (setq x-stretch-cursor t)
     (setq blink-matching-paren nil)
     (setq show-paren-delay 0)
     (setq mouse-wheel-scroll-amount '(1 ((shift) . 1)))
     (setq mouse-wheel-progressive-speed nil)
     (setq set-mark-command-repeat-pop t)

     (make-variable-buffer-local 'transient-mark-mode)
     (put 'transient-mark-mode 'permanent-local t)

     (setq whitespace-style '(indentation::space
                              space-after-tab
                              space-before-tab
                              trailing
                              lines-tail
                              tab-mark
                              face
                              tabs))
   #+END_SRC
** add hooks
   #+BEGIN_SRC emacs-lisp
     (add-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p)
     (add-hook 'text-mode-hook 'turn-on-auto-fill)
     (add-hook 'text-mode-hook 'text-mode-hook-identify)
   #+END_SRC
** hydras and keys
   #+BEGIN_SRC emacs-lisp
     ;;TODO: plan docstring
     (defhydra hydra-edit (:color blue)
       ("0" custom/compact-spaces-in-region)
       ("2" custom/duplicate-and-comment-line)
       ("4" snakehump-next-at-point)
       ("<left>" jump-char-backward)
       ("<right>" jump-char-forward)
       ("C-SPC" comment-dwim)
       ("C-r" custom/join-region) ;;FIXME: custom/join-region is inexistent
       ("M-a" indent-region)
       ("SPC" untabify)
       ("TAB" tabify)
       ("[" comment-region)
       ("]" uncomment-region)
       ("`" redraw-display)
       ("b" subword-mode)
       ("c" wc-mode)
       ("d" diff-buffer-with-file)
       ("f" custom/copy-file-name-to-clipboard)
       ("i" custom/insert-current-date-time)
       ("o" just-one-space)
       ("p" whitespace-mode)
       ("r" query-replace)
       ("n" custom/rename-file-and-buffer)
       ("s" sort-lines)
       ("t" delete-trailing-whitespace)
       ("u" delete-duplicate-lines)
       ("v" view-mode)
       ("x" query-replace-regexp)
       ("a" custom/append-cited-region)
       ("g" insert-register)
       ("e" copy-to-register)
       ("m" rename-uniquely)
       ("S" scratch)
       ("y" revbufs)
       ("k" custom/kill-save-rectangle)
       ("K" append-next-kill)
       ("/" comment-box)
       ("w" wrap-to-fill-column-mode)
       ("=" edit-indirect-region)
       ("q" nil "cancel"))
     (global-set-key (kbd "C-z") 'hydra-edit/body)

     (defhydra hydra-toggle (:color blue)
       "
       TOGGLE: de_b_ug on error (%(format \"%S\" debug-on-error))
       _d_ / _D_ toggle drag-stuff mode on/off (%(format \"%S\" drag-stuff-mode))
       _w_hitespace mode
       "
       ("b" toggle-debug-on-error "debug on error")
       ("w" whitespace-mode "whitespace mode")
       ("d" turn-on-drag-stuff-mode "enable drag-stuff mode")
       ("D" turn-off-drag-stuff-mode "disable drag-stuff mode")
       ("h" highlight-sexp-mode "toggle highlight-sexp mode"))
     (global-set-key (kbd "<f11>") 'hydra-toggle/body)

     (defhydra hydra-cases (:color pink)
       "
       _d_ / _d_ downcase word/region
       _u_ / _u_ upcase word/region
       _I_       capitalize region
       "
       ("d" downcase-word)
       ("d" downcase-region :color blue)
       ("u" upcase-word)
       ("u" upcase-region :color blue)
       ("I" upcase-initials-region :color blue))
     (global-set-key (kbd "<f10>") 'hydra-cases/body)

     (global-set-key (kbd "M-g") 'goto-line)
     (global-set-key (kbd "M-\"") 'eval-region)
     (global-set-key (kbd "M-y") 'helm-show-kill-ring)
     (global-set-key (kbd "C-$") 'mf/mirror-region-in-multifile)
     ;; (global-set-key "\C-x\ f" 'find-file) ; I never use set-fill-column and I hate hitting it by accident.
     (global-set-key [remap move-beginning-of-line] 'custom/smarter-move-beginning-of-line)
     (global-set-key (kbd "M-SPC") 'cycle-spacing) ;; TODO: maybe place into some hydra
     (global-set-key (kbd "C-c r p") '(lambda () ;;TODO: make hydra for such custom helm sources
                                        (interactive)
                                        (helm :sources '(custom/helm-source-portage-files))))
   #+END_SRC
** try
*** unicode and indentation
    #+BEGIN_SRC emacs-lisp :tangle no
      (defmacro my/insert-unicode (unicode-name)
        `(lambda () (interactive)
           (insert-char (cdr (assoc-string ,unicode-name (ucs-names))))))
      (bind-key "C-x 8 s" (my/insert-unicode "ZERO WIDTH SPACE"))
      (bind-key "C-x 8 S" (my/insert-unicode "SNOWMAN"))

      (defun sanityinc/kill-back-to-indentation ()
        "Kill from point back to the first non-whitespace character on the line."
        (interactive)
        (let ((prev-pos (point)))
          (back-to-indentation)
          (kill-region (point) prev-pos)))

      (bind-key "C-M-<backspace>" 'sanityinc/kill-back-to-indentation)
    #+END_SRC
*** narrow and widen
    #+BEGIN_SRC emacs-lisp :tangle no
      (defun narrow-or-widen-dwim (p)
        "Widen if buffer is narrowed, narrow-dwim otherwise.
      Dwim means: region, org-src-block, org-subtree, or defun,
      whichever applies first. Narrowing to org-src-block actually
      calls `org-edit-src-code'.

      With prefix P, don't widen, just narrow even if buffer is
      already narrowed."
        (interactive "P")
        (declare (interactive-only))
        (cond ((and (buffer-narrowed-p) (not p)) (widen))
              ((region-active-p)
               (narrow-to-region (region-beginning) (region-end)))
              ((derived-mode-p 'org-mode)
               ;; `org-edit-src-code' is not a real narrowing
               ;; command. Remove this first conditional if you
               ;; don't want it.
               (cond ((ignore-errors (org-edit-src-code))
                      (delete-other-windows))
                     ((ignore-errors (org-narrow-to-block) t))
                     (t (org-narrow-to-subtree))))
              ((derived-mode-p 'latex-mode)
               (LaTeX-narrow-to-environment))
              (t (narrow-to-defun))))

      (define-key endless/toggle-map "n" #'narrow-or-widen-dwim)
      ;; This line actually replaces Emacs' entire narrowing
      ;; keymap, that's how much I like this command. Only copy it
      ;; if that's what you want.
      (define-key ctl-x-map "n" #'narrow-or-widen-dwim)
      (eval-after-load 'latex
        '(define-key LaTeX-mode-map "\C-xn" nil))
    #+END_SRC
**** TODO consolidate all narrow/widen functionality
* completion
** yasnippet
*** definitions
    #+BEGIN_SRC emacs-lisp
      (define-namespace custom/

      ;; Inter-field navigation
      (defun yas-goto-end-of-active-field ()
        (interactive)
        (let* ((snippet (car (yas--snippets-at-point)))
               (position (yas--field-end (yas--snippet-active-field snippet))))
          (if (= (point) position)
              (move-end-of-line)
            (goto-char position))))

      (defun yas-goto-start-of-active-field ()
        (interactive)
        (let* ((snippet (car (yas--snippets-at-point)))
               (position (yas--field-start (yas--snippet-active-field snippet))))
          (if (= (point) position)
              (move-beginning-of-line)
            (goto-char position))))

      ;; hook for automatic reloading of changed snippets
      (defun update-yasnippets-on-save ()
        (when (string-match "/resources/yasnippet" buffer-file-name)
          (yas/load-directory custom/yasnippet-dir)))

      (defun ac-page-next ()
        "Select next completion candidate per `ac-menu-height' range.
         Pages down through completion menu."
        (interactive)
        (let ((counter 0))
          (dotimes (counter (1- ac-menu-height))
            (ac-next))))

      (defun ac-page-previous ()
        "Select previous completion candidate per `ac-menu-height' range.
         Pages up through completion menu."
        (interactive)
        (let ((counter 0))
          (dotimes (counter (1- ac-menu-height))
            (ac-previous))))

      )
    #+END_SRC
*** setup
    #+BEGIN_SRC emacs-lisp
      (use-package yasnippet
        :ensure t
        :defer t
        :diminish yas-minor-mode
        :commands yas-global-mode
        :init
        (use-package helm-c-yasnippet :ensure t)
        :config
        (progn
          (add-hook 'hippie-expand-try-functions-list 'yas-hippie-try-expand)
          (setq yas-key-syntaxes '("w" "w_" "w_." "^ " "w_.()" yas-try-key-from-whitespace))
          (setq yas-expand-only-for-last-commands '(self-insert-command))
          (yas-global-mode 1)
          (bind-key "\t" 'hippie-expand yas-minor-mode-map)
          ;; unset both to remove ALL translations
          (define-key yas-minor-mode-map [(tab)] nil) ;FIXME: try using unbind-key
          (define-key yas-minor-mode-map (kbd "TAB") nil)
          (bind-key "C-M-<return>" 'helm-yas-complete)
          ;;TODO: bind helm-yas-create-snippet-on-region
          (setq yas/next-field-key '("<backtab>" "<S-tab>"))
          (setq yas/prev-field-key '("<C-tab>"))
          (setq yas-snippet-dirs nil)
          (setq helm-yas-space-match-any-greedy t)
          (push custom/yasnippet-dir yas-snippet-dirs)
          (push custom/yasnippet-private-dir yas-snippet-dirs)
          (yas-global-mode 1)
          (setq yas-prompt-functions
                '(yas-completing-prompt
                  yas-x-prompt
                  yas-no-prompt))
          ;; Wrap around region
          (setq yas/wrap-around-region t)
          (add-hook 'after-save-hook 'custom/update-yasnippets-on-save)
          ;; Jump to end of snippet definition
          (define-key yas/keymap (kbd "<return>") 'yas/exit-all-snippets) ;FIXME: try using bind-key
          (define-key yas/keymap (kbd "C-e") 'custom/yas-goto-end-of-active-field)
          (define-key yas/keymap (kbd "C-a") 'custom/yas-goto-start-of-active-field)))

      (use-package auto-yasnippet :ensure t)

      ;;TODO: splice into yasnippet package definition
      (defhydra hydra-yasnippet (:color teal)
        "
        _c_reate auto snippet
        _e_xpand auto snippet
        _p_ersist auto snippet
        _v_isit snippets file
        _i_nsert snippet
        "
        ("c" aya-create)
        ("e" aya-expand)
        ("p" aya-persist-snippet)
        ("v" yas-visit-snippet-file)
        ("i" yas-insert-snippet)
        ("q" nil))
      (global-set-key (kbd "<f5>") 'hydra-yasnippet/body)
    #+END_SRC
** auto-complete
*** definitions
    #+BEGIN_SRC emacs-lisp
      (define-namespace custom/

      (defun ielm-auto-complete ()
        "Enables `auto-complete' support in \\[ielm]."
        (setq ac-sources '(ac-source-functions
                           ac-source-variables
                           ac-source-features
                           ac-source-symbols
                           ac-source-words-in-same-mode-buffers))
        (add-to-list 'ac-modes 'inferior-emacs-lisp-mode))

      )
    #+END_SRC
*** setup
    #+BEGIN_SRC emacs-lisp
      (use-package auto-complete
        :ensure t
        :commands auto-complete
        :init
        (use-package auto-complete-config)
        (use-package ac-math)
        :config
        (progn
          (ac-config-default)
          (global-auto-complete-mode t)
          (diminish 'auto-complete-mode " α")
          (setq ac-auto-start nil)
          (setq ac-quick-help-delay 0.5)
          (setq ac-fuzzy-enable t)
          (setq ac-comphist-file (at-data-dir "/ac-comphist.dat"))
          (add-to-list 'ac-modes 'slime-repl-mode)
          (add-hook 'slime-mode-hook 'set-up-slime-ac)
          (add-hook 'slime-repl-mode-hook 'set-up-slime-ac)
          (add-hook 'auto-complete-mode-hook 'ac-common-setup)
          (define-key ac-complete-mode-map [next] 'custom/ac-page-next)
          (define-key ac-complete-mode-map [prior] 'custom/ac-page-previous)
          (define-key ac-complete-mode-map (kbd "C-s") 'ac-isearch)
          (global-set-key (kbd "C-<tab>") 'auto-complete)
          ;; TODO: bind lambda (setq ac-comphist nil) for emeregency completion history purge
          ))
    #+END_SRC
** hippie-expand
   #+BEGIN_SRC emacs-lisp
     (use-package hippie-expand
       :config
       (setq hippie-expand-try-functions-list
             '(yas-hippie-try-expand
               try-expand-all-abbrevs
               try-complete-file-name-partially
               try-complete-file-name
               try-expand-dabbrev
               try-expand-dabbrev-from-kill
               try-expand-dabbrev-all-buffers
               try-expand-list
               try-expand-line
               try-complete-lisp-symbol-partially
               try-complete-lisp-symbol))
       (global-set-key (kbd "C-S-<iso-lefttab>") 'hippie-expand))
   #+END_SRC
* programming
** common
*** flake8 utils
    #+BEGIN_SRC emacs-lisp
      (define-namespace custom/

      (defvar flake8-conf-alist nil
        "Alist of flake8 configuration files for various projects")

      ;;FIXME: try to use flycheck's builtin functionality
      (defun find-project-flake8-config ()
        (let* ((project-root (file-truename (custom/project-root default-directory)))
               (config-path (cdr (assoc (file-name-base (directory-file-name project-root)) flake8-conf-alist))))
          (if (file-name-absolute-p config-path)
              (when (file-exists-p config-path)
                config-path)
            (concat project-root config-path))))

      (defun project-root (file-path)
        "Guess the project root of the given FILE-PATH."
        (or (vc-git-root file-path)
            (vc-svn-root file-path)
            (vc-hg-root file-path)
            file-path))

      )
    #+END_SRC
**** TODO review flake8 known problems and OBV search for solutions
*** flycheck
    #+BEGIN_SRC emacs-lisp
      (use-package flycheck
          :ensure t
          :init
          (use-package flycheck-color-mode-line :ensure t)
          :config
          (progn
              (add-hook 'flycheck-mode-hook 'flycheck-color-mode-line-mode)
              (setq flycheck-check-syntax-automatically '(idle-change))))
    #+END_SRC
*** gdb
    #+BEGIN_SRC emacs-lisp
      (use-package gud
          :init
          (use-package gdb-mi)
          :config
          (progn
              (setq gdb-many-windows t)
              (setq gdb-show-main t)
              (setq gdb-use-separate-io-buffer t)
              (setq gud-chdir-before-run nil)
              (setq gud-tooltip-mode t)))
    #+END_SRC
*** eldoc
    #+BEGIN_SRC emacs-lisp
      (use-package c-eldoc :ensure t)
      (use-package eldoc-eval :ensure t)

      (use-package eldoc
          :defer t
          :init
          (progn
              (setq eldoc-idle-delay 0) ;; eldoc mode for showing function calls in mode line
              (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
              (add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
              (add-hook 'ielm-mode-hook 'turn-on-eldoc-mode)
              (add-hook 'c-mode-hook 'c-turn-on-eldoc-mode)
              (add-hook 'c++-mode-hook 'c-turn-on-eldoc-mode)
              (add-hook 'css-mode-hook 'turn-on-css-eldoc))
          :config
          (diminish 'eldoc-mode "ED"))

      (use-package css-eldoc
        :ensure t
        :config
        (turn-on-css-eldoc))
    #+END_SRC
**** try
     #+BEGIN_SRC emacs-lisp
       (use-package "eldoc"
         :diminish eldoc-mode
         :commands turn-on-eldoc-mode
         :defer t
         :init
         (progn
               (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
               (add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
               (add-hook 'ielm-mode-hook 'turn-on-eldoc-mode)))
     #+END_SRC
*** print path within json
    #+BEGIN_SRC emacs-lisp
      (define-namespace custom/

      (defun js2-print-json-path ()
        "Print the path to the JSON value under point, and save it in the kill ring."
        (interactive)
        (let (next-node node-type rlt key-name)
          (setq next-node (js2-node-at-point))
          ;; scanning from AST, no way to optimise `js2-node-at-point'
          (while (and next-node (arrayp next-node) (> (length next-node) 5))
            (setq node-type (aref next-node 0))
            (cond
             ;; json property node
             ((eq node-type 'cl-struct-js2-object-prop-node)
              (setq key-name (js2-prop-node-name (js2-object-prop-node-left next-node)))
              (if rlt (setq rlt (concat "." key-name rlt))
                (setq rlt (concat "." key-name))))

             ;; array node
             ((or (eq node-type 'cl-struct-js2-array-node)
                  (eq node-type 'cl-struct-js2-infix-node))
              (if rlt (setq rlt (concat "[0]" rlt))
                (setq rlt "[0]")))

             (t)) ; do nothing

            ;; get parent node
            (setq next-node (aref next-node 5)))
          ;; clean final result
          (setq rlt (replace-regexp-in-string "^\\." "" rlt))
          (when rlt
            (kill-new rlt)
            (message "%s => kill-ring" rlt))
          rlt))

      )
    #+END_SRC
*** c-mode specialization for PostgreSQL development
    #+BEGIN_SRC emacs-lisp
      (defun pgsql-c-mode ()
          ;; sets up formatting for PostgreSQL C code
          (interactive)
          (c-mode)
          (setq-default tab-width 4)
          (c-set-style "bsd")             ; set c-basic-offset to 4, plus other stuff
          (c-set-offset 'case-label '+)   ; tweak case indent to match PG custom
          (setq fill-column 79)           ; matches what pgindent does
          (setq indent-tabs-mode t))      ; make sure we keep tabs when indenting
    #+END_SRC
*** common hooks
    #+BEGIN_SRC emacs-lisp
      (defun common-hooks/newline-hook ()
        (local-set-key (kbd "C-m") 'newline-and-indent)
        (local-set-key (kbd "<return>") 'newline-and-indent))

      ;; show FIXME/TODO/BUG keywords
      (defun common-hooks/prog-helpers ()
          ;; highlight additional keywords
          (font-lock-add-keywords nil '(("\\<\\(FIXME\\|FIX_ME\\|FIX ME\\):" 1 font-lock-warning-face t)))
          (font-lock-add-keywords nil '(("\\<\\(BUG\\|BUGS\\):" 1 font-lock-warning-face t)))
          (font-lock-add-keywords nil '(("\\<\\(TODO\\|TO DO\\NOTE\\|TBD\\):" 1 font-lock-warning-face t)))
          (font-lock-add-keywords nil '(("\\<\\(DONE\\|HACK\\):" 1 font-lock-doc-face t)))
          ;; highlight too long lines
          (font-lock-add-keywords nil '(("^[^\n]\\{120\\}\\(.*\\)$" 1 font-lock-warning-face t))))
    #+END_SRC
*** handy packages
    #+BEGIN_SRC emacs-lisp
      (use-package compile)
      (use-package gtags)
      (use-package hide-comnt :ensure t)
      (use-package regex-tool :ensure t)
    #+END_SRC
** vcs
*** git
    #+BEGIN_SRC emacs-lisp
      (use-package magit
          :ensure t
          :config
          (bind-key "E" 'magit-rebase-interactive magit-status-mode-map)
          (setq magit-blame-heading-format "%H %-20a %C %s")
          (setq magit-diff-refine-hunk t)
          (defhydra hydra-magit (:color teal :hint nil)
              "
          PROJECT: %(projectile-project-root)

          Immuting            Mutating
          -----------------------------------------
          _s_: status          _c_: checkout
          _l_: log             _B_: branch mgr
          _f_: file log
          _r_: reflog
          _w_: diff worktree
          _t_: time machine
          _b_: blame
          "
              ("s" magit-status)
              ("f" magit-log-buffer-file)
              ("c" magit-checkout)
              ("w" magit-diff-working-tree)
              ("r" magit-reflog)
              ("b" magit-blame)
              ("B" magit-branch-manager)
              ("l" magit-log)
              ("t" git-timemachine))
          (global-set-key (kbd "C-'") 'hydra-magit/body))

      (use-package magit-gh-pulls
          :ensure t
          :config
          (add-hook 'magit-mode-hook 'turn-on-magit-gh-pulls))

      (use-package magit-gerrit
          :ensure t
          :disabled t
          :config
          (setq-default magit-gerrit-ssh-creds "aermolov@review.fuel-infra.org")
          (setq-default magit-gerrit-remote "gerrit"))

      (use-package magit-filenotify
          :ensure t
          :config
          (use-package diminish :ensure t) ;;TODO: relocate to toplevel and try using :command so it may be autoloaded
          (add-hook 'magit-status-mode-hook 'magit-filenotify-mode)
          (diminish 'magit-filenotify-mode "FN"))

      (use-package git-gutter
          :ensure t
          :config
          (progn
              (setq git-gutter:modified-sign "?")
              (set-face-attribute 'git-gutter:modified nil :foreground "yellow" :inverse-video nil)
              (set-face-attribute 'git-gutter:added nil :inverse-video nil)
              (set-face-attribute 'git-gutter:deleted nil :inverse-video nil)
              (set-face-attribute 'git-gutter:unchanged nil :inverse-video nil)
              (global-git-gutter-mode +1)))

      (use-package git-timemachine :ensure t)
    #+END_SRC
*** common
    #+BEGIN_SRC emacs-lisp
      ;; FIXME code duplication, think of finding the widely used util or something similar
      (autoload 'vc-git-root "vc-git")
      (autoload 'vc-svn-root "vc-svn")
      (autoload 'vc-hg-root "vc-hg")

      (use-package ediff
          :config
          (progn
              (setq ediff-window-setup-function 'ediff-setup-windows-plain)
              (setq ediff-split-window-function 'split-window-horizontally)
              (setq ediff-diff-options "-w")))
    #+END_SRC
** languages
*** elisp
**** setup
     #+BEGIN_SRC emacs-lisp
       (use-package el-spice :ensure t)
       (use-package edebug-x :ensure t)

       (use-package elisp-slime-nav
           :ensure t
           :config
           (dolist (hook '(emacs-lisp-mode-hook ielm-mode-hook))
               (add-hook hook 'elisp-slime-nav-mode)))

       (use-package erefactor
           :ensure t
           :config
           ;;TODO: investigate package
           (bind-key "C-c C-v" erefactor-map emacs-lisp-mode-map))

       (setq print-circle t)
       (setq print-gensym t)
       (setq eval-expression-print-length nil)
       (setq eval-expression-print-level nil)

       (defun custom/elisp-mode-hook ()
           (auto-fill-mode 1)
           (setq indent-tabs-mode t)
           (setq tab-width 2)
           (setq comment-start ";;")
           (turn-on-eldoc-mode))

       (add-hook 'emacs-lisp-mode-hook 'custom/elisp-mode-hook)
       (add-hook 'emacs-lisp-mode-hook 'common-hooks/prog-helpers)
       (add-hook 'emacs-lisp-mode-hook 'common-hooks/newline-hook)
       (add-hook 'emacs-lisp-mode-hook 'ac-emacs-lisp-mode-setup)
       (add-hook 'ielm-mode-hook 'custom/ielm-auto-complete)
     #+END_SRC
**** try
***** 1
      #+BEGIN_SRC emacs-lisp :tangle no
        ;; C-c C-v l : elint current buffer in clean environment.
        ;; C-c C-v L : elint current buffer by multiple emacs binaries.
        ;;             See `erefactor-lint-emacsen'
        ;; C-c C-v r : Rename symbol in current buffer.
        ;;             Resolve `let' binding as long as i can.
        ;; C-c C-v R : Rename symbol in requiring modules and current buffer.
        ;; C-c C-v h : Highlight current symbol in this buffer
        ;;             and suppress `erefacthr-highlight-mode'.
        ;; C-c C-v d : Dehighlight all by above command.
        ;; C-c C-v c : Switch prefix bunch of symbols.
        ;;             ex: '(hoge-var hoge-func) -> '(foo-var foo-func)
        ;; C-c C-v ? : Display flymake elint warnings/errors
      #+END_SRC
***** 2
      #+BEGIN_SRC emacs-lisp :tangle no
        (use-package erefactor
            :ensure t
            :defer t
            :config
            (define-key emacs-lisp-mode-map "\C-c\C-v" erefactor-map))

        (use-package redshank
            :ensure t
            :defer t
            :init (add-hook 'emacs-lisp-mode-hook 'redshank-mode))

        (define-key emacs-lisp-mode-map (kbd "C-c .") 'find-function-at-point)
        (bind-key "C-c f" 'find-function)

        (bind-key "M-:" 'pp-eval-expression)

        (defun sanityinc/eval-last-sexp-or-region (prefix)
          "Eval region from BEG to END if active, otherwise the last sexp."
          (interactive "P")
          (if (and (mark) (use-region-p))
              (eval-region (min (point) (mark)) (max (point) (mark)))
            (pp-eval-last-sexp prefix)))

        (bind-key "C-x C-e" 'sanityinc/eval-last-sexp-or-region emacs-lisp-mode-map)
      #+END_SRC
*** javascript
    #+BEGIN_SRC emacs-lisp
      (use-package js2-mode
        :ensure t
        :init
        (use-package js2-imenu-extras)
        :config
        (progn
          (js2-imenu-extras-setup)
          (setq js2-use-font-lock-faces t)
          (setq js2-allow-keywords-as-property-names nil)
          (setq js2-bounce-indent-flag nil)
          (setq js2-cleanup-whitespace t)
          (setq js2-enter-indents-newline nil)
          (setq js2-highlight-level 3)
          (setq js2-indent-on-enter-key nil)
          (setq js2-skip-preprocessor-directives t)
          (setq js2-basic-offset 4)
          (setq js2-bounce-indent-p t)
          ;; Special improvements using the mooz fork
          ;; https://github.com/mooz/js2-mode
          (setq js2-consistent-level-indent-inner-bracket-p t)
          (setq js2-use-ast-for-indentation-p t)
          (add-to-list 'interpreter-mode-alist (cons "node" 'js2-mode))
          (setq-default js2-global-externs
                        '("module" "require" "jQuery" "$" "_" "buster"
                          "sinon" "assert" "refute" "setTimeout" "clearTimeout"
                          "setInterval" "clearInterval" "location" "__dirname" "console" "JSON"))
          (setq-default js2-idle-timer-delay 0.1)
          (setq-default js2-mirror-mode t)
          (setq-default js2-auto-indent-p t)
          (setq-default js2-concat-multiline-strings 'eol)
          ;; After js2 has parsed a js file, we look for jslint globals decl comment ("/* global Fred, _, Harry */") and
          ;; add any symbols to a buffer-local var of acceptable global vars
          ;; Note that we also support the "symbol: true" way of specifying names via a hack (remove any ":true"
          ;; to make it look like a plain decl, and any ':false' are left behind so they'll effectively be ignored as
          ;; you can;t have a symbol called "someName:false"
          (add-hook 'js2-post-parse-callbacks
                    (lambda ()
                      (when (> (buffer-size) 0)
                        (let ((btext (replace-regexp-in-string
                                      ": *true" " "
                                      (replace-regexp-in-string "[\n\t ]+" " " (buffer-substring-no-properties 1 (buffer-size)) t t))))
                          (mapc (apply-partially 'add-to-list 'js2-additional-externs)
                                (split-string
                                 (if (string-match "/\\* *global *\\(.*?\\) *\\*/" btext) (match-string-no-properties 1 btext) "")
                                 " *, *" t))
                          ))))
          (add-hook 'js2-mode-hook '(lambda ()
                                      (setq flycheck-checker 'javascript-jshint)
                                      (tern-mode t)))
          ;;TODO: maybe make hydra
          (define-key js2-mode-map (kbd "C-x C-e") 'js-send-last-sexp)
          (define-key js2-mode-map (kbd "C-M-x") 'js-send-last-sexp-and-go)
          (define-key js2-mode-map (kbd "C-c b") 'js-send-buffer)
          (define-key js2-mode-map (kbd "C-c C-b") 'js-send-buffer-and-go)
          (define-key js2-mode-map (kbd "C-c l") 'js-load-file-and-go)
          ))

                                              ;TODO: play with js2-refactor
      (use-package js2-refactor
        :ensure t
        :config
        (progn
          (js2r-add-keybindings-with-prefix "C-c C-j")))

      (use-package tern
        :ensure t
        :commands tern-mode
        :init
        (use-package tern-auto-complete :ensure auto-complete)
        :config
        (tern-ac-setup))

      (setenv "CLASSPATH"
              (concat
               "/usr/share/rhino-1.6/lib/js.jar:"
               (getenv "CLASSPATH")))
    #+END_SRC
*** lisp
    #+BEGIN_SRC emacs-lisp
      (use-package inf-lisp)
      (use-package info-look)
      (use-package common-lisp-snippets :ensure t)

      (setq inferior-lisp-program "sbcl")
      (setq common-lisp-hyperspec-root (file-truename custom/hyperspec-root))

      (defun custom/lisp-mode-hook ()
        (auto-fill-mode 1)
        (setq indent-tabs-mode t)
        (setq tab-width 2)
        (turn-on-eldoc-mode))

      (defun custom/slime-hook ()
        (slime-mode t)
        (set (make-local-variable 'slime-lisp-implementations)
             (list (assoc 'sbcl slime-lisp-implementations))))

      (use-package slime
        :defer t
        :init
        (use-package slime-autoloads)
        :config
        (use-package ac-slime :ensure auto-complete)
        (eval-after-load "auto-complete"
          '(add-to-list 'ac-modes 'slime-repl-mode))
        (add-hook 'lisp-mode-hook 'custom/slime-hook)
        (add-hook 'inferior-lisp-mode-hook (lambda () (inferior-slime-mode t)))
        (add-hook 'slime-mode-hook (lambda () (slime-autodoc-mode t)))
        (add-hook 'lisp-mode-hook 'custom/lisp-mode-hook)
        (add-hook 'lisp-mode-hook 'common-hooks/newline-hook)
        (add-hook 'lisp-mode-hook 'common-hooks/prog-helpers)
        (add-hook 'lisp-mode-hook 'set-up-slime-ac)
        (add-hook 'slime-mode-hook 'set-up-slime-ac)
        (add-hook 'slime-repl-mode-hook 'set-up-slime-ac)
        (slime-setup
         '(slime-fancy-inspector slime-fancy-trace slime-fontifying-fu
                                 slime-hyperdoc slime-package-fu slime-references
                                 slime-snapshot slime-sprof slime-trace-dialog slime-xref-browser
                                 slime-asdf slime-autodoc slime-banner slime-fancy slime-fuzzy
                                 slime-repl slime-sbcl-exts))
        (defadvice slime-documentation-lookup
            (around change-browse-url-browser-function activate)
          "Use w3m for slime documentation lookup."
          (let ((browse-url-browser-function 'w3m-browse-url))
            ad-do-it))
        (setq slime-complete-symbol*-fancy t)
        (setq slime-complete-symbol-function 'slime-fuzzy-complete-symbol)
        (setq slime-net-coding-system 'utf-8-unix)
        (setq slime-lisp-implementations '((clojure ("clj-cmd") :init swank-clojure-init)))
        (setq slime-use-autodoc-mode nil)
        (setq slime-backend (concat (package-desc-dir (cadr (assq 'slime package-alist))) "/swank-loader.lisp"))
        (add-to-list 'slime-lisp-implementations '(sbcl ("sbcl")  :coding-system utf-8-unix))
        ;;TODO: make more concrete use of helm-slime, see comments at https://github.com/emacs-helm/helm-slime/blob/master/helm-slime.el
        (defhydra hydra-slime ()
          "
        Slime
        -----------
        _s_ run
        _l_ selector
        _;_ insert balanced comments
        _M-;_ remove balanced comments
        _h_ documentation lookup
        "
          ("s" slime "run slime" :color blue)
          ("l" slime-selector "slime selector" :color blue)
          (";" slime-insert-balanced-comments)
          ("M-;" slime-remove-balanced-comments)
          ("h" slime-documentation-lookup)
          ("q" nil "cancel"))
        (global-set-key (kbd "M-p") 'hydra-slime/body))

      ;; lookup information in hyperspec
      (info-lookup-add-help
       :mode 'lisp-mode
       :regexp "[^][()'\" \t\n]+"
       :ignore-case t
       :doc-spec '(("(ansicl)Symbol Index" nil nil nil)))
    #+END_SRC
*** haskell
    #+BEGIN_SRC emacs-lisp
      (use-package haskell-mode
        :init
        (use-package haskell-indent)
        (use-package haskell-align-imports)
        (use-package haskell-navigate-imports)
        (use-package haskell-sort-imports)
        (use-package inf-haskell)
        :config
        (setq haskell-program-name "ghci")
        (setq inferior-haskell-wait-and-jump t)
        (setq haskell-program-name "ghci \"+.\"")
        (bind-key "C-," 'haskell-move-nested-left haskell-mode-map)
        (bind-key "C-." 'haskell-move-nested-right haskell-mode-map)
        (bind-key "<tab>" 'haskell-indent-cycle haskell-mode-map)
        (bind-key "C-c h" 'haskell-hoogle haskell-mode-map)
        (bind-key "C-c C-h" 'haskell-hayoo haskell-mode-map)
        (add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)
        (add-hook 'haskell-mode-hook 'turn-on-haskell-indent)
        (add-hook 'haskell-mode-hook 'turn-on-eldoc-mode)
        (add-hook 'haskell-mode-hook 'common-hooks/newline-hook)
        (add-hook 'haskell-mode-hook 'common-hooks/prog-helpers)
        (add-hook 'haskell-mode-hook 'turn-on-haskell-ghci))

      (use-package haskell-ghci)

      ;;TODO: setup flycheck
      ;;TODO: bind in haskell-mode-map: haskell-{goto-imports, {return-from, navigate, sort, align}-imports}
      ;;TODO: investigate the difference between builtin and el-get versions of haskell-mode
    #+END_SRC
**** try
***** hindent
***** shm
*** python
**** linux traits
     #+BEGIN_SRC emacs-lisp :tangle (if (eq system-type 'gnu/linux) "yes" "no")
       (setq custom/python-libs-path "/usr/lib64/python2.7:")
     #+END_SRC
**** darwin traits
     #+BEGIN_SRC emacs-lisp :tangle (if (eq system-type 'darwin) "yes" "no")
       (setq custom/python-libs-path "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7:")
     #+END_SRC
**** setup
     #+BEGIN_SRC emacs-lisp
       (use-package pep8 :ensure t)
       (use-package python-pep8 :ensure t)

       (use-package jedi
         :ensure t
         :init
         (progn
           (setq jedi:complete-on-dot t)
           (setq jedi:goto-definition-marker-ring-length 32))
         :config
         (progn
           (defun custom/python-mode-hook ()
             (auto-fill-mode 1)
             (flycheck-mode)
             (setq flycheck-checker 'python-flake8)
             (setq indent-tabs-mode nil)
             (setq tab-width 4)
             ;;FIXME: find-project-flake8-config id somehow broken
             ;; (setq flycheck-flake8rc (or (custom/find-project-flake8-config) flycheck-flake8rc))
             )
           (add-hook 'python-mode-hook 'custom/python-mode-hook)
           (add-hook 'python-mode-hook 'common-hooks/prog-helpers)
           (add-hook 'python-mode-hook 'common-hooks/newline-hook)
           (add-hook 'python-mode-hook
                     (lambda ()
                       (setq imenu-create-index-function 'imenu-default-create-index-function)))
           (add-hook 'python-mode-hook 'yas/minor-mode-on)
           (add-hook 'python-mode-hook 'jedi:setup)
           (add-hook 'python-mode-hook 'jedi:ac-setup)
           ))

       (use-package pylookup
         :defer t
         :config
         (progn
           ;; set executable file and db file
           (setq pylookup-program (at-pylookup-dir "/pylookup.py"))
           (setq pylookup-db-file (at-pylookup-dir "/pylookup.db"))
           ;; set search option if you want
           (setq pylookup-search-options '("--insensitive" "0" "--desc" "0"))
           (defadvice pylookup-lookup
               (around change-browse-url-browser-function activate)
             "Use w3m for slime documentation lookup."
             (let ((browse-url-browser-function 'w3m-browse-url))
               ad-do-it))))

       (use-package python
         :ensure t
         :defer t
         :config
         (use-package ac-python :ensure auto-complete)
         (bind-key "M-." 'jedi:goto-definition python-mode-map)
         (bind-key "M-," 'jedi:goto-definition-pop-marker python-mode-map)
         (bind-key "+" 'python-indent-shift-right region-bindings-mode-map)
         (bind-key "_" 'python-indent-shift-left region-bindings-mode-map))

       ;; Highlight the call to ipdb
       ;; src http://pedrokroger.com/2010/07/configuring-emacs-as-a-python-ide-2/
       (defun annotate-pdb ()
         (interactive)
         (highlight-lines-matching-regexp "import ipdb")
         (highlight-lines-matching-regexp "ipdb.set_trace()"))
       (add-hook 'python-mode-hook 'annotate-pdb)

       (defhydra hydra-python ()
         "
         ^Checks:^       ^Nav^
         ------------------------------------
         py_l_int        _p_ylookup at point
         pep_8_          find _r_elated names (helm+jedi)
         _m_ulti flake8
         "
         ("l" pylint)
         ("8" pep8)
         ("m" flake8-multi)
         ("p" pylookup-lookup-at-point)
         ("r" helm-jedi-related-names)
         ("q" nil))
       (global-set-key (kbd "C-c C-p") 'hydra-python/body)

       (setq mumamo-background-colors nil)

       (setenv "PYTHONPATH"
               (concat
                custom/python-libs-path
                (mapconcat 'identity private/python-path-job-projects "")
                (getenv "PYTHONPATH")))
       (setenv "PYLINTRC"
               (at-config-basedir
                "contrib/.pylintrc"))
     #+END_SRC
*** cc
    #+BEGIN_SRC emacs-lisp
      (use-package cc-mode)
      (use-package info-look)
      (use-package ac-c-headers :ensure auto-complete)
      (use-package ac-clang :ensure auto-complete)
      (use-package auto-complete-clang :ensure auto-complete)

      (use-package irony :ensure t
        :config
        (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))

      (use-package function-args
        :ensure t
        :config
        (define-key c-mode-map (kbd "C-c j") 'moo-jump-local)
        (define-key c++-mode-map (kbd "C-c j") 'moo-jump-local)
        (define-key c-mode-map (kbd "C-c C-<tab>") 'moo-complete)
        (define-key c++-mode-map (kbd "C-c C-<tab>") 'moo-complete))

      (use-package rtags
        :ensure t
        :config
        (define-key c-mode-map (kbd "C-.") 'rtags-find-symbol-at-point)
        (define-key c-mode-map (kbd "C-u C-.") 'rtags-find-references-at-point)
        (define-key c-mode-map (kbd "C-,") 'rtags-location-stack-back)
        (define-key c-mode-map (kbd "C-c TAB") 'rtags-diagnostics)
        (define-key c++-mode-map (kbd "C-.") 'rtags-find-symbol-at-point)
        (define-key c++-mode-map (kbd "C-u C-.") 'rtags-find-references-at-point)
        (define-key c++-mode-map (kbd "C-,") 'rtags-location-stack-back)
        (define-key c++-mode-map (kbd "C-c TAB") 'rtags-diagnostics))

      (info-lookup-add-help
       :mode 'c-mode
       :regexp "[^][()'\" \t\n]+"
       :ignore-case t
       :doc-spec '(("(libc)Symbol Index" nil nil nil)))

      (defun custom/c-mode-common-hook ()
        (require 'auto-complete-c-headers)
        (add-to-list 'ac-sources 'ac-source-c-headers)
        (add-to-list 'ac-sources 'ac-source-gtags)
        (add-to-list 'ac-sources 'ac-source-clang)
        (irony-mode))

      ;; replace the `completion-at-point' and `complete-symbol' bindings in
      ;; irony-mode's buffers by irony-mode's function
      (defun custom/irony-mode-hook ()
        (define-key irony-mode-map [remap completion-at-point]
          'irony-completion-at-point-async)
        (define-key irony-mode-map [remap complete-symbol]
          'irony-completion-at-point-async))

      (add-hook 'c++-mode-hook 'common-hooks/newline-hook)
      (add-hook 'c++-mode-hook 'custom/c-mode-common-hook)
      (add-hook 'c++-mode-hook 'irony-mode)
      (add-hook 'c-mode-common-hook 'common-hooks/prog-helpers)
      (add-hook 'c-mode-hook 'common-hooks/newline-hook)
      (add-hook 'c-mode-hook 'custom/c-mode-common-hook)
      (add-hook 'c-mode-hook 'irony-mode)
      (add-hook 'irony-mode-hook 'custom/irony-mode-hook)

      ;;TODO: review and maybe rebind
      (define-key c-mode-map (kbd "M-.") 'helm-gtags-select)
      (define-key c++-mode-map (kbd "C-j") 'helm-gtags-select)
      (define-key c-mode-map (kbd "C-c t") 'helm-gtags-show-stack)
      (define-key c++-mode-map (kbd "C-c t") 'helm-gtags-show-stack)
      (define-key c-mode-map (kbd "C-c i") 'helm-gtags-tags-in-this-function)
      (define-key c++-mode-map (kbd "C-c i") 'helm-gtags-tags-in-this-function)
      (define-key c-mode-map (kbd "C-c u") 'helm-gtags-update-tags)
      (define-key c++-mode-map (kbd "C-c u") 'helm-gtags-update-tags)

      ;;TODO: bind helm-gtags-find-{rtags,symbol}
    #+END_SRC
*** perl
    #+BEGIN_SRC emacs-lisp :tangle no
      (fset 'perl-mode 'cperl-mode)

      (use-package cperl
        :defer t
        :command perl-mode
        :config
        (progn
          (setq cperl-hairy t)
          (setq cperl-auto-newline-after-colon t)
          (setq cperl-autoindent-on-semi t)
          (setq cperl-extra-newline-before-brace nil)
          (setq cperl-indent-parens-as-block t)
              (setq cperl-auto-newline t)
              (setq cperl-brace-offset 0)
              (setq cperl-close-paren-offset -4)
              (setq cperl-continued-brace-offset 0)
              (setq cperl-continued-statement-offset 4)
              (setq cperl-extra-newline-before-brace-multiline nil)
              (setq cperl-indent-level 4)
              (setq cperl-label-offset -4)
              (setq cperl-merge-trailing-else nil)
              (setq cperl-tab-always-indent t)))

      (defun custom/perl-mode-hook ()
        (cperl-mode 1)
        (setq compile-command (concat "perl -cw " buffer-file-name))
        (setq indent-tabs-mode nil)
        (setq tab-width 4)
        (turn-on-eldoc-mode)
          (yas-minor-mode t)
          (setf prettify-symbols-alist '(("->" . ?→)
                                                                       (">=" . ?≥)
                                                                       ("<=" . ?≤)))
          ;; ("<>" . ?≠)  ("=>" . ?⇒)
          (prettify-symbols-mode t))

      (add-hook 'cperl-mode-hook 'custom/perl-mode-hook)
      (add-hook 'cperl-mode-hook 'common-hooks/prog-helpers)
      (add-hook 'cperl-mode-hook 'common-hooks/newline-hook)
      (add-hook 'cperl-mode-hook 'ws-butler-mode)
    #+END_SRC
*** php
    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package php-mode
        :init
        (use-package php-electric) ;; autocompletion
        (use-package ac-php-doc)
        :config
        (progn
          (setq php-manual-path custom/php-manual-path)
          (defun custom/php-mode-hook ()
            ;; style customization
            (setq tab-width 4) ;; was 4
            (setq indent-tabs-mode nil)
            (setq c-basic-offset 4)
            (setq show-trailing-whitespace t) ;; show trailing whitespace
            )
          (add-hook 'php-mode-hook 'custom/php-mode-hook)
          (add-hook 'php-mode-hook 'set-up-php-ac)
          (add-hook 'php-mode-hook 'common-hooks/prog-helpers)))
    #+END_SRC
** webdev
*** major modes
    #+BEGIN_SRC emacs-lisp
      (use-package sgml-mode
        :config
        (progn
          (bind-key "C-c C-w" 'html-wrap-in-tag html-mode-map)))

      (use-package markdown-mode
        :ensure t
        :config
        (progn
          (bind-key "C-c C-v" 'markdown-preview markdown-mode-map)
          (bind-key "C-<tab>" 'yas/expand markdown-mode-map)))

      (use-package yaml-mode :ensure t)
    #+END_SRC
*** xml
    #+BEGIN_SRC emacs-lisp
      (defun custom/nxml-mode-hook ()
        (auto-fill-mode)
        (hs-minor-mode 1)
        (rng-validate-mode)
        (setq ispell-skip-html t)
        (unify-8859-on-decoding-mode)
        )

      (setq nxml-auto-insert-xml-declaration-flag t)
      (setq nxml-bind-meta-tab-to-complete-flag t)
      (setq nxml-slash-auto-complete-flag t)

      (push '("<\\?xml" . nxml-mode) magic-mode-alist)

      (add-to-list 'hs-special-modes-alist
                   '(nxml-mode
                     "\\|<[^/>]&>\\|<[^/][^>]*[^/]>"
                     ""
                     nil))

      (add-hook 'nxml-mode-hook 'common-hooks/newline-hook)
      (add-hook 'nxml-mode-hook 'custom/nxml-mode-hook)

      ;; TODO: integrate docbook-menu into el-get, probable relevant links below
      ;; http://www.emacswiki.org/emacs/UsingNxmlModeWithDocBook
      ;; http://www.emacswiki.org/emacs/DocbookXmlMode
    #+END_SRC
*** multiple major modes
    #+BEGIN_SRC emacs-lisp
      (use-package web :ensure t)

      (setq mumamo-background-colors nil)
      (setq mumamo-submode-indent-offset 4)

      (add-hook 'css-mode-hook (lambda () (rainbow-mode)))
      (add-hook 'django-html-mumamo-mode-hook
                (lambda ()
                  (setq django-indent-width 4)
                  (setq sgml-basic-offset 4)))
    #+END_SRC
*** color helper
    #+BEGIN_SRC emacs-lisp
      (use-package rainbow-mode :ensure t)
    #+END_SRC
*** emmet mode setup
    #+BEGIN_SRC emacs-lisp
      (use-package emmet-mode
        :ensure t
        :config
        (progn
          (use-package ac-emmet :ensure auto-complete)
          (use-package helm-emmet :ensure helm)
          (push 'html-mode ac-modes)
          (push 'web-mode ac-modes)
          (add-hook 'sgml-mode-hook 'ac-emmet-html-setup)
          (add-hook 'css-mode-hook 'ac-emmet-css-setup)
          (add-hook 'web-mode-hook 'ac-emmet-html-setup)
          (bind-key "C-j" nil emmet-mode-keymap)
          (bind-key "<C-return>" nil emmet-mode-keymap)
          (bind-key "C-c C-j" 'emmet-expand-line emmet-mode-keymap)
          (bind-key "C-c C-h" 'helm-emmet emmet-mode-keymap)
          (setq emmet-move-cursor-between-quotes t)
          (add-hook 'sgml-mode-hook 'emmet-mode)
          (add-hook 'nxml-mode-hook 'emmet-mode)
          (add-hook 'django-mode 'emmet-mode)
          (add-hook 'sgml-mode-hook 'emmet-mode)
          (add-hook 'css-mode-hook 'emmet-mode)
          (add-hook 'emmet-mode-hook
                    (lambda () (setq emmet-indentation 2)))
          ))
    #+END_SRC
*** try
    #+BEGIN_SRC emacs-lisp :tangle no
      ;; from FAQ at http://web-mode.org/ for smartparens
      (defun my/web-mode-hook ()
        (setq web-mode-enable-auto-pairing nil))

      (defun my/sp-web-mode-is-code-context (id action context)
        (when (and (eq action 'insert)
                   (not (or (get-text-property (point) 'part-side)
                            (get-text-property (point) 'block-side))))
          t))
    #+END_SRC
* clients
** restclient
   #+BEGIN_SRC emacs-lisp
     (define-namespace custom/

     (defun create-restclient-sandbox ()
       (interactive)
       (let ((restbuffer (generate-new-buffer "*restclient-sandbox*")))
         (switch-to-buffer restbuffer)
         (restclient-mode)))

     )

     (use-package restclient
       :ensure t
       :defer t
       :bind ("C-c C-r C-s" . custom/create-restclient-sandbox))
   #+END_SRC
** ERC
*** some handy navigation functions
    #+BEGIN_SRC emacs-lisp
      (define-namespace custom/

      ;; FIXME should be able to quit server
      ;; being invoked from barely any buffer
      (defun leave-irc-server ()
        (interactive)
        (erc-quit-server "Leaving"))

      (defun select-erc-buffer ()
        (interactive)
        (switch-to-buffer
         (helm-comp-read
          "Select ERC buffer:" (mapcar #'buffer-name (erc-buffer-list)))))

      (defun select-erc-unread-buffer ()
        (interactive)
        (switch-to-buffer
         (helm-comp-read
          "Select unread ERC buffer:"
          (mapcar #'buffer-name
                  (mapcar (lambda (x) (nth 0 x)) erc-modified-channels-alist)))))
      ;;TODO: check if '(mapcar #'buffer-name (erc-buffer-list #'buffer-modified-p)) works

      (defun insert-erc-nick (&optional atsign)
        (interactive)
        (insert
         (concatenate 'string
                      (when atsign
                        "@")
                      (helm-comp-read "nick: " (pcomplete-erc-nicks)) ": ")
         ))

      )
    #+END_SRC
*** connect to Slack IRC gate (work chats)
    #+BEGIN_SRC emacs-lisp
      (define-namespace custom/

      (defun connect-slack-irc ()
        (interactive)
        (erc-tls
         :server private/irc-mira-slack-server
         :full-name private/erc-full-name
         :nick private/irc-mira-slack-nick
         :password private/irc-mira-slack-password))

      )
    #+END_SRC
*** setup
    #+BEGIN_SRC emacs-lisp
      (use-package erc
        :defer t
        :init
        ;;TODO: try using 'erc-modules
        (use-package erc-pcomplete)
        (use-package erc-join)
        (use-package erc-lang)
        (use-package erc-fill)
        (use-package erc-log)
        (use-package erc-autoaway)
        (use-package erc-services)
        (use-package erc-menu)
        (use-package erc-ring)
        (use-package erc-match)
        ;;TODO: find a way to use erc extra modules on behalf of package.el (resurrect erc-nicklist)
        (use-package erc-hl-nicks :ensure t)
        (use-package ercn :ensure t) ;TODO: add notifications handler function
        :config
        (progn
          (erc-pcomplete-mode 1)
          (setq erc-track-exclude-types '("JOIN" "NICK" "PART" "QUIT" "MODE"
                                          "324" "329" "332" "333" "353" "477"))
          (setq erc-kill-queries-on-quit t)
          (setq erc-autojoin-channels-alist
                '(("irc.freenode.net" "#git" "#stumpwm" "#emacsconf")
                  ))
          (setq erc-keywords '((".*Online.*" (:foreground "green"))
                               (".*Busy" (:foreground "red"))
                               (".*Away" (:foreground "red"))
                               (".*Idle" (:foreground "orange"))
                               ))
          (setq erc-nickserv-passwords
                '((freenode ((private/erc-nick-main . private/erc-password-main)
                             (private/erc-nick-work . private/erc-password-work)))))
          (setq erc-prompt-for-nickserv-password nil)
          (setq erc-nick private/erc-nick-main)
          (setq erc-track-priority-faces-only 'all)
          (setq erc-log-channels-directory custom/erc-logs-directory)
          (setq erc-autoaway-message custom/erc-autoaway-message)
          (setq erc-auto-query 'buffer)
          (setq erc-log-channels t)
          (setq erc-max-buffer-size 20000)

          (erc-autojoin-mode t)
          (erc-fill-mode t)
          (erc-nickserv-mode 1)
          (erc-ring-mode t)
          (erc-match-enable)
          (erc-match-mode 1)
          (erc-timestamp-mode t)
          (erc-log-enable)

          (defhydra hydra-erc (:color blue)
            "
        IRC   ^Connection^ ^Tools^
        ------------------------
        _s_lack      _q_ leave server
        select _b_uffer
        select _u_nread buffer
        _i_nsert nick
        "
            ("s" custom/connect-slack-irc)
            ("q" custom/leave-irc-server)
            ("b" custom/select-erc-buffer)
            ("u" custom/select-erc-unread-buffer)
            ("i" (lambda () (interactive) (custom/insert-erc-nick t))))
          (global-set-key (kbd "C-q") 'hydra-erc/body)
          ))
    #+END_SRC
** jabber
*** definitions
**** common utils
     #+BEGIN_SRC emacs-lisp
       (define-namespace custom/

       (defvar use-zenburn-in-jabber t "Paint jabber-el buffers with zenburn colors")

       (defun jabber-muc-sendto (&optional other-window)
         "Insert MUC participant nick into chat."
         (interactive)
         (end-of-buffer)
         (insert (concat (helm-comp-read "Send to: "
                                         (jabber-muc-nicknames)) ": ")))


       (defvar helm-source-jabber-contact-jids
         '((name . "Jabber Contacts")
           (init . (lambda () (require 'jabber)))
           (candidates . (lambda () (mapcar 'cdr (helm-jabber-online-contacts))))
           (action . (lambda (x)
                       (jabber-chat-with
                        (jabber-read-account)
                        x)))))

       (defun helm-jabber-chat-with (arg)
         (interactive "P")
         (if (= (prefix-numeric-value arg) 4)
             (helm-other-buffer '(helm-source-jabber-contact-jids)
                                "*jabber: chat with*")
           (helm-other-buffer '(helm-source-jabber-contacts)
                              "*jabber: chat with*")))

       (defun jabber-abbrev ()
         (interactive)
         (clipboard-kill-ring-save (region-beginning) (region-end))
         (end-of-buffer)
         (helm-yas-complete))

       )
     #+END_SRC
**** darwin
    #+BEGIN_SRC emacs-lisp :tangle (if (eq system-type 'darwin) "yes" "no")
      (define-namespace custom/

      (defvar growl-program "/usr/local/bin/growlnotify")

      (defun growl (title message &optional id)
        (if (eq id nil)
            (start-process "growl" " growl"
                           growl-program title "-w")
          (start-process "growl" " growl"
                         growl-program title "-w" "-d" id))
        (process-send-string " growl" message)
        (process-send-string " growl" "\n")
        (process-send-eof " growl"))

      (defun pg-jabber-growl-notify (from buf text proposed-alert)
        "(jabber.el hook) Notify of new Jabber chat messages via Growl"
        (when (or jabber-message-alert-same-buffer
                  (not (memq (selected-window) (get-buffer-window-list buf))))
          (if (jabber-muc-sender-p from)
              (growl (format "(PM) %s"
                             (jabber-jid-displayname (jabber-jid-user from)))
                     (format "%s: %s" (jabber-jid-resource from)
                             (osd-text-to-utf-16-hex text))
                     (format "jabber-from-%s" (jabber-jid-resource from)))
            (growl (format "%s" (jabber-jid-displayname from))
                   (osd-text-to-utf-16-hex text) "jabber-from-unknown"))))

      ;; Same as above, for groupchats
      (defun pg-jabber-muc-growl-notify (nick group buf text proposed-alert)
        "(jabber.el hook) Notify of new Jabber MUC messages via Growl"
        (when (or jabber-message-alert-same-buffer
                  (not (memq (selected-window) (get-buffer-window-list buf))))
          (if nick
              (when (or jabber-muc-alert-self
                        (not (string=
                              nick (cdr (assoc group *jabber-active-groupchats*)))))
                (growl (format "%s" (jabber-jid-displayname group))
                       (format "%s: %s" nick (osd-text-to-utf-16-hex text))
                       (format "jabber-chat-%s" (jabber-jid-displayname group))))
            (growl (format "%s" (jabber-jid-displayname group))
                   (osd-text-to-utf-16-hex text) "jabber-chat-unknown"))))

      (defun osd-text-to-utf-16-hex (text)
        (let* ((utext (encode-coding-string text 'utf-8))
               (ltext (string-to-list utext)))
          (apply #'concat
                 (mapcar (lambda (x) (format "%c" x)) ltext))))

      )
    #+END_SRC
**** linux
    #+BEGIN_SRC emacs-lisp :tangle (if (eq system-type 'gnu/linux) "yes" "no")
      (define-namespace custom/

      (defun jabber-libnotify-message(from msg)
        "Show MSG using libnotify"
        (let ((process-connection-type nil))
          (start-process "notification" nil "notify-send"
                         "-t" jabber-libnotify-timeout
                         "-i" jabber-libnotify-icon
                         from msg)))

      (defun jabber-libnotify-message-display (from buffer text propsed-alert)
        (jabber-libnotify-message from text))

      (defun x-urgency-hint (frame arg &optional source)
        (let* ((wm-hints (append (x-window-property
                                  "WM_HINTS" frame "WM_HINTS"
                                  (if source
                                      source
                                    (string-to-number
                                     (frame-parameter frame 'outer-window-id)))
                                  nil t) nil))
               (flags (car wm-hints)))
          (setcar wm-hints
                  (if arg
                      (logior flags #x00000100)
                    (logand flags #xFFFFFEFF)))
          (x-change-window-property "WM_HINTS" wm-hints frame "WM_HINTS" 32 t)))

      (defun jabber-urgency-hint ()
        (let ((count (length jabber-activity-jids)))
          (unless (= jabber-activity-jids-count count)
            (if (zerop count)
                (x-urgency-hint (selected-frame) nil)
              (x-urgency-hint (selected-frame) t))
            (setq jabber-activity-jids-count count))))

      ;; depends on s
      (defun jabber-presence-urgency-hint (who oldstatus newstatus statustext proposed-alert)
        (when (remove-if (lambda (jid) (not (s-starts-with? (symbol-name who) jid))) *urgency-presence-jids*)
          (custom/notify "jabber" (format "Presence changed for %s: %s"
                                          who (if (get who 'connected) "online" "offline")))))

      (defun notify (title message)
        "Notify the user using either the dbus based API or the `growl' one"
        (unless (and (fboundp 'dbus-register-signal)
                     ;; avoid a bug in Emacs 24.0 under darwin
                     (ignore-errors (require 'notifications nil t)))
          ;; else try notify.el
          (unless (fboundp 'notify)
            (ignore-errors (require 'notify nil 'noerror))))
        (condition-case nil
            (cond
             ;; Graphical notification
             ((fboundp 'notifications-notify) (notifications-notify :title title
                                                                    :app-name "emacs"
                                                                    :body message))
             ((fboundp 'notify)               (notify title message))
             ;; Fallback
             (t                               (error "Fallback to `message'")))
          ;; when notification function errored out, degrade gracefully to `message'
          (error (message "%s: %s" title message))))

      )

      ;; Jabber urgency hints
      (defvar jabber-activity-jids-count 0)
      (defvar jabber-libnotify-icon ""
        "*Icon to be used on the notification pop-up. Default is empty")
      (defvar jabber-libnotify-timeout "7000"
        "*Specifies the timeout of the pop up window in millisecond")
    #+END_SRC
*** setup
**** common
     #+BEGIN_SRC emacs-lisp
       (use-package jabber
         :ensure t
         :init
         (load "jabber-autoloads") ;; For 0.7.90 and above:
         (use-package jabber-bookmarks)
         (use-package jabber-autoaway)
         :config
         (progn
           (when custom/use-zenburn-in-jabber
             (set-face-attribute 'jabber-roster-user-chatty nil :foreground "#f0dfaf" :weight 'bold)
             (set-face-attribute 'jabber-roster-user-online nil :foreground "#dfaf8f" :weight 'bold)
             (set-face-attribute 'jabber-roster-user-away nil :foreground "#8fb28f")
             (set-face-attribute 'jabber-roster-user-xa nil :foreground "#7f9f7f")
             (set-face-attribute 'jabber-roster-user-offline nil :foreground "#606060")
             (set-face-attribute 'jabber-roster-user-dnd nil :foreground "#94bff3" :weight 'bold)
             (set-face-attribute 'jabber-roster-user-error nil :foreground "#e37170" :background "#332323")
             (set-face-attribute 'jabber-title-small nil :inherit 'variable-pitch :weight 'bold :height 1.2)
             (set-face-attribute 'jabber-title-medium nil :inherit 'variable-pitch :weight 'bold :height 1.2)
             (set-face-attribute 'jabber-title-large nil :inherit 'variable-pitch :weight 'bold :height 1.2)
             (set-face-attribute 'jabber-chat-prompt-local nil :foreground "#f0dfaf" :weight 'bold)
             (set-face-attribute 'jabber-chat-prompt-foreign nil :foreground "#dfaf8f" :weight 'bold)
             (set-face-attribute 'jabber-rare-time-face nil :foreground "#8fb28f"))
           (custom-set-faces '(jabber-chat-prompt-system ((t (:foreground "darkgreen" :weight bold)))))

           ;; Message alert hooks
           (define-jabber-alert echo "Show a message in the echo area"
             (lambda (msg)
               (unless (minibuffer-prompt)
                 (message "%s" msg))))

           (defun my-jabber-connect-hook (jc)
             (jabber-send-presence "" "I'm online" 10)
             (let* ((state-data (fsm-get-state-data jc))
                    (server (plist-get state-data :server)))
               (message "%s" server)
               ))
           (defhydra hydra-jabber ()
             "
         ^insert^         ^navigate^
         -------------------------------------------------
         _8_ :-*          _r_oster
         _l_ *IN LOVE*    _s_witch to recently active
         _y_ :-[          _j_ump to contact
         _t_ (c)          open _m_uc
         _a_bbreviation
         "
             ("8" (lambda () (interactive) (insert ":-* ")) ":-*")
             ("l" (lambda () (interactive) (insert "*IN LOVE* ")) "*IN LOVE*")
             ("y" (lambda () (interactive) (insert ":-[ ")) ":-[")
             ("t" (lambda () (interactive) (insert "(c) ")) "(c)")
             ("a" custom/jabber-abbrev)
             ("r" jabber-switch-to-roster-buffer)
             ("s" jabber-activity-switch-to :color blue)
             ("j" custom/helm-jabber-chat-with)
             ("m" custom/jabber-muc-sendto)
             ;;TODO: move other insertions here, for example, current time, etc.
             ("q" nil "cancel"))
           (global-set-key (kbd "<f6>") 'hydra-jabber/body)
           (setq fsm-debug nil)
           (setq gnutls-algorithm-priority "NORMAL:+COMP-DEFLATE")
           (setq jabber-account-list custom/jabber-account-list)
           (setq jabber-alert-info-message-hooks 'jabber-info-echo)
           (setq jabber-alert-message-hooks 'jabber-message-beep jabber-message-scroll)
           (setq jabber-alert-presence-hooks 'jabber-presence-update-roster)
           (setq jabber-alert-presence-message-function (lambda (who oldstatus newstatus statustext) nil))
           (setq jabber-auto-reconnect t)
           (setq jabber-backlog-number 100)
           (setq jabber-chat-buffer-format "*-jc-%n-*")
           (setq jabber-groupchat-buffer-format "*-jg-%n-*")
           (setq jabber-history-dir custom/jabber-history-dir)
           (setq jabber-history-enabled t)
           (setq jabber-mode-line-mode t)
           (setq jabber-muc-private-buffer-format "*-jmuc-priv-%g-%n-*")
           (setq jabber-nickname (capitalize global-username))
           (setq jabber-rare-time-format "%e %b %Y %H:00")
           (setq jabber-resource custom/jabber-resource)
           (setq jabber-roster-buffer "*-jroster-*")
           (setq jabber-roster-line-format " %c %-25n %u %-8s  %S")
           (setq jabber-use-global-history nil)
           (add-hook 'jabber-post-connect-hook 'jabber-autoaway-start)
           (add-hook 'jabber-chat-mode-hook 'goto-address)
           (add-hook 'jabber-post-connect-hooks 'my-jabber-connect-hook)
           (add-hook 'jabber-chat-mode-hook (lambda () (toggle-input-method)))
           ))
     #+END_SRC
**** darwin
     #+BEGIN_SRC emacs-lisp :tangle (if (eq system-type 'darwin) "yes" "no")
       ;; Make jabber.el notify through growl when I get a new message
       (setq jabber-message-alert-same-buffer nil)
       (setq jabber-message-alert-same-buffer t)
       (add-hook 'jabber-alert-message-hooks 'custom/pg-jabber-growl-notify)
       (add-hook 'jabber-alert-muc-hooks 'custom/pg-jabber-muc-growl-notify)
     #+END_SRC
**** linux
     #+BEGIN_SRC emacs-lisp :tangle (if (eq system-type 'gnu/linux) "yes" "no")
       ;; Jabber urgency hints
       (add-hook 'jabber-activity-update-hook 'custom/jabber-urgency-hint)
       (add-hook 'jabber-alert-presence-hooks 'custom/jabber-presence-urgency-hint)
       (add-to-list 'jabber-alert-message-hooks
                    'custom/jabber-libnotify-message-display)
     #+END_SRC
** terminal
*** definitions
    #+BEGIN_SRC emacs-lisp
      (define-namespace custom/

      ;;TODO: parametrize shell for terminal
      (defun terminal ()
        "Switch to terminal. Launch if nonexistent."
        (interactive)
        (if (get-buffer "*ansi-term*")
            (switch-to-buffer "*ansi-term*")
          (ansi-term "/bin/zsh"))
        (get-buffer-process "*ansi-term*"))

      (defalias 'tt 'terminal)

      (defun comint-clear-buffer ()
        (interactive)
        (let ((comint-buffer-maximum-size 0))
          (comint-truncate-buffer)))

      (defun term-exec-hook ()
        (let* ((buff (current-buffer))
               (proc (get-buffer-process buff)))
          (set-process-sentinel
           proc
           `(lambda (process event)
              (if (string= event "finished\n")
                  (kill-buffer ,buff))))))

      )
    #+END_SRC
*** setup
    #+BEGIN_SRC emacs-lisp
      (use-package eshell
        :config
        (progn
          (defun eshell-handle-ansi-color ()
            (ansi-color-apply-on-region eshell-last-output-start
                                        eshell-last-output-end))
          (add-to-list 'eshell-output-filter-functions 'eshell-handle-ansi-color)))

      (use-package term
        :config
        (progn
          (add-hook 'term-exec-hook 'custom/term-exec-hook)
          (define-key term-raw-map (kbd "C-c C-y") 'term-paste)
          (setq explicit-shell-file-name "/bin/zsh")
          ))

      (define-key comint-mode-map "\C-c\M-o" #'custom/comint-clear-buffer)
    #+END_SRC
** Twitter
   #+BEGIN_SRC emacs-lisp
     (use-package twittering-mode
       :ensure t
       :defer t
       :commands twit
       :init
       (setq twittering-use-master-password t))
   #+END_SRC
** internal browser (w3m/eww)
   #+BEGIN_SRC emacs-lisp
     (use-package w3m
       :ensure t
       :defer t
       :commands w3m
       :init
       (progn
         (use-package w3m-search)
         (add-hook 'w3m-display-hook
                   (lambda (url)
                     (rename-buffer
                      (format "*w3m: %s*" (or w3m-current-title
                                              w3m-current-url)) t))))
       :config
       (progn
         (setq w3m-coding-system 'utf-8)
         (setq w3m-file-coding-system 'utf-8)
         (setq w3m-file-name-coding-system 'utf-8)
         (setq w3m-input-coding-system 'utf-8)
         (setq w3m-output-coding-system 'utf-8)
         (setq w3m-terminal-coding-system 'utf-8)
         (setq w3m-use-cookies t)
         ;; special chars
         (standard-display-ascii ?\200 [15])
         (standard-display-ascii ?\201 [21])
         (standard-display-ascii ?\202 [24])
         (standard-display-ascii ?\203 [13])
         (standard-display-ascii ?\204 [22])
         (standard-display-ascii ?\205 [25])
         (standard-display-ascii ?\206 [12])
         (standard-display-ascii ?\210 [23])
         (standard-display-ascii ?\211 [14])
         (standard-display-ascii ?\212 [18])
         (standard-display-ascii ?\214 [11])
         (standard-display-ascii ?\222 [?\'])
         (standard-display-ascii ?\223 [?\"])
         (standard-display-ascii ?\224 [?\"])
         (standard-display-ascii ?\227 " -- ")
         (add-to-list 'w3m-search-engine-alist
                      '("emacs-wiki" "http://www.emacswiki.org/cgi-bin/wiki.pl?search=%s"))))
   #+END_SRC
** MPD
   #+BEGIN_SRC emacs-lisp
     (use-package mingus
       :ensure t
       :config
       (bind-key "<Backspace>" 'mingus-del mingus-playlist-map)
       (defhydra hydra-mingus ()
         "
       Control               Playlist
       ------------------------------
       _<up>_ volume up        _s_ show playlist
       _<down>_ volume down    _/_ search for tracks
       _<right>_ seek forward
       _<left>_ seek backward
       "
         ("s" mingus "open mingus")
         ("/" mingus-search "Search")
         ("<up>" (dotimes (i 5) (mingus-vol-up)) "Louder")
         ("<down>" (dotimes (i 5) (mingus-vol-down)) "Quieter")
         ("<right>" mingus-seek "seek forward")
         ("<left>" mingus-seek-backward "seek backward")
         ("q" nil "cancel"))
       (global-set-key (kbd "C-c m") 'hydra-mingus/body))
   #+END_SRC
** open files in external apps
   #+BEGIN_SRC emacs-lisp
     (use-package openwith
       :ensure t
       :config
       (setq openwith-associations
             '(("\\.pdf\\'" "zathura" (file))
               ("\\.djvu\\'" "zathura" (file))
               ("\\.\\(?:mpe?g\\|avi\\|wmv\\|mkv\\|flv\\|mp4\\)\\'" "vlc" (file))
               ("\\.\\(?:jp?g\\|png\\)\\'" "feh" (file))
               ("\\.doc\\'" "abiword" (file))
               ("\\.swf\\'" "swfdec-player" (file))
               )))
   #+END_SRC
** email
*** definitions
**** utils
     #+BEGIN_SRC emacs-lisp
       (define-namespace custom/

       (defun mu4e-view-mode-hook ()
         (toggle-truncate-lines nil))

       (defun set-from-address ()
         "Set the From address based on the To address of the original."
         (setq user-mail-address "aaermolov@gmail.com")
         (let ((msg mu4e-compose-parent-message)) ;; msg is shorter...
           (when msg
             (setq user-mail-address
                   (cond
                    ((mu4e-message-contact-field-matches msg :to "aaermolov@gmail.com")
                     "aaermolov@gmail.com")
                    (t "aaermolov@gmail.com"))))))

       )
     #+END_SRC
**** multiple accounts
     #+BEGIN_SRC emacs-lisp
       (define-namespace custom/

       (defvar gmail-accounts '("aaermolov@gmail.com" "aermolov@mirantis.com"))

       (defun gmail-maildir (email folder &optional from-archive)
         (let ((prefix "/"))
           (when from-archive
             (setf prefix "/archive-"))
           (concat prefix email "/" folder)))

       (defun mu4e-sibling-folder (maildir folder &optional from-archive)
         (gmail-maildir (mu4e-maildir-to-account maildir) folder
                        from-archive))

       (defun mu4e-maildir-to-account (maildir)
         (caddr (s-match "^/\\(archive-\\)?\\([^/]+?\\)/" maildir)))

       (defun mu4e-find-account-from-parent ()
         (awhen mu4e-compose-parent-message
           (message "%s" it)
           (-first (lambda (account) (mu4e-message-contact-field-matches it :to account)) custom/gmail-accounts)))

       (defun make-maildir-mu4e-context (account)
         (make-mu4e-context
          :name account
          :match-func `(lambda (msg)
                        (when msg
                          (s-equals? ,account (custom/mu4e-maildir-to-account
                                              (mu4e-message-field msg :maildir)))))
          :vars `((mail-reply-to . ,account)
                  (user-mail-address . ,account)
                  (smtpmail-smtp-user . ,account))))

       (defun make-mu4e-contexts ()
         (-map 'custom/make-maildir-mu4e-context custom/gmail-accounts))

       (defun mu4e-choose-account ()
         (helm-comp-read "Select an account: " custom/gmail-accounts :must-match t))

       (defun mu4e-read-option (prompt options)
         (helm-comp-read prompt
                         (-map (lambda (option)
                                 (cons (replace-regexp-in-string "^\\(.\\)" "[\\1]" (car option))
                                       (cdr option)))
                               options)))

       )
     #+END_SRC
*** setup
**** mu4e
     #+BEGIN_SRC emacs-lisp
       (use-package mu4e
         :init
         (use-package mu4e-contrib)
         (use-package mu4e-context)
         :config
         ;; don't save message to Sent Messages, Gmail/IMAP takes care of this
         (setq mu4e-sent-messages-behavior 'delete)

         (setq mu4e-html2text-command 'mu4e-shr2text)
         (setq mu4e-view-show-images t)
         (setq mu4e-hide-index-messages t)
         (setq mu4e-update-interval 60)
         (setq mu4e-confirm-quit nil)
         (setq mu4e-headers-leave-behavior 'apply)
         (setq mu4e-headers-auto-update t)
         (setq mu4e-change-filenames-when-moving t)
         (setq mu4e-user-mail-address-list custom/gmail-accounts)

         (setq mu4e-compose-signature-auto-include nil)
         (setq mu4e-use-fancy-chars t)
         (setq mu4e-attachment-dir "~/Downloads")

         (setq mu4e-maildir-shortcuts
               '(("/aaermolov@gmail.com/INBOX"               . ?i)
                 ("/aaermolov@gmail.com/Sent"                . ?s)
                 ("/archive-aaermolov@gmail.com/Trash"       . ?t)))

         ;; allow for updating mail using 'U' in the main view:
         (setq mu4e-get-mail-command "true")

         (setq mu4e-completing-read-function 'completing-read)

         (setq user-mail-address "aaermolov@gmail.com")
         (setq mu4e-compose-signature
               (concat "regards,\n"
                       "Alex\n"))

         ;; mirrors the defaults
         (setf mu4e-bookmarks '(("flag:unread AND NOT maildir:/Trash" "Unread messages" 117)
                                ("date:today..now AND NOT maildir:/Trash" "Today's messages" 116)
                                ("date:7d..now AND NOT maildir:/Trash" "Last 7 days" 119)
                                ("mime:image/* AND NOT maildir:/Trash" "Messages with images" 112)
                                                        ("flag:unread AND maildir:/aaermolov@gmail.com/postgresql" "PostgreSQL maillist unread messages" ?P)))

         (eval-after-load "mu4e"
           '(progn
              (setf mu4e-contexts (custom/make-mu4e-contexts))
              (fset 'mu4e-read-option 'custom/mu4e-read-option)))

         (setf mu4e-maildir       "~/Maildir"
               mu4e-refile-folder (lambda (msg) (custom/mu4e-sibling-folder (mu4e-message-field msg :maildir) "Archive" t))
               mu4e-sent-folder   (lambda (msg) (custom/mu4e-sibling-folder (mu4e-message-field msg :maildir) "Sent"))
               mu4e-drafts-folder (lambda (msg) (custom/mu4e-sibling-folder (mu4e-message-field msg :maildir) "Drafts"))
               mu4e-trash-folder  (lambda (msg) (custom/mu4e-sibling-folder (mu4e-message-field msg :maildir) "Trash" t)))

         (add-hook 'mu4e-view-mode-hook #'custom/mu4e-view-mode-hook)
         (add-hook 'mu4e-compose-pre-hook #'custom/set-from-address))
     #+END_SRC
**** send mail
     #+BEGIN_SRC emacs-lisp
       (use-package smtpmail
         :config
         (setq message-send-mail-function 'smtpmail-send-it)
         (setq starttls-use-gnutls t)
         (setq smtpmail-starttls-credentials '(("smtp.gmail.com" 587 nil nil)))
         (setq smtpmail-auth-credentials '(("smtp.gmail.com" 587 "aaermolov@gmail.com" nil)))
         (setq smtpmail-default-smtp-server "smtp.gmail.com")
         (setq smtpmail-smtp-server "smtp.gmail.com")
         (setq smtpmail-smtp-service 587)
         (setq smtpmail-debug-info t)

         ;; don't keep message buffers around
         (setq message-kill-buffer-on-exit t))

       ;;TODO: provide keybinding
       ;;TODO: catch handy queries
       (defhydra mu4e-hydra (:exit t :color red)
         "Some useful mu4e bookmarks"
         ("i" (progn (mu4e-update-mail-and-index nil) (mu4e-headers-search "maildir:/INBOX")) "INBOX"))
     #+END_SRC
**** unread count extension
     #+BEGIN_SRC emacs-lisp
       (use-package mu4e-maildirs-extension
         :ensure t
         :commands mu4e-maildirs-extension

         :init
         (eval-after-load "mu4e" '(mu4e-maildirs-extension))
         :config
         (setf mu4e-maildirs-extension-count-command-format

               (replace-regexp-in-string "^mu" mu4e-mu-binary mu4e-maildirs-extension-count-command-format))


         (setf mu4e-maildirs-extension-custom-list (-remove #'(lambda (x) (or (s-contains? "[Gmail]" x)
                                                                              (s-contains? "archive-" x)
                                                                              (s-contains? "Trash" x))) (mu4e-get-maildirs)))
         (setf mu4e-maildirs-extension-insert-before-str "\n  Basics"))
     #+END_SRC
** various useful packages
   #+BEGIN_SRC emacs-lisp
     (use-package tramp
       :init
       (setq tramp-default-method "ssh")
       :config
       ;; Allow to use: /sudo:user@host:/path/to/file
       (add-to-list 'tramp-default-proxies-alist
                    '(".*" "\\`.+\\'" "/ssh:%h:")))

     (use-package google-translate
       :ensure t
       :defer t
       :init
       (progn
         (use-package google-translate-default-ui)))

     (use-package jenkins
       :ensure t
       :config
       (setq jenkins-api-token private/jenkins-api-token)
       (setq jenkins-hostname private/jenkins-hostname)
       (setq jenkins-username private/jenkins-username))

     (use-package ansi-color)

     (imagemagick-register-types)

     (use-package notify :ensure t)
   #+END_SRC
* pim
** common
   #+BEGIN_SRC emacs-lisp
     (use-package bbdb-loaddefs
       :defer t
       :commands bbdb
       :init
       (use-package bbdb :ensure t)
       :config
       (progn
         (setq bbdb-change-hook 'bbdb-timestamp-hook)
         (setq bbdb-complete-name-allow-cycling t)
         (setq bbdb-completion-display-record nil)
         (setq bbdb-dwim-net-address-allow-redundancy t)
         (setq bbdb-file '"~/.database.bbdb")
         (setq bbdb-north-american-phone-numbers-p nil)
         (setq bbdb-notice-hook 'bbdb-auto-notes-hook)
         (setq bbdb-offer-save 'savenoprompt) ;'automatic
         (setq bbdb-phone-style 'nil)
         (setq bbdb-quiet-about-name-mismatches t)
         (setq bbdb-readonly-p nil)
         (setq bbdb-sounds-directory nil)
         (setq bbdb-use-alternate-names nil)
         (setq bbdb-use-pop-up nil)
         (setq bbdb/mail-auto-create-p 'bbdb-ignore-most-messages-hook)
         (setq news-reply-header-hook nil)
         (add-to-list 'file-coding-system-alist (cons "\\.bbdb"  'utf-8))
         (define-coding-system-alias 'utf-8-emacs 'utf-8) ; needed by bbdb...
         (bind-key "<tab>" 'custom/my-bbdb-tab-complete message-mode-map)
         (bind-key "C-c C-e" 'bbdb-edit-current-field bbdb-mode-map)
         (bind-key "C-c C-f d" 'bbdb-delete-current-field-or-record bbdb-mode-map)
         (bind-key "C-c C-f i" 'bbdb-insert-new-field bbdb-mode-map)
         ))

     (use-package calfw
       :ensure t
       :defer t
       :init
       (use-package calfw-ical)
       (use-package calfw-org)
       :config
       (progn
         (setq calendar-week-start-day 1) ; 0:Sunday, 1:Monday
         ;; Unicode characters
         (setq cfw:fchar-junction ?╬
               cfw:fchar-vertical-line ?║
               cfw:fchar-horizontal-line ?═
               cfw:fchar-left-junction ?╠
               cfw:fchar-right-junction ?╣
               cfw:fchar-top-junction ?╦
               cfw:fchar-top-left-corner ?╔
               cfw:fchar-top-right-corner ?╗)
         ;; Week days
         (setq calendar-day-name-array
               ["Воскресенье" "Понедельник" "Вторник" "Среда" "Четверг" "Пятница" "Суббота"])
         ;; Month
         (setq calendar-month-name-array
               ["Январь" "Февраль" "Март" "Апрель" "Май" "Июнь" "Июль" "Август" "Сентябрь"
                "Октябрь" "Ноябрь" "Декабрь"])
         (custom-set-faces
          '(cfw:face-title ((t (:foreground "#f0dfaf" :weight bold :height 2.0 :inherit variable-pitch))))
          '(cfw:face-header ((t (:foreground "#d0bf8f" :weight bold))))
          '(cfw:face-sunday ((t :foreground "#cc9393" :background "grey10" :weight bold)))
          '(cfw:face-saturday ((t :foreground "#8cd0d3" :background "grey10" :weight bold)))
          '(cfw:face-holiday ((t :background "grey10" :foreground "#8c5353" :weight bold)))
          '(cfw:face-grid ((t :foreground "DarkGrey")))
          '(cfw:face-default-content ((t :foreground "#bfebbf")))
          '(cfw:face-periods ((t :foreground "cyan")))
          '(cfw:face-day-title ((t :background "grey10")))
          '(cfw:face-default-day ((t :weight bold :inherit cfw:face-day-title)))
          '(cfw:face-annotation ((t :foreground "RosyBrown" :inherit cfw:face-day-title)))
          '(cfw:face-disable ((t :foreground "DarkGray" :inherit cfw:face-day-title)))
          '(cfw:face-today-title ((t :background "#7f9f7f" :weight bold)))
          '(cfw:face-today ((t :background: "grey10" :weight bold)))
          '(cfw:face-select ((t :background "#2f2f2f")))
          '(cfw:face-toolbar ((t :foreground "Steelblue4" :background "Steelblue4")))
          '(cfw:face-toolbar-button-off ((t :foreground "Gray10" :weight bold)))
          '(cfw:face-toolbar-button-on ((t :foreground "Gray50" :weight bold))))
         (defun custom/calfw-open-calendar ()
           (interactive)
           (cfw:open-calendar-buffer
            :contents-sources
            (list
             (cfw:org-create-source "Green")  ; orgmode source
             (cfw:ical-create-source "gcal" private/google-calendar-url "IndianRed") ; google calendar ICS
             (cfw:ical-create-source "gcal" private/google-family-calendar-url "IndianRed"))))))

     (use-package calfw-gcal :ensure t)

     (use-package org-gcal
       :ensure t
       :config
       (progn
         (setq org-gcal-dir (at-data-dir "/org-gcal/"))
         (setq org-gcal-client-id private/org-gcal-client-id)
         (setq org-gcal-client-secret private/org-gcal-client-secret)
         (setq org-gcal-file-alist private/org-gcal-file-alist)))

     (use-package deft
       :ensure t
       :config
       (setq deft-directory (at-homedir "/deft"))
       (setq deft-extension "org")
       (setq deft-text-mode 'org-mode)
       (setq deft-use-filename-as-title t)
       (define-namespace custom/deft/
     ;;advise deft to save window config
     (defun save-windows (orig-fun &rest args)
       (setq custom/pre-deft-window-config (current-window-configuration))
       (apply orig-fun args))
     ;;function to quit a deft edit cleanly back to pre deft window
     (defun quit-deft ()
       "Save buffer, kill buffer, kill deft buffer, and restore
       window config to the way it was before deft was invoked"
       (interactive)
       (save-buffer)
       (kill-this-buffer)
       (switch-to-buffer "*Deft*")
       (kill-this-buffer)
       (when (window-configuration-p custom/pre-deft-window-config)
         (set-window-configuration custom/pre-deft-window-config)))
     )
     (advice-add 'deft :around #'custom/deft/save-windows))

     ;;TODO: clusterize various extensions
     (defhydra hydra-pim ()
       "
       BBDB                        Various
       --------------------------------------------------------
       _b_ as it is                _o_ calendar
       _c_ create                  _k_ show keys frequencies
       _u_ delete current record   _d_ deft
       _D_ quit deft
       "
       ("b" bbdb)
       ("c" bbdb-create)
       ("u" bbdb-delete-current-record)
       ("o" custom/calfw-open-calendar)
       ("k" keyfreq-show)
       ("d" deft)
       ("D" custom/deft/quit-deft)
       ("q" nil))
     (global-set-key (kbd "C-c c") 'hydra-pim/body)
   #+END_SRC
** orgmode
*** definitions
    #+BEGIN_SRC emacs-lisp
      (define-namespace custom/

      (defun org-todo-changed-hook ()
        "Remove :current: tag, when DONE"
        ;; TODO generalize
        (let ((tags (org-get-tags)))
          (when (and (equal org-state "DONE")
                     (member "current" tags))
            (org-set-tags-to (delete "current" tags)))))

      ;; Remove empty CLOCK drawers on clock out
      (defun remove-empty-drawer-on-clock-out ()
          (interactive)
          (save-excursion
              (beginning-of-line 0)
          (org-remove-empty-drawer-at "CLOCK" (point))))

      ;; Exclude DONE state tasks from refile targets
      (defun verify-refile-target ()
        "Exclude todo keywords with a done state from refile targets"
        (not (member (nth 2 (org-heading-components)) org-done-keywords)))

      (defun open-or-browse-at-point (arg)
        (interactive "P")
        (if arg
            (browse-url-at-point)
          (org-open-at-point)))

      (defadvice browse-url-at-point (before org-position-url activate)
        (when (derived-mode-p 'org-mode)
          (let ((end nil))
            (save-excursion
              (org-back-to-heading t)
              (setq end (save-excursion (outline-next-heading) (point))))
            (org-back-to-heading t)
            (re-search-forward custom/url-regexp end t))))

      ;; TODO some handle for getting 'done' tasks within particular time range
      ;; TODO some tag for those tasks not directly needed for job tasks (e.g. my own setups, ssh, etc)
      ;; TODO save done.org after refiling finished
      ;; TODO auto change status TODO --> DONE before refiling

      ;;TODO: customize "todo-only" parameter for "org-tags-view"
      (defun follow-tag-link (tag)
        "Display a list of TODO headlines with tag TAG.
        With prefix argument, also display headlines without a TODO keyword."
        (org-tags-view nil tag))              ;nil was (null current-prefix-arg) originally

      ;;TODO: use prefix arg
      (defun org-update-timestamp-with-time (&optional as-is)
        (interactive)
        (unless as-is
          (insert " "))
        (insert (format-time-string "%H:%M")))

      (use-package helm-utils)
      (defvar helm-source-org-files
        `((name . "Org files")
          (candidates . ,(helm-walk-directory (at-org-dir) :path 'full))
          (action . (lambda (candidate)
                      (find-file candidate)))))

      (defun get-org-timestamp ()
        (with-temp-buffer
          (call-interactively 'org-time-stamp-inactive)
          (buffer-string)))

      (defun strip-org-timestamp (ts)
        (let ((tslen (length ts)))
          (substring ts 1 (- tslen 4))))

      (defun jump-to-org-agenda ()
        (interactive)
        (let ((buf (get-buffer "*Org Agenda*"))
              wind)
          (if buf
              (if (setq wind (get-buffer-window buf))
                  (select-window wind)
                (if (called-interactively-p)
                    (progn
                      (select-window (display-buffer buf t t))
                      (org-fit-window-to-buffer)
                      ;; (org-agenda-redo)
                      )
                  (with-selected-window (display-buffer buf)
                    (org-fit-window-to-buffer)
                    ;; (org-agenda-redo)
                    )))
            (call-interactively 'org-agenda-list)))
        ;;(let ((buf (get-buffer "*Calendar*")))
        ;;  (unless (get-buffer-window buf)
        ;;    (org-agenda-goto-calendar)))
        )

      (defun org-use-speed-commands-for-headings-and-lists ()
        "Activate speed commands on list items too."
        (or (and (looking-at org-outline-regexp) (looking-back "^\**"))
            (save-excursion (and (looking-at (org-item-re)) (looking-back "^[ \t]*")))))

      (defvar org-journal-file "/home/octocat/org/journal.org")

      ;;TODO: develop some kind of harness to automate, for example
      ;; - run-at-time, then traverse agenda and copy appropriate headings to journal
      ;; - try to make solution with #'org-todo-changed-hook work
      (defun org-save-to-journal ()
          (interactive)
          (org-refile-to-datetree org-journal-file))

      (defun org-refile-to-datetree (&optional file cut)
        "Refile a subtree to a datetree corresponding to it's timestamp.

      The current time is used if the entry has no timestamp. If FILE
      is nil, refile in the current file."
        (interactive "f")
        (let* ((datetree-date (or (org-entry-get nil "TIMESTAMP" t)
                                  (org-read-date t nil "now")))
               (date (org-date-to-gregorian datetree-date))
               )
          (save-excursion
            (with-current-buffer (current-buffer))
              (if cut
                  (org-cut-subtree)
                (org-copy-subtree))
              (if file (find-file file))
              (org-datetree-find-date-create date)
              (org-narrow-to-subtree)
              (show-subtree)
              (org-end-of-subtree t)
              (newline)
              (goto-char (point-max))
              (org-paste-subtree 4)
              (widen)
              )))

      )
    #+END_SRC
*** setup
    #+BEGIN_SRC emacs-lisp
      (use-package icalendar)
      (use-package org-footnote)
      (use-package org-magit :ensure t)
      (use-package org-pomodoro :ensure t)

      (use-package ox-html)
      (use-package org-dashboard :ensure t)
      (use-package orgit :ensure t)
      (use-package org-bullets :ensure t)

      (use-package orglink
        :ensure t
        :config
        ;; TODO: customize orglink-activate-in-modes
        (global-orglink-mode)
        (diminish 'orglink-mode "OL"))

      (use-package org-linkany
        :ensure t)

      (defadvice org-yank (after make-yank-writeable activate)
          (let ((inhibit-read-only t))
              (remove-text-properties (region-beginning) (region-end)
                                                              '(read-only t))))

      (add-to-list 'file-coding-system-alist (cons "\\.\\(org\\|org_archive\\|/TODO\\)$"  'utf-8))

      (f-entries (at-org-dir)
                 (lambda (entry) (when (and (f-file? entry)
                                            (s-suffix? "org" entry)
                                            (file-exists-p entry))
                                   (push entry org-agenda-files)))
                 t)

                                              ;TODO: maybe do it less straightforward
      (add-to-list 'org-agenda-files (at-config-basedir "config.org"))
      (add-to-list 'org-agenda-files (at-homedir "/.stumpwm.d/todo.org"))
      (setq org-agenda-files (delete (at-org-dir "/journal.org") org-agenda-files))

      (add-to-list 'org-speed-commands-user '("x" org-todo "DONE"))
      (add-to-list 'org-speed-commands-user '("y" org-todo-yesterday "DONE"))
      (add-to-list 'org-speed-commands-user '("s" call-interactively 'org-schedule))
      (add-to-list 'org-speed-commands-user '("i" call-interactively 'org-clock-in))
      (add-to-list 'org-speed-commands-user '("o" call-interactively 'org-clock-out))
      (add-to-list 'org-speed-commands-user '("$" call-interactively 'org-archive-subtree))

      (setq calendar-date-style 'european)
      (setq org-agenda-dim-blocked-tasks 'invisible)
      (setq org-agenda-include-all-todo t)
      (setq org-agenda-repeating-timestamp-show-all nil)
      (setq org-agenda-show-all-dates t)
      (setq org-agenda-show-inherited-tags nil)
      (setq org-agenda-skip-deadline-if-done t)
      (setq org-agenda-skip-scheduled-if-done t)
      (setq org-agenda-skip-timestamp-if-done t)
      (setq org-agenda-span 'month)
      (setq org-agenda-start-on-weekday nil)
      (setq org-agenda-sticky nil)            ;otherwise agenda behaves strangely on non-stuck projects
      (setq org-agenda-tags-todo-honor-ignore-options t)
      (setq org-agenda-todo-ignore-deadlines 'all)
      (setq org-agenda-todo-ignore-scheduled 'all)
      (setq org-agenda-todo-ignore-timestamp 'past)
      (setq org-agenda-todo-ignore-with-date t)
      (setq org-agenda-todo-list-sublevels nil)
      (setq org-align-all-tags t)
      (setq org-attach-directory (at-org-dir "/org-attach-data"))
      (setq org-blank-before-new-entry '((heading) (plain-list-item . auto)))
      (setq org-clock-history-length 35)
      (setq org-clock-idle-time 3)
      (setq org-clock-in-switch-to-state "GOING")
      (setq org-clock-into-drawer "CLOCK")
      (setq org-clock-out-remove-zero-time-clocks t)
      (setq org-id-locations-file (at-data-dir "/.org-id-locations"))
      (setq org-clock-persist-file (at-data-dir "/org-clock-save.el"))
      (setq org-clock-persist t)
      (setq org-columns-default-format "%42ITEM %TODO %3Effort(E){:} %3CLOCKSUM_T(R) %SCHEDULED")
      ;; (setq org-columns-default-format "%50ITEM %12SCHEDULED %TODO %3PRIORITY %Effort{:} %TAGS")
      (setq org-confirm-elisp-link-function 'y-or-n-p)
      (setq org-ctrl-k-protect-subtree t)
      (setq org-cycle-include-plain-lists 'integrate)
      (setq org-cycle-separator-lines 0)
      (setq org-deadline-warning-days 14)
      (setq org-default-notes-file custom/org-capture-file)
      (setq org-ditaa-jar-path (at-config-basedir "resources/ditaa0_9.jar"))
      (setq org-enforce-todo-checkbox-dependencies t)
      (setq org-enforce-todo-dependencies t)  ;;TODO: try ORDERED/NOBLOCKING props : org-toggle-ordered-property
      (setq org-track-ordered-property-with-tag t)
      (setq org-extend-today-until 2)
      (setq org-fast-tag-selection-single-key 'expert)
      (setq org-fontify-done-headline t)
      (setq org-global-properties '(("STYLE_ALL" . "habit")))
      (setq org-habit-graph-column 50)
      ;; (setq org-habit-show-habits-only-for-today nil)
      (setq org-hide-leading-stars t)
      (setq org-indirect-buffer-display 'current-window)
      (setq org-insert-mode-line-in-empty-file t)
      (setq org-log-done t)
      (setq org-log-into-drawer t)
      (setq org-loop-over-headlines-in-active-region t)
      (setq org-outline-path-complete-in-steps nil)
      (setq org-refile-allow-creating-parent-nodes 'confirm)
      (setq org-refile-target-verify-function 'custom/verify-refile-target)
      (setq org-refile-targets '((org-agenda-files :maxlevel . 5) (nil :maxlevel . 5)))
      (setq org-refile-use-outline-path 'file)
      (setq org-return-follows-link t)
      (setq org-special-ctrl-a/e t)
      (setq org-special-ctrl-k t)
      (setq org-src-fontify-natively t)
      (setq org-startup-folded nil)
      (setq org-stuck-projects '("+LEVEL=1/-DONE" ("TODO" "GOING" "NEXT" "WAITING" "HOLD" "CANCELLED") nil ""))
      (setq org-tags-column -80)
      (setq org-use-property-inheritance t)
      (setq org-use-speed-commands t)
      (setq org-use-sub-superscripts nil)
      (setq org-agenda-restore-windows-after-quit t)
      (setq org-agenda-window-setup 'only-window)
      (setq org-yank-adjusted-subtrees t)
      (setq org-read-date-prefer-future 'time)
      (setq org-export-coding-system 'utf-8)
      (setq org-agenda-skip-additional-timestamps-same-entry t)
      (setq org-agenda-persistent-filter t)
      (setq appt-message-warning-time 10)
      (setq appt-display-interval 5)
      (setq org-use-effective-time t)
      (setq org-goto-max-level 10)
      (setq org-use-speed-commands 'custom/org-use-speed-commands-for-headings-and-lists)
      (setq org-agenda-inhibit-startup t)
      (setq org-agenda-use-tag-inheritance t)
      (setq org-agenda-show-log t)
      (setq org-agenda-skip-deadline-prewarning-if-scheduled 'pre-scheduled)
      (setq org-ellipsis "⤵")

      (setq org-habit-graph-column 50)
      (setq org-habit-preceding-days 10)
      (setq org-habit-following-days 4)
      (setq org-habit-show-habits-only-for-today nil)

      (setq kw-seq-common '(sequence "TODO(t)" "GOING(g!)" "NEXT(x)" "WAITING(w@/!)" "HOLD" "SOMEDAY(s@)"
                                     "|" "DONE(d!/@)" "CANCELLED(c@/!)"))
      (setq org-todo-keywords
            `(,kw-seq-common))
      (setq org-todo-keywords-for-agenda '("TODO(t)" "WAITING(w)" "HOLD(h)" "GOING(g)" "NEXT(x)"))
      (setq org-done-keywords-for-agenda '("DONE(d)" "CANCELLED(c)"))
      (setq org-agenda-time-grid
            '((daily today require-timed remove-match)
              "----------------"
              (930 1000 1200 1400 1600 1800 2000 2200 2400 2500)))
      (setq org-todo-keyword-faces
            '(("TODO" . (:foreground "red" :weight bold))
              ("WAITING" . (:foreground "orange" :weight bold))
              ("HOLD" . (:foreground "yellow" :weight bold))
              ("CANCELLED" . (:foreground "cyan" :weight bold))
              ("DONE" . (:foreground "green" :weight bold))))
      (setq org-priority-faces
            '((?A :foreground "red" :weight bold)
              (?B :foreground "#94bff3" :weight bold)
              (?C :foreground "#6f6f6f")))
      (setq org-tag-alist '(("current" . ?c)
                            ("reference" . ?f)
                            ("orgmode" . ?g)
                            ("purchase" . ?p)
                            ("master" . ?m)
                            ("ordering" . ?o)
                            ("housekeeping" . ?h)
                            ("entertainment" . ?e)
                            ("interesting" . ?i)
                            ("repair" . ?r)
                            ))
      (setq org-tags-exclude-from-inheritance '("project"))
      (setq org-agenda-custom-commands
            '(("d" . "some non-straightforward TODO statuses")
              ("dc" todo "SOMEDAY|CANCELLED|CLOSED" nil)
              ("dw" todo "WAITING|LATER" nil)
              ("dg" todo "GOING" nil)
              ("c" . "by context")
              ("cp" tags "+@personal/GOING|WAITING|TODO")
              ("cr" tags "+@project/GOING|WAITING|TODO")
              ("cj" tags "+@job/GOING|WAITING|TODO")
              ("cw" tags "+@workplace/GOING|WAITING|TODO")
              ("ct" tags "+@phonecall/WAITING|TODO")
              ("cs" tags "+@someday")
              ("cq" tags "+@quicknote")
              ("e" . "by essence")
              ;;TODO: find more handy shortcuts
              ("ec" tags "+current")
              ("ef" tags "+reference")
              ("em" tags "+master")
              ("eo" tags "+ordering")
              ("er" tags "+repair")
              ("ed" tags "+develop")
              ("ei" tags "+investigate")
              ("ee" tags "+entertainment")
              ("ey" tags "+family")
              ("eH" tags-todo "+housekeeping")
              ("eC" tags-todo "+current")
              ("eF" tags-todo "+reference")
              ("eM" tags-todo "+master")
              ("eO" tags-todo "+ordering")
              ("eR" tags-todo "+repair")
              ("eD" tags-todo "+develop")
              ("eI" tags-todo "+investigate")
              ("eE" tags-todo "+entertainment")
              ("eE" tags-todo "+entertainment")
              ("u" . "unassigned")
              ("uu" alltodo "Unscheduled TODO entries"
               ((org-agenda-skip-function
                 (lambda nil
                   (org-agenda-skip-entry-if 'scheduled 'deadline 'regexp "<[^>\n]+>")))
                (org-tags-match-list-sublevels 'indented)
                (org-agenda-sorting-strategy
                 '((agenda priority-down todo-state-up tag-up) ))
                (org-agenda-overriding-header "Unscheduled TODO entries: ")))
              ("up" alltodo "Unprioritized TODO entries"
               ((org-agenda-skip-function
                 (lambda nil
                   (org-agenda-skip-entry-if 'regexp "\\[#[ABC]]")))
                (org-tags-match-list-sublevels 'indented)
                (org-agenda-sorting-strategy
                 '((agenda time-up tag-up) ))
                ;; '(org-agenda-sorting-strategy '((agenda time-up priority-down tag-up) (todo tag-up)))
                (org-agenda-overriding-header "Unprioritized TODO entries: ")))
              ("P" . "Prioritized tasks")
              ("Pa" "Prioritized tasks A"
               ((tags-todo "+PRIORITY=\"A\"") ))
              ("Pb" "Prioritized tasks B"
               ((tags-todo "+PRIORITY=\"B\"")))
              ("Pc" "Prioritized tasks C"
               ((tags-todo "+PRIORITY=\"C\"")))
              ("S" "Scheduled tasks" agenda ""
               ((org-agenda-time-grid nil)
                (org-deadline-warning-days 32)
                (org-agenda-entry-types '(:scheduled))
                ))
              ("p" tags "+purchase")
              ("b" . "tickets")
              ("be" tags "+ticket+emacs")
              ("bs" tags "+ticket+stumpwm")
              ("jc" tags "+@job+current/GOING|HOLD")
              ))

      (setq org-capture-templates
            '(("d" "todo")
              ("dp" "personal tasks" entry (file (at-org-dir "/tasks.org")) "* TODO [#C] %? %U :@personal:")
              ("dw" "workplace tasks" entry (file (at-org-dir "/tasks.org")) "* TODO [#C] %? %U :@workplace:")
              ("dc" "phonecalls" entry (file (at-org-dir "/tasks.org")) "* TODO [#C] %? %U :@phonecall:")
              ("dy" "someday" entry (file (at-org-dir "/tasks.org")) "* %? %U :@someday:")
              ("dq" "quick notes (uncategorized)" entry (file (at-org-dir "/refile.org")) "* %? %U :@quicknote:")
              ("de" "emacs todo" entry (file+headline (at-config-basedir "config.org") "tickets") "* TODO [#C] %? %U :emacs:ticket:")
              ("ds" "stumpwm todo" entry (file (at-homedir "/.stumpwm.d/todo.org")) "* TODO [#C] %? %U :stumpwm:ticket:")
              ("t" "try")
              ("tw" "workplace try" entry (file (at-org-dir "/workspace_totry.org")) "* %? %U :@workplace:try")
              ("te" "emacs try" entry (file+headline (at-config-basedir "config.org") "to try") "* %? %U :emacs:try:")
              ("i" "sink")
              ("ip" "project ideas" entry (file (at-org-dir "/sink.org")) "* %? %U :project/idea:")
              ("ia" "newspaper articles" entry (file (at-org-dir "/sink.org")) "* %? %U :newspaper:toread:")
              ("ic" "code snippet" entry (file (at-org-dir "/sink.org"))
               "* %^{title} %^g :code_snippet:\n :PROPERTIES:\n :CREATED: %U\n :END:\n\n#+BEGIN_SRC %^{lang}\n %i%?\n#+END_SRC\n")
              ("is" "search" entry (file (at-org-dir "/sink.org")) "* %? %U :search:")
              ("l" "links" entry (file (at-org-dir "/links.org")) "* %? %U :links:send:")
              ("g" "github")
              ("gc" "common" entry (file (at-org-dir "/github.org")) "* %? %U :github:")
              ("gd" "dotfiles" entry (file (at-org-dir "/github.org")) "* %? %U :github:dotfiles:")
              ("ge" "emacs config" entry (file (at-org-dir "/github.org")) "* %? %U :github:emacs-config:")
              ("ga" "awesome config" entry (file (at-org-dir "/github.org")) "* %? %U :github:awesome-config:")
              ("gs" "stumpwm config" entry (file (at-org-dir "/github.org")) "* %? %U :github:stumpwm-config:")
              ("gl" "CL repo to review" entry (file+olp (at-org-dir "/mastering.org") "languages" "Common Lisp" "repos") "* %? %U :github:common_lisp:")
              ("g5" "Starred repos" entry (file (at-org-dir "/github.org")) "* %? %U :github:starred:")
              ("m" "mastering" entry (file+headline (at-org-dir "/mastering.org") "inbox") "* %? %U")
              ("p" "new project" entry (file (at-org-dir "/projects.org")) "* %? %U :@project:")
              ("j" "job tasks")
              ("jc" "current" entry (file (at-org-dir private/job-tasks-file)) "* TODO %? %U :@job:current:")
              ("jb" "bug" entry (file (at-org-dir private/job-tasks-file)) "* TODO %? %U :@job:bug:")
              ("jr" "reference item" entry (file (at-org-dir private/job-tasks-file)) "* %? %U :@job:reference:")
              ("jp" "project" entry (file (at-org-dir private/job-tasks-file)) "* TODO %? %U :@job:project:")
              ("l" "journal (test mode)" entry (file+datetree (at-org-dir "/journal.org")) "* %? %U")
              ))
      (setq org-list-demote-modify-bullet '(("+" . "-")
                                            ("*" . "-")
                                            ("1." . "-")
                                            ("1)" . "-")
                                            ("A)" . "-")
                                            ("B)" . "-")
                                            ("a)" . "-")
                                            ("b)" . "-")
                                            ("A." . "-")
                                            ("B." . "-")
                                            ("a." . "-")
                                            ("b." . "-")))

      (setq holiday-orthodox-holidays nil) ; Orthodox holidays to some extent
      (setq holiday-personal-holidays nil) ; personal anniversaries, etc.

      (setq holiday-other-holidays
            (append holiday-orthodox-holidays holiday-personal-holidays))

      (setq calendar-holidays
            (append holiday-other-holidays
                    holiday-solar-holidays))

      (set-face-attribute 'org-done nil :foreground "PaleGreen" :weight 'normal :strike-through t)
      (set-face-attribute 'org-headline-done nil :foreground "LightSalmon" :weight 'normal :strike-through t)

      (appt-activate t)
      (run-at-time "00:59" 3600 'org-save-all-org-buffers)
      (org-add-link-type "tag" 'custom/follow-tag-link)
      (ignore-errors (org-agenda-to-appt))
      (add-hook 'org-finalize-agenda-hook 'org-agenda-to-appt)
      (org-clock-persistence-insinuate) ;; Resume clocking tasks when emacs is restarted
      (run-at-time "06:00" 86400 '(lambda () (setq org-habit-show-habits t)))
      (run-with-idle-timer 300 t 'custom/jump-to-org-agenda)
      (set-charset-priority 'unicode)
      (turn-on-orgtbl)

      (add-hook 'org-mode-hook 'turn-on-font-lock)
      (add-hook 'org-mode-hook 'org-bullets-mode)
      (add-hook 'org-after-todo-state-change-hook 'custom/org-todo-changed-hook)
      (add-hook 'org-clock-out-hook 'custom/remove-empty-drawer-on-clock-out 'append)
      (add-hook 'org-after-refile-insert-hook 'save-buffer)

      (defhydra hydra-org-sandbox ()
        ("c" org-table-create)
        ("s" org-sparse-tree))

      (defhydra hydra-org-global (:color teal)
        "
        ^Navigation^               ^Agenda^                  ^Clock^             ^Properties^        ^Capture^
        ---------------------------------------------------------------------------------------------------------------
        _<up>_:     up heading     show _a_genda             _._ clock in        set _p_roperty      captur_e_
        _C-<down>_: next heading   _s_chedule                _,_ clock out       _d_elete property   _w_ store link
        _C-<up>_:   prev heading   dead_l_ine                cloc_k_ display                       _y_ insert link
        ace-link for _o_rg         agenda _c_olumns          _g_oto last clock
        _O_pen at point            foot_n_ote action         estimate effor_t_
        show _A_ll                 add t_i_me to timestamp   _c_ancel clock
        clock _r_eport
        po_m_odoro
        "
        ("<up>" outline-up-heading "")
        ("C-<down>" outline-next-heading "")
        ("C-<up>" outline-previous-heading "")
        ("g" org-clock-goto)
        ("p" org-set-property)
        ("d" org-delete-property)
        ("D" org-dashboard-display :color blue)
        ("s" org-schedule :color blue)
        ("l" org-deadline :color blue)
        ("." org-clock-in)
        ("," org-clock-out)
        ("t" org-clock-modify-effort-estimate)
        ("c" org-clock-cancel)
        ("r" org-clock-report)
        ("?" (org-info "Clocking commands"))
        ("k" org-clock-display)
        ("n" org-footnote-action)
        ("w" org-store-link)
        ("y" org-insert-link)
        ("Y" org-insert-link-global)
        ;;TODO: add org-open-at-point-global
        ;;TODO: add org-reveal
        ;;TODO: add org-show-todo-tree
        ("i" custom/org-update-timestamp-with-time)
        ("o" ace-link-org :color blue)
        ("O" custom/open-or-browse-at-point)
        ("e" org-capture :color blue)
        ("a" org-agenda :color blue)
        ("A" show-all)
        ("t" org-toggle-timestamp-type)
        ("m" org-pomodoro)
        ("r" (custom/with-major-mode 'org-mode (org-refile)) "refile")
        ("q" nil "cancel"))
      (global-set-key (kbd "<f7>") 'hydra-org-global/body)

      (defhydra hydra-org-movement (:color red :columns 3)
        "Org Mode Movements"
        ("n" outline-next-visible-heading "next heading")
        ("p" outline-previous-visible-heading "prev heading")
        ("N" org-forward-heading-same-level "next heading at same level")
        ("P" org-backward-heading-same-level "prev heading at same level")
        ("u" outline-up-heading "up heading")
        ("g" org-goto "goto" :exit t))
      ;;TODO: bind hydra-org-movement to a key

      (define-key org-agenda-mode-map (kbd "<f7> .") 'org-agenda-clock-in)
      (define-key org-agenda-mode-map (kbd "<f7> ,") 'org-agenda-clock-out)
      (define-key org-agenda-mode-map (kbd "<f7> o") 'ace-link-org)
      (define-key org-mode-map (kbd "M-o") 'ace-link-org)

      (define-key org-mode-map (kbd "C-'") nil)
      (define-key org-mode-map (kbd "C-c [") nil)
      (define-key org-mode-map (kbd "C-c ]") nil)
      (define-key org-mode-map (kbd "C-c C-o") nil)

      (global-set-key (kbd "C-c r o") '(lambda () ;;TODO: make hydra for such custom helm sources
                                         (interactive)
                                         (helm :sources '(custom/helm-source-org-files))))


      (org-babel-do-load-languages
       'org-babel-load-languages
       '((css . t)
         (dot . t)
         (ditaa . t)
         (emacs-lisp . t)
         (js . t)
         (latex . t)
         (org . t)
         (plantuml . t)
         (scheme . t)
         (sh . t)))
    #+END_SRC
*** try
**** 1
     #+BEGIN_SRC emacs-lisp :tangle no
       (defun my/org-capture-refile-and-jump ()
         (interactive)
         (org-capture-refile)
         (org-refile-goto-last-stored))
       (require 'org-capture)
       (bind-key "C-c C-r" 'my/org-capture-refile-and-jump org-capture-mode-map)

       (add-to-list 'org-global-properties
                                '("Effort_ALL". "0:05 0:15 0:30 1:00 2:00 3:00 4:00"))

       ;; review
       (use-package org
           :init
           (progn
               (setq org-clock-idle-time nil)
               (setq org-log-done 'time)
               (setq org-clock-continuously nil)
               (setq org-clock-persist t)
               (setq org-clock-in-switch-to-state "STARTED")
               (setq org-clock-in-resume nil)
               (setq org-show-notification-handler 'message)
               (setq org-clock-report-include-clocking-task t))
           :config
         (org-clock-persistence-insinuate))

       (add-hook 'org-clock-in-prepare-hook
                 'my/org-mode-ask-effort)

       (defun my/org-mode-ask-effort ()
         "Ask for an effort estimate when clocking in."
         (unless (org-entry-get (point) "Effort")
           (let ((effort
                  (completing-read
                   "Effort: "
                   (org-entry-get-multivalued-property (point) "Effort"))))
             (unless (equal effort "")
               (org-set-property "Effort" effort)))))

       (defun my/org-agenda-new ()
         "Create a new note or task at the current agenda item.
       Creates it at the same level as the previous task, so it's better to use
       this with to-do items than with projects or headings."
         (interactive)
         (org-agenda-switch-to)
         (org-capture 0))
       ;; New key assignment
       (define-key org-agenda-mode-map "N" 'my/org-agenda-new)

       (setq org-agenda-sorting-strategy
             '((agenda time-up priority-down tag-up effort-up category-keep)
               (todo user-defined-up todo-state-up priority-down effort-up)
               (tags user-defined-up)
               (search category-keep)))

       (defun my/org-gcal-notify (title mes)
         (message "%s - %s" title mes))
       (use-package org-gcal
         :load-path "~/elisp/org-gcal.el"
         :init (fset 'org-gcal-notify 'my/org-gcal-notify))

       (setq org-export-with-section-numbers nil)
       (setq org-html-include-timestamps nil)
       (setq org-export-with-sub-superscripts nil)
       (setq org-export-with-toc nil)
       (setq org-html-toplevel-hlevel 2)
       (setq org-export-htmlize-output-type 'css)

       (if (string= system-name "webdev")
               (setq my/emacs-notes-directory "~/code/dev/emacs-notes")
           (setq my/emacs-notes-directory "c:/sacha/code/dev/emacs-notes"))
       (setq org-publish-project-alist
                   '(("public"
                        :base-directory "c:/sacha/Dropbox/public"
                        :publishing-directory "c:/sacha/Dropbox/public"
                        :publishing-function my/org-html-publish-to-html-trustingly
                        )
                       ("sharing"
                        :base-directory "c:/sacha/Dropbox/public/sharing"
                        :publishing-directory "c:/sacha/Dropbox/public/sharing"
                        :publishing-function my/org-html-publish-to-html-trustingly
                        )
                       ("emacs-config"
                        :base-directory "~/.emacs.d"
                        :publishing-directory "~/.emacs.d"
                        :publishing-function my/org-html-publish-to-html-trustingly
                        )
                       ("book-notes"
                        :base-directory "c:/sacha/Dropbox/books"
                        :publishing-directory "c:/sacha/Dropbox/books/html"
                        :publishing-function my/org-html-publish-to-html-trustingly
                        :makeindex t)))
       (load "~/code/dev/emacs-chats/build-site.el" t)
       (load "~/code/dev/emacs-notes/build-site.el" t)

       (defun my/org-publish-maybe ()
         (interactive)
         (save-excursion
           (if (org-publish-get-project-from-filename
                        (buffer-file-name (buffer-base-buffer)) 'up)
                       (org-publish-current-file t)
                   (my/org-html-export-trustingly))))
       (bind-key "C-c C-p C-p" 'my/org-publish-maybe org-mode-map)

       (defun my/org-publish-and-browse ()
         (interactive)
         (save-buffer)
         (my/org-publish-maybe)
         (browse-url (org-export-output-file-name ".html" nil default-directory)))
       (bind-key "<apps> b" 'my/org-publish-and-browse)

       (setq org-html-checkbox-type 'unicode)
       (setq org-html-checkbox-types
                   '((unicode (on . "<span class=\"task-done\">&#x2611;</span>")
                                        (off . "<span class=\"task-todo\">&#x2610;</span>")
                                        (trans . "<span class=\"task-in-progress\">[-]</span>"))))

       (setq org-attach-store-link-p 'attached)

       (setq org-startup-with-inline-images t)

       (add-hook 'org-babel-after-execute-hook 'org-display-inline-images)

       (defun my/org-summarize-task-status ()
         "Count number of tasks by status.
       Probably should make this a dblock someday."
         (interactive)
         (let (result)
           (org-map-entries
            (lambda ()
              (let ((todo (elt (org-heading-components) 2)))
                (if todo
                    (if (assoc todo result)
                        (setcdr (assoc todo result)
                                (1+ (cdr (assoc todo result))))
                      (setq result (cons (cons todo 1) result)))))))
           (message "%s" (mapconcat (lambda (x) (format "%s: %d" (car x) (cdr x)))
                                    result "\n"))))

       (setq org-src-window-setup 'current-window)

       (defun my/copy-code-as-org-block-and-gist (beg end)
         (interactive "r")
         (let ((filename (file-name-base))
               (mode (symbol-name major-mode))
               (contents
                (if (use-region-p) (buffer-substring beg end) (buffer-string)))
               (gist (if (use-region-p) (gist-region beg end) (gist-buffer))))
           (kill-new
            (format "\n[[%s][Gist: %s]]\n#+begin_src %s\n%s\n#+end_src\n"
                    (oref (oref gist :data) :html-url) filename
                    (replace-regexp-in-string "-mode$" "" mode)
                    contents))))

       (defun my/org-archive-done-tasks ()
         "Archive finished or cancelled tasks."
         (interactive)
         (org-map-entries
          (lambda ()
            (org-archive-subtree)
            (setq org-map-continue-from (outline-previous-heading)))
          "TODO=\"DONE\"|TODO=\"CANCELLED\"" (if (org-before-first-heading-p) 'file 'tree)))

       ;;TODO: think of autosaving org files after refiling/status changes/etc

       (use-package org-fstree
         :ensure t
         :defer t
         :commands (org-fstree-apply-maybe org-fstree-show-entry-maybe)
         :idle
         (progn (add-hook 'org-ctrl-c-ctrl-c-hook 'org-fstree-apply-maybe)
                (add-hook 'org-pre-cycle-hook 'org-fstree-show-entry-maybe)))

       (use-package ox-reveal :disabled t)

       ;;TODO: bind org-store-link and org-insert-link-global
     #+END_SRC
**** 2
     #+BEGIN_SRC emacs-lisp
       (setq org-agenda-custom-commands
             ;; The " " here is the shortcut for this agenda, so `C-c a SPC`
             '((" " "Agenda"
                ((agenda "" nil)
                 ;; All items with the "REFILE" tag, everything in refile.org
                 ;; automatically gets that applied
                 (tags "REFILE"
                       ((org-agenda-overriding-header "Tasks to Refile")
                        (org-tags-match-list-sublevels nil)))
                 ;; All "INPROGRESS" todo items
                 (todo "INPROGRESS"
                       ((org-agenda-overriding-header "Current work")))
                 ;; All headings with the "support" tag
                 (tags "support/!"
                       ((org-agenda-overriding-header "Support cases")))
                 ;; All "NEESREVIEW" todo items
                 (todo "NEEDSREVIEW"
                       ((org-agenda-overriding-header "Waiting on reviews")))
                 ;; All "WAITING" items without a "support" tag
                 (tags "WAITING-support"
                       ((org-agenda-overriding-header "Waiting for something")))
                 ;; All TODO items
                 (todo "TODO"
                       ((org-agenda-overriding-header "Task list")
                        ;; sort by time, priority, and category
                        (org-agenda-sorting-strategy
                         '(time-up priority-down category-keep))))
                 ;; Everything on hold
                 (todo "HOLD"
                       ((org-agenda-overriding-header "On-hold")))
                 ;; All headings with the "recurring" tag
                 (tags "recurring/!"
                       ((org-agenda-overriding-header "Recurring"))))
                nil)))
     #+END_SRC
**** 3
     #+BEGIN_SRC emacs-lisp
       (require 'org-inlinetask)
     #+END_SRC
* major modes
  #+BEGIN_SRC emacs-lisp
    (use-package ansi-color)
    (use-package smerge-mode)

    (use-package  actionscript-mode :ensure t)
    (use-package  crontab-mode :ensure t)
    (use-package  csv-mode :ensure t)
    (use-package  fic-mode :ensure t)
    (use-package  gitignore-mode :ensure t)
    (use-package  json-mode :ensure t)
    (use-package  lua-mode :ensure t)
    (use-package  nginx-mode :ensure t)
    (use-package  rust-mode :ensure t)

    (use-package web-mode
      :ensure t
      :defer t
      :mode "\\.html?\\'"
      :config
      (progn
        (setq web-mode-enable-current-element-highlight t)
        (setq web-mode-ac-sources-alist
              '(("css" . (ac-source-css-property))
                ("html" . (ac-source-words-in-buffer ac-source-abbrev)))
              )))

    (defun custom/sh-check-finish-hook (buf msg)
      "Function, that is executed at the end of sh check"
      (when (not (string-match "finished" msg))
        (next-error 1 t)))

    (defun custom/sh-check-syntax ()
      "Check syntax of current file"
      (interactive)
      (when (string-match "^\\(ba\\|z\\)sh" (symbol-name sh-shell))
        (save-some-buffers t)
        (compilation-start (concat (symbol-name sh-shell) " -n " (buffer-file-name))
                           'sh-check-mode)))

    (defun sm-try-smerge ()
      (save-excursion
        (goto-char (point-min))
        (when (re-search-forward "^<<<<<<< " nil t)
          (smerge-mode 1))))

    (define-compilation-mode sh-check-mode "SH"
      "Mode for check sh source code."
      (set (make-local-variable 'compilation-disable-input) t)
      (set (make-local-variable 'compilation-scroll-output) nil)
      (set (make-local-variable 'compilation-finish-functions)
           (list 'custom/sh-check-finish-hook)))

    (add-hook 'shell-mode-hook 'common-hooks/prog-helpers)
    (add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
    (add-hook 'shell-mode-hook 'common-hooks/newline-hook)
    (add-hook 'find-file-hooks 'sm-try-smerge t)

    (define-key shell-mode-map (kbd "C-c l") 'custom/sh-check-syntax)
  #+END_SRC
* publishing
** setup
   #+BEGIN_SRC emacs-lisp :tangle no
     (use-package tex-site)
     (use-package preview-latex)
     (use-package cdlatex)
     (use-package bib-cite)
     (use-package whizzytex)
     (use-package auctex :ensure t)
     (use-package latex-preview-pane :ensure t)
     (use-package pdf-tools :ensure t)

     (setq-default TeX-master nil)
     (setq TeX-parse-self t)
     (setq TeX-auto-save t)
     (setq TeX-default-mode 'latex-mode)
     (setq TeX-open-quote "``")
     (setq TeX-close-quote "''")
     (setq TeX-PDF-mode t)
     (setq font-latex-title-fontify 'color)      ; this gets rid of the large fonts
     (setq font-latex-fontify-sectioning 'color) ; in sections etc
     (setq reftex-enable-partial-scans t)
     (setq reftex-save-parse-info t)
     (setq reftex-use-multiple-selection-buffers t)
     (setq-default whizzy-viewers '(("-dvi" "xdvi") ("-ps" "gv")))
     (setq ps-multibyte-buffer 'bdf-font-except-latin)

     (add-to-list 'safe-local-variable-values '(TeX-open-quote . "<<"))
     (add-to-list 'safe-local-variable-values '(TeX-close-quote . ">>"))

     (defvar ps-print-path "~/ps-print"
       "Path for ps-print output")

     (defun custom/tex-mode-hook ()
       (TeX-fold-mode 1)
       (turn-on-bib-cite)
       (setq bib-cite-use-reftex-view-crossref t))

     (add-hook 'TeX-mode-hook 'custom/tex-mode-hook)
     (add-hook 'LaTeX-mode-hook 'TeX-PDF-mode)
     (add-hook 'LaTeX-mode-hook 'custom/tex-mode-hook)
     (add-hook 'LaTeX-mode-hook 'visual-line-mode)
     (add-hook 'LaTeX-mode-hook 'flyspell-mode)
     (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
     (add-hook 'LaTeX-mode-hook 'turn-on-cdlatex)   ; with AUCTeX LaTeX mode
     (add-hook 'latex-mode-hook 'turn-on-cdlatex)   ; with Emacs latex mode
     (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
     (add-hook 'latex-mode-hook 'turn-on-reftex)


     ;;TODO: plan docstring or reorganize hydra
     (defhydra hydra-publishing ()
       ("w" whizzytex-mode)
       ("p" custom/ps-print-buffer-with-faces)
       ("P" custom/ps-print-region-with-faces)
       ("s" pdf-save-buffer-with-faces)
       ("S" pdf-save-region-with-faces)
       ("q" nil))
     (global-set-key (kbd "C-c n") 'hydra-publishing/body)

     ;; TODO: investigate TEXT_INPUTS usage
     ;; TODO: fix encoding issues (questions marks instead of russian letters)
     ;; TODO: investigate how to deal with bright letters on bright
     ;; background being printed (in such cases letters are almost invisible)
   #+END_SRC
** linux traits
   #+BEGIN_SRC emacs-lisp :tangle (if (eq system-type 'gnu/linux) "no" "no")
     (setq TeX-output-view-style '(("^pdf$" "." "zathura %s.pdf")
                                   ("^html?$" "." "open %o")))
   #+END_SRC
** darwin traits
   #+BEGIN_SRC emacs-lisp :tangle (if (eq system-type 'darwin) "no" "no")
     (setq TeX-output-view-style '(("^pdf$" "." "open -a preview %s.pdf")
                                   ("^html?$" "." "open %o")))
   #+END_SRC
* help
  #+BEGIN_SRC emacs-lisp
    (use-package info)
    (use-package help+ :ensure t)
    (use-package discover-my-major :ensure t)

    (add-to-list 'Info-directory-list "/usr/share/info")

    (push "/usr/share/info" Info-directory-list)
    (setenv "MANPATH" "/usr/share/man:/usr/local/man")

    (defun custom/open-info (topic bname)
      "Open info on TOPIC in BNAME."
      (if (get-buffer bname)
          (progn
            (switch-to-buffer bname)
            (unless (string-match topic Info-current-file)
              (Info-goto-node (format "(%s)" topic))))
        (info topic bname)))

    (setq Info-additional-directory-list
          (list (concat home-directory "/help/info")))

    (defalias 'man 'woman) ;'Woman' offers completion better than 'man'.

    (defhydra hydra-apropos (:color blue)
      "
      Apropos
      ---------------
      _a_s it is =)
      _d_ocumentation
      _v_ariable
      _c_ommand
      _l_ibrary
      _u_ser option
      _i_nfo
      _t_ags
      valu_e_
      _m_an pages
      "
      ("a" apropos)
      ("d" apropos-documentation)
      ("v" apropos-variable)
      ("c" apropos-command)
      ("l" apropos-library)
      ("u" apropos-user-option)
      ("i" info-apropos "info")
      ("t" tags-apropos "tags")
      ("e" apropos-value)
      ("m" helm-man-woman))
    (global-set-key (kbd "C-c h") 'hydra-apropos/body)

    (defhydra hydra-info-to (:hint nil :color teal)
      "
      _o_rg _e_lisp e_m_acs _h_yperspec"
      ("o" (custom/open-info "org" "*org info*"))
      ("e" (custom/open-info "elisp" "*elisp info*"))
      ("m" (custom/open-info "emacs" "*emacs info*"))
      ("h" (custom/open-info "gcl" "*hyperspec*")))
    (global-set-key (kbd "C-c C-h") 'hydra-info-to/body)
  #+END_SRC
* staging
  #+BEGIN_SRC emacs-lisp
    (use-package sauron
      :ensure t
      ;; note, you add (setq sauron-debug t) to get errors which can debug if
      ;; there's something wrong; normally, we catch such errors, since e.g an error
      ;; in one of the hooks may cause ERC to fail (i.e., the message won't come
      ;; trough).
      :config
      (progn
        (setq sauron-separate-frame nil)
        (setq sauron-hide-mode-line t)
        (setq sauron-max-line-length 200)
        (setq sauron-modules
              '(sauron-erc sauron-dbus sauron-org sauron-notifications))
        (add-hook 'sauron-event-added-functions 'sauron-fx-notify)
        (bind-key "C-c r t" 'sauron-toggle-hide-show)
        (bind-key "C-c r c" 'sauron-clear)
        (sauron-start)
        ))

    ;; TODO: extract emacs init file name
    ;; TODO: deal with emacs server someway
    (defun custom/test-emacs-config ()
      (interactive)
      (require 'async)
      (async-start
       (lambda () (shell-command-to-string
                   "emacs --batch --eval \"
      (condition-case e
      (progn
      (load \\\"~/.emacs.d/init.el\\\")
      (message \\\"-OK-\\\"))
      (error
      (message \\\"ERROR!\\\")
      (signal (car e) (cdr e))))\""))
       `(lambda (output)
          (if (string-match "-OK-" output)
              (when ,(called-interactively-p 'any)
                (message "All is well"))
            (switch-to-buffer-other-window "*startup error*")
            (delete-region (point-min) (point-max))
            (insert output)
            (search-backward "ERROR!")))))

    (defvar custom/transform-whole-words nil)

    (defadvice upcase-word (before upcase-word-advice activate)
      (when (and (not (looking-back "\\b")) custom/transform-whole-words)
        (backward-word)))

    (defadvice downcase-word (before downcase-word-advice activate)
      (when (and (not (looking-back "\\b")) custom/transform-whole-words)
        (backward-word)))

    (defadvice capitalize-word (before capitalize-word-advice activate)
      (when (and (not (looking-back "\\b")) custom/transform-whole-words)
        (backward-word)))

    (defun fix-screwed-up-paragraphs(beg end)
      (interactive "r")
      (shell-command-on-region beg end "fmt -w2000" nil t))

    (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))

    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))

    ;; (use-package typing :disabled t
    ;;   :init
    ;;   (autoload 'typing-of-emacs "typing" nil t)
    ;;   :config
    ;;   (progn
    ;;     (setq toe-starting-length 6)
    ;;     (setq toe-starting-time-per-word 2)
    ;;     (setq toe-max-length 20)))
  #+END_SRC
* auto-modes
  #+BEGIN_SRC emacs-lisp
    (add-to-list 'auto-mode-alist '("\\.ipp?$" . c++-mode))
    (add-to-list 'auto-mode-alist '("\\.h$" . c++-mode))
    ;; (add-to-list 'auto-mode-alist '("/usr/include/qt4" . c++-mode))
    (add-to-list 'auto-mode-alist '("/usr/include/qt4/Qt" . c++-mode))
    (add-to-list 'auto-mode-alist '("/usr/include/qt4/QtNetwork" . c++-mode))
    (add-to-list 'auto-mode-alist '("/usr/include/boost" . c++-mode))
    (add-to-list 'auto-mode-alist '("/usr/include/c++/4.3" . c++-mode))

    (add-to-list 'auto-mode-alist '("CMakeLists\\.txt\\'" . cmake-mode))
    (add-to-list 'auto-mode-alist '("\\.cmake\\'" . cmake-mode))

    (add-to-list 'auto-mode-alist '("\\.dsl$" . scheme-mode))
    (add-to-list 'auto-mode-alist '("\\.scm$" . scheme-mode))

    ;; ;; JavaScript
    (add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))
    (add-to-list 'auto-mode-alist '("\\.json$" . json-mode))

    (add-to-list 'auto-mode-alist
                 (cons (concat "\\."
                               (regexp-opt '("xml" "xsd" "sch" "rng" "xslt" "svg" "rss" "rdf") t) "\\'")
                       'nxml-mode))

    ;; (add-to-list 'auto-mode-alist '("\\.html$" . django-html-mumamo-mode))
    (add-to-list 'auto-mode-alist '("\\.html$" . html-mode))

    ;; HTML
    (add-to-list 'auto-mode-alist '("\\.tag$" . html-mode))
    (add-to-list 'auto-mode-alist '("\\.vm$" . html-mode))

    (add-to-list 'auto-mode-alist '("\\.wl$" . emacs-lisp-mode))

    (add-to-list 'auto-mode-alist '("\\.muse$" . muse-mode))
    (add-to-list 'auto-mode-alist '("\\.tex$" . latex-mode))

    (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
    (add-to-list 'auto-mode-alist '("\\.org_archive$" . org-mode))
    (add-to-list 'auto-mode-alist '("\\.tagged\\'" . tagger-mode))

    (add-to-list 'auto-mode-alist '("\\.spec$" . rpm-spec-mode))
    (add-to-list 'auto-mode-alist '("\\.po$\\|\\.po\\." . po-mode))
    (add-to-list 'auto-mode-alist '("\\.log$" . auto-revert-mode))

    (add-to-list 'auto-mode-alist '("\\.doku?$" . simple-dokuwiki-mode))
    (add-to-list 'auto-mode-alist '("\\.properties$" . java-properties-generic-mode))

    (add-to-list 'auto-mode-alist '("\\.erl?$" . erlang-mode))
    (add-to-list 'auto-mode-alist '("\\.hrl?$" . erlang-mode))

    (add-to-list 'auto-mode-alist '("\\.hsc$" . haskell-mode))
    (add-to-list 'auto-mode-alist '("\\.[hg]s$"  . haskell-mode))
    (add-to-list 'auto-mode-alist '("\\.hi$"     . haskell-mode))
    (add-to-list 'auto-mode-alist '("\\.l[hg]s$" . literate-haskell-mode))

    (add-to-list 'auto-mode-alist '("\\.el" . emacs-lisp-mode))
    (add-to-list 'auto-mode-alist '("\\.emacs$" . emacs-lisp-mode))
    (add-to-list 'auto-mode-alist '("\\.gnus$" . emacs-lisp-mode))

    (add-to-list 'auto-mode-alist '("\\.rst$" . rst-mode))
    (add-to-list 'auto-mode-alist '("\\.rest$" . rst-mode))

    ;; CSS
    (add-to-list 'auto-mode-alist '("\\.scss$" . css-mode))

    ;; Clojure
    (autoload 'clojure-mode "clojure-mode")
    (add-to-list 'auto-mode-alist '("\\.clj$" . clojure-mode))

    ;; SVG
    (add-to-list 'auto-mode-alist '("\\.svg$" . image-mode))

    ;; Snippets
    (add-to-list 'auto-mode-alist '("yasnippet/snippets" . snippet-mode))
    (add-to-list 'auto-mode-alist '("\\.yasnippet$" . snippet-mode))

    ;; Markdown
    (add-to-list 'auto-mode-alist '("\\.markdown$" . markdown-mode))
    (add-to-list 'auto-mode-alist '("\\.md$" . markdown-mode))
    (add-to-list 'auto-mode-alist '("\\.mkd$" . markdown-mode))
    (add-to-list 'auto-mode-alist '("\\.pdc$" . markdown-mode))
    (add-to-list 'auto-mode-alist '("\\bREADME$" . markdown-mode))

    ;; Highlighting in editmsg-buffer for magit
    (add-to-list 'auto-mode-alist '("COMMIT_EDITMSG" . conf-javaprop-mode))

    (push '("<\\?xml" . nxml-mode) magic-mode-alist)

    ;; (add-to-list 'auto-mode-alist '("\\.plg$" . prolog-mode))

    (add-to-list 'auto-mode-alist '("bashrc$" . sh-mode))
    (add-to-list 'auto-mode-alist '("bash_profile$" . sh-mode))
    (add-to-list 'auto-mode-alist '("bash_aliases$" . sh-mode))
    (add-to-list 'auto-mode-alist '("bash_local$" . sh-mode))
    (add-to-list 'auto-mode-alist '("bash_completion$" . sh-mode))
    (add-to-list 'auto-mode-alist '(".powenv$" . sh-mode))

    ;; Use gdb-script-mode for files ending in .gdb
    (setq auto-mode-alist
          (cons '("\\.gdb$" . gdb-script-mode) auto-mode-alist))

    (add-to-list 'auto-mode-alist '("\\.php" . php-mode))

    (add-to-list 'auto-mode-alist '("\\.stumpwmrc\\'" . lisp-mode))

    (add-to-list 'auto-mode-alist '("cron" . crontab-mode))
    (add-to-list 'auto-mode-alist '("crontab" . crontab-mode))

    (add-to-list 'auto-mode-alist '("COMMIT" . git-commit-mode))

    (add-to-list 'auto-mode-alist '("nginx" . nginx-mode))

    (add-to-list 'auto-mode-alist '("diff" . diff-mode))

    (add-to-list 'auto-mode-alist '("\\(postgres\\|pgsql\\).*\\.[ch]\\'" . pgsql-c-mode))
    (add-to-list 'auto-mode-alist '("\\(postgres\\|pgsql\\).*\\.cc\\'" . pgsql-c-mode))
  #+END_SRC
* try
** kenobi
   #+BEGIN_SRC emacs-lisp :tangle no
     ;; https://gist.github.com/nyergler/6100112

     (add-hook 'hack-local-variables-hook 'run-local-vars-mode-hook)
     (defun run-local-vars-mode-hook ()
       "Run a hook for the major-mode after the local variables have been processed."
       (run-hooks (intern (concat (symbol-name major-mode) "-local-vars-hook"))))


     (defun detect_buffer_venv (buffer-name)
       (let ((buffer-dir (file-name-directory buffer-name)))
         (while (and (not (file-exists-p
                           (concat buffer-dir "py27/bin/activate")))
                     buffer-dir)
           (setq buffer-dir
                 (if (equal buffer-dir "/")
                     nil
                   (file-name-directory (directory-file-name buffer-dir)))))
         ;; return the buffer-dir (or nil)
         (concat buffer-dir "py27")))

     (defun detect_buffer_eggs_dirs (buffer-name)
       (let ((buffer-dir (file-name-directory buffer-name)))
         (while (and (not (file-exists-p
                           (concat buffer-dir "eggs")))
                     buffer-dir
                     )
           (setq buffer-dir
                 (if (equal buffer-dir "/")
                     nil
                   (file-name-directory (directory-file-name buffer-dir)))))
         (if buffer-dir
             (directory-files (concat buffer-dir "eggs") t ".\.egg")
           nil)))

     (setq additional_paths nil)

     (defun setup-jedi-extra-args ()
       (let ((venv (detect_buffer_venv buffer-file-name))
             (egg-dirs (detect_buffer_eggs_dirs buffer-file-name)))
         (make-local-variable 'jedi:server-args)
         (when venv (set 'jedi:server-args (list "--virtual-env" venv)))
         (when egg-dirs
           (dolist (egg egg-dirs)
             (set 'jedi:server-args (append jedi:server-args (list "--sys-path" egg))))))
       (make-local-variable 'additional_paths)
       (when additional_paths
         (dolist (path additional_paths)
           (set 'jedi:server-args (append jedi:server-args (list "--sys-path" path))))))

     (setq jedi:setup-keys t)

     (add-hook 'python-mode-local-vars-hook 'setup-jedi-extra-args)
     (add-hook 'python-mode-local-vars-hook 'jedi:setup)
   #+END_SRC
** the rest
   #+BEGIN_SRC emacs-lisp
     (define-namespace custom/

     ;;TODO: maybe make org-protocol solution instead
     (defun youtube-dl ()
       (interactive)
       (let* ((str (current-kill 0))
              (default-directory "~/Downloads")
              (proc (get-buffer-process (ansi-term "/bin/bash"))))
         (term-send-string
          proc
          (concat "cd ~/Downloads && youtube-dl " str "\n"))))

     )
   #+END_SRC
* tickets
** todo
*** TODO [#C] find the way for more declarative way to describe irc server traits (will be useful in case of multiple servers) :investigate:
*** TODO [#C] MAYBE use history rotation in jabber.el       :investigate:repair:
*** TODO [#B] redmine + emacs connectivity                         :investigate:
**** review various options
**** TODO [#B] play with org-sync and its redmine backend particularly [2014-07-01 Вт 03:06] :emacs:ticket:
     http://orgmode.org/worg/org-contrib/gsoc2012/student-projects/org-sync/backends.html#sec-2-3
     https://github.com/emacsmirror/org-sync
     http://www.youtube.com/watch?v=kbj6-j0teCY
     http://orgmode.org/worg/org-contrib/gsoc2012/student-projects/org-sync/index.html
     http://orgmode.org/worg/org-contrib/gsoc2012/student-projects/org-sync/tutorial/index.html
*** TODO [#C] w3m-emacs batch urls opening                         :investigate:
*** TODO [#C] tex: auctex: "Adding Support for Macros" chapter in documentation :review:investigate:
*** TODO [#B] some setup for autopairing + process regions (e.g. upcase) :investigate:
**** https://github.com/m2ym/autopair-el
*** TODO [#C] maybe sychronize jabber custom tools with values of jabber-el vars (e.g. jabber-chat-foreign-prompt-format, jabber-chat-local-prompt-format) :investigate:
*** TODO [#C] ERC: nick and other things highlighting                      :erc:
*** TODO [#C] ERC: modules                                                 :erc:
*** TODO [#C] add some neat snippets or custom defuns for erc commands (e.g. "/MSG user-or-channel message") :erc:
*** TODO [#C] add some kind of regexp to select-erc-buffer to exclude server buffer itself :erc:ATTACH:
    :PROPERTIES:
    :Attachments: init-erc.el
    :ID:       4990919e-a4f4-4b7c-a580-e457c4076cfe
    :END:
*** TODO [#C] maybe fix invalid args messages in magit bisect
*** TODO [#C] make custom/get-file-md5 insert hash into clipboard [2014-06-23 Пн 02:14] :emacs:ticket:
*** TODO [#B] sort python imports in elisp [2014-06-28 Сб 13:16]  :emacs:ticket:
**** https://github.com/paetzke/py-isort.el
*** TODO [#B] learn about LOGBOOK/LOG_INTO_DRAWER/org-log-into-drawer [2014-06-28 Сб 18:39] :emacs:ticket:
*** TODO [#C] maybe reimplement 'custom/projectile-ag some way without setq hack [2014-06-30 Пн 22:14] :emacs:ticket:
*** TODO [#C] emacs - associative memory [2013-04-01 Пн 18:36] :todo:chaos:idea:
    показывать множество буферов  сеткой, для ассоциации буферов и мест в коде на которых они открыты
    множество буферов задается явно, или по критериям (например - 10
    последних посещенных)
**** http://www.remem.org/
**** http://alumni.media.mit.edu/~rhodes/Papers/mnotes-iui00.html
*** TODO [#C] smart reminders - emacs [2013-04-01 Пн 18:42]    :todo:chaos:idea:
    напоминалка, всплывает при приближении к коду, где она написана,
    например TODO всплывет в отдельном буфере
*** TODO [#C] emacs - несколько локаций в коде [2013-04-01 Пн 19:08] :todo:chaos:idea:
    отслеживание нескольких локаций в коде и их состояния - продумать
    идею
*** TODO [#B] compare emmet-mode capabilities with the original zencoding [2014-07-01 Вт 03:08] :emacs:ticket:
*** TODO [#C] review and maybe fix current TeX setup [2014-07-02 Ср 23:49] :emacs:ticket:tex:
*** TODO [#C] config deployment automation [2014-07-02 Ср 23:53]  :emacs:ticket:
**** shell (not mandatory) deployment scripts (OS-aware or -agnostic)
**** el-get bootstrapping (maybe implemented already)
*** TODO [#C] review notification options for emacs, including jabber [2014-07-03 Чт 09:39] :emacs:ticket:
    http://emacs-fu.blogspot.com/2009/11/showing-pop-ups.html
*** TODO [#B] review various TAP options [2014-07-03 Чт 09:43]    :emacs:ticket:
**** http://www.emacswiki.org/emacs/thingatpt+.el [2011-01-23 Вск 00:38]
**** http://www.emacswiki.org/emacs-en/ThingAtPoint
**** FindFileAtPoint [2011-01-21 Птн 01:58]
*** TODO [#C] review and save old BBDB data (search for old bbdb file) [2014-07-03 Чт 09:53] :emacs:ticket:
*** TODO [#C] review formatting settings in various major modes [2014-07-03 Чт 09:56] :emacs:ticket:
    Ex.: https://github.com/zamotivator/emacs/blob/master/common.config and maybe others in place
*** TODO [#B] review setup for unique buffers renaming, maybe fix [2014-07-03 Чт 09:58] :emacs:ticket:
*** TODO [#C] email imap sieve setup (wl) [2014-07-03 Чт 10:00]   :emacs:ticket:
*** TODO [#B] customdef for recursive files lists (idea: particularly paths from bookmarks) [2014-07-03 Чт 13:08] :emacs:ticket:
*** TODO [#C] find out if there is a way to build temporary agenda (of some file list) [2014-07-03 Чт 16:20] :emacs:ticket:
*** TODO [#C] review googlecl usage [2014-07-03 Чт 16:33]         :emacs:ticket:
*** TODO [#B] maybe add some so-called "toprocess" org file for entries not being classified but needed to be written down immediately [2014-07-03 Чт 17:15] :emacs:ticket:
*** TODO [#C] some ways to make sqli (sql-postgres) more handy and usable [2014-07-10 Чт 20:17] :emacs:ticket:investigate:
*** TODO [#C] review foreign configs [2014-07-10 Чт 23:57]    :emacs:ticket:erc:
**** [[https://github.com/tlh/emacs-config/blob/master/tlh-erc.el][emacs-config/tlh-erc.el at master · tlh/emacs-config]]
**** [[https://github.com/mbriggs/.emacs.d/blob/master/init/init-erc.el][.emacs.d/init/init-erc.el at master · mbriggs/.emacs.d]]
**** [[https://github.com/Niluge-KiWi/dotfiles/blob/master/.emacs.d/erc.el][dotfiles/.emacs.d/erc.el at master · Niluge-KiWi/dotfiles]]
*** TODO [#B] search modes and commands that will be useful/handy to expose via discover.el [2014-07-20 Вс 04:11] :emacs:ticket:
*** TODO [#C] some case study for multiplatform config here [2014-07-21 Пн 01:08] :emacs:ticket:ATTACH:
    :PROPERTIES:
    :Attachments: tlh-system.el
    :ID:       54455088-b852-4bd1-8735-a0f0f6a68dc2
    :END:
*** TODO [#B] customdef for emailing org->html-converted data in chunks (ex: links.org) [2014-07-22 Вт 01:03] :emacs:ticket:
*** TODO [#B] make slime use ONE COMMON browser for all documentation lookups, either graphical or w3m [2014-08-21 Чт 18:09] :emacs:ticket:
*** TODO [#B] find out how to manage recentf list more straightforward [2014-08-25 Пн 15:15] :emacs:ticket:
*** TODO [#C] setup erc logging [2014-09-22 Пн 23:00]         :emacs:ticket:erc:
*** TODO [#C] process rc-dired.el [2014-09-22 Пн 23:19] :package:use:ticket:emacs:
*** TODO [#B] attach shared google calendar to clfw [2014-09-24 Ср 00:49] :emacs:ticket:
*** TODO [#C] develop some dates/anniversaries handling either using org 'holidays' machinery or some file-based solution [2014-09-28 Вс 19:46] :emacs:ticket:
**** HINT: %%(org-bbdb-anniversaries)
**** idea: plainly use org scheduling facility
**** example
     https://raw.githubusercontent.com/emacsmirror/emacswiki.org/master/ukrainian-holidays.el
*** TODO [#B] customdef: ask TODO keywords set on .org file creation (put upon #+TODO) [2014-09-30 Вт 01:39] :emacs:ticket:
*** TODO [#B] orgmode gcalendar synchronization [2014-09-30 Вт 01:52] :emacs:ticket:
*** TODO [#C] fix "Error in post-command-hook (global-hl-line-highlight): (wrong-type-argument overlayp nil)" [2014-10-28 Вт 17:39] :emacs:ticket:
*** TODO [#B] find a way to break the circle of autoload/with-eval-after-load with consequences, when customizing installed packages [2014-11-02 Вс 15:29] :emacs:ticket:
*** TODO [#C] idea: bundle packages with customizations, including el-get packages [2014-11-02 Вс 17:37] :emacs:ticket:
*** TODO [#B] review navigation activities, where helm may be appropriate [2014-11-02 Вс 21:02] :emacs:ticket:
    http://tuhdo.github.io/helm-intro.html
*** TODO [#B] find if some navigation activities can be laid upon helm (including unexplored ones) [2014-11-13 Чт 00:41] :@workplace:
*** TODO [#B] fix renaming within dired buffers [2014-11-17 Пн 23:49] :emacs:ticket:
*** TODO [#A] fix magit filenotify issue with deleted files (e.g. "cannot add watch...") [2014-12-09 Вт 13:58] :emacs:ticket:
*** TODO [#A] fix yasnippet expansion (looks like it cannot find snippets (particularly in python mode)) [2014-12-11 Чт 14:34] :emacs:ticket:
*** TODO [#B] display files of different types in dired using different colors [2014-12-22 Пн 15:22] :emacs:ticket:
*** TODO [#B] some window ruling handles, e.g.: [2014-12-22 Пн 19:14] :emacs:ticket:
    open magit commit info in another frame if exists
    rotate window splits (AFAIK there is an existing extension for it)
*** TODO [#B] bind view-lossage [2015-01-05 Пн 18:51]             :emacs:ticket:
*** TODO [#B] explore http://batsov.com/projectile/ for overlooked features [2015-01-09 Пт 22:24] :emacs:ticket:
*** TODO [#B] maybe macro for binding a couple of functions to a keybinding, using prefix arg for alternate function call [2015-01-13 Вт 13:38] :emacs:ticket:
*** TODO [#B] bind 'dired-jump [2015-01-13 Вт 13:41]              :emacs:ticket:
*** TODO [#B] try to implement org workload display - [[tag:+code_snippet][code snippets]] [2015-01-13 Вт 14:04] :emacs:ticket:orgmode:
*** TODO [#B] random orgmode code from sachac - [[tag:+code_snippet][code snippets]] [2015-01-15 Чт 23:46] :emacs:ticket:orgmode:
*** TODO [#B] more harness for ediff [2015-01-17 Сб 23:11]        :emacs:ticket:
*** TODO [#B] [[http://sachachua.com/blog/2013/08/emacs-how-i-organize-my-org-files/][Emacs: How I organize my Org files - sacha chua :: living an awesome life]] - ideas about org files organizing and layout [2015-01-18 Вс 20:46] :emacs:ticket:
*** TODO [#B] play with org-download - http://oremacs.com/2015/01/18/sprucing-up-org-download/ [2015-01-18 Вс 21:02] :emacs:ticket:
*** TODO [#B] grab some actions verbs from http://members.optusnet.com.au/~charles57/GTD/gtd_workflow.html and maybe set thems as new tags/contexts [2015-01-20 Вт 00:14] :emacs:ticket:
*** TODO [#B] think of exploiting http://orgmode.org/manual/Effort-estimates.html [2015-01-20 Вт 00:21] :emacs:ticket:
*** TODO [#B] 'multiple-cursors' do not work in orgmode [2015-01-20 Вт 16:04] :emacs:ticket:
*** TODO [#B] various tips from http://sachachua.com/blog/2007/12/clocking-time-with-emacs-org/ [2015-01-26 Пн 23:58] :emacs:ticket:
*** TODO [#B] resetup sauron [2015-02-01 Вс 21:33]                :emacs:ticket:
*** TODO [#A] arbitrary reports for orgmode timers [2015-02-01 Вс 23:45] :orgmode:emacs:ticket:
*** TODO [#B] for @journey make templates with prerequisites (as tag or in some other way) maybe automate/generalize [2015-02-01 Вс 23:47] :emacs:ticket:
*** TODO [#B] a way to eliminate duplicates within org-capture workflow [2015-02-06 Пт 13:02] :emacs:ticket:
*** TODO [#B] sync/update el-get and recipes (push custom, etc.) [2015-02-07 Сб 22:59] :emacs:ticket:
*** TODO [#B] extend [[https://github.com/wiedzmin/gmail2bbdb][wiedzmin/gmail2bbdb]] to process phone numbers too [2015-02-13 Пт 20:46] :emacs:ticket:
*** TODO [#B] починить grep ("grep: предупреждение: GREP_OPTIONS устарел; используйте псевдоним или сценарий") [2015-02-14 Сб 21:19] :emacs:ticket:
*** TODO [#B] automate dired-garbage-files-regexp population (and add .pyc there) [2015-02-14 Сб 22:53] :emacs:ticket:
*** TODO [#B] bind 'toggle-debug-on-error to some key [2015-02-14 Сб 23:59] :emacs:ticket:
*** TODO [#A] make new file templates insert EN datetimes [2015-02-15 Вс 16:27] :emacs:ticket:
*** TODO [#C] add some kind of job-related <filter/whatever> to ibuffer [2015-02-17 Вт 16:44] :emacs:ticket:
*** TODO [#C] try some erc-cmd-XXX [2015-02-19 Чт 23:59]          :emacs:ticket:
*** TODO [#B] enhance hydra for entries [2015-02-19 Чт 23:59]     :emacs:ticket:
**** introduce function and bind it on Enter fro example, which watches thing under cursor and takes appropriate action
***** for example URL --> open in browser, flycheck error --> do nothing, compiler error link --> goto source, etc.
*** TODO [#B] review file header templates and bring them to some common standard [2015-02-20 Пт 20:10] :emacs:ticket:
*** TODO [#B] leverage narrow/widen machinery more widely [2015-02-21 Сб 13:23] :emacs:ticket:
*** TODO [#C] make desktop notifocations for ERC [2015-02-24 Вт 17:25] :emacs:ticket:
*** TODO [#B] introduce some way of tracking erc status for various running servers, e.g. to not attach to some server twice [2015-02-26 Чт 23:59] :emacs:ticket:
*** TODO [#C] some customdef to turn off some major/minor mode in all open buffers [2015-02-27 Пт 16:51] :emacs:ticket:
*** TODO [#B] somwhow fix magit behaviour on deleted files/dirs (cannot add watch) [2015-03-01 Вс 23:38] :emacs:ticket:
*** TODO [#A] customdef for interoperating with autopep, for python pep8 enforcing automation [2015-03-09 Пн 23:13] :emacs:ticket:
*** TODO [#B] try to make sauron notifications using dunst instead of emacs frame popup [2015-03-11 Ср 20:14] :emacs:ticket:
*** TODO [#C] grab "make" ideas from [[http://oremacs.com/2015/03/20/managing-emacs-packages/]] [2015-03-21 Сб 22:21] :emacs:ticket:
*** TODO [#B] search the way to pull in dunst within helm workflow [2015-03-29 Вс 14:25] :emacs:ticket:
*** TODO [#C] can we display absolute path of buffer (with file name) in helm buffers list and/or elsewhere in helm relate buffers? [2015-03-30 Пн 11:10] :emacs:ticket:
*** TODO [#C] check if helm variants of grep/ag work correctly [2015-03-31 Вт 15:01] :emacs:ticket:
*** TODO [#C] review abo-abo's extensions and their dependencies [2015-04-18 Сб 11:55] :emacs:ticket:
*** TODO [#B] file bug aboutace-window: char in modeline and enlarged ones are not always displayed (investigate first) [2015-04-24 Пт 22:59] :emacs:ticket:
*** TODO [#B] magit: find a way to remove a window, previously used for commit and return to *magit-status*  [2015-04-27 Пн 12:03] :emacs:ticket:
**** 1
  (defadvice git-commit-commit (after delete-window activate)
    (delete-window))
**** 2
  (defadvice git-commit-commit (around no-kill-frame activate)
    (flet ((delete-frame (&optional FRAME FORCE) ()))
      ad-do-it))
**** https://github.com/magit/magit/issues/771
*** TODO [#B] check and fix priority-bounded custom agenda commands [2015-04-27 Пн 23:59] :emacs:ticket:
    Ex: #A command also show unprioritized entries (and so on)
*** TODO [#B] hydra for moving text, maybe via drag-stuff (think of) [2015-05-01 Пт 18:27] :emacs:ticket:
*** TODO [#B] make use of org helm source, try to use it to uniquify incoming [captured] headings [2015-05-01 Пт 18:34] :emacs:ticket:
*** TODO [#C] review [[http://kostafey.blogspot.ru/2012/10/mode-line.html]] [2015-05-03 Вс 20:37] :emacs:ticket:
*** WAITING [#A] customdef for removing common prefix from lines in region (find or implement) [2015-05-05 Вт 23:24] :emacs:ticket:ATTACH:
    :LOGBOOK:
    - State "WAITING"    from "GOING"      [2015-07-25 Сб 18:24] \\
      not crucial for now
    - State "GOING"      from "TODO"       [2015-05-12 Вт 17:27]
    :END:
    :PROPERTIES:
    :Attachments: scratch%20code
    :ID:       6bd845d5-6e2d-4b54-8752-fc3c47eab35a
    :END:
*** TODO [#C] investigate disposable macros [2015-05-06 Ср 23:57] :emacs:ticket:
*** TODO [#C] review [[http://oremacs.com/2015/01/04/dired-nohup/][Start a process from dired · (or emacs]] and choose the way of opening files externally (compare with current solution) [2015-05-06 Ср 23:59] :emacs:ticket:
*** TODO [#C] review the status the "advices" machinery has been upgraded to [2015-05-07 Чт 13:26] :emacs:ticket:
*** TODO [#A] customize org-mode scheduling in a way that scheduled timestamp will be in a near future, rather than the time when 'org-schedule was called [2015-05-07 Чт 13:52] :emacs:ticket:
*** TODO [#C] review what can be done using org-speed-commands-user [2015-05-08 Пт 23:59] :emacs:ticket:
*** TODO [#B] hydra for paredit [2015-05-09 Сб 23:59]             :emacs:ticket:
*** TODO [#A] customdef for opening some search results (ag/rgrep/etc) in other buffer side-by-side with current, vertical or horizontal [2015-05-18 Пн 20:05] :emacs:ticket:
*** TODO [#A] customdef for collecting TODO/FIXME/whatever keyword over some filetree [2015-05-22 Пт 21:27] :emacs:ticket:
*** TODO [#B] customdef to capture browser links to not-predefined locations (+org-protocol) [2015-05-25 Пн 12:47] :emacs:ticket:
*** TODO [#B] review state-of-the-art of emacs web templates field (mumamo, web-mode, etc) [2015-05-28 Чт 19:11] :emacs:ticket:
    Warning (mumamo-per-buffer-local-vars): Already 'permanent-local t: buffer-file-name
*** TODO [#A] investigate the ability of non-global hydras [2015-06-01 Пн 19:07] :emacs:ticket:
*** TODO [#A] customize smart-modeline [2015-06-02 Вт 15:01]      :emacs:ticket:
*** TODO [#C] review contexts, tags and custom agenda commands, check if they are correspond real life [2015-06-03 Ср 22:57] :emacs:ticket:
*** TODO [#B] extend sml/replacer-regexp-list [2015-06-06 Сб 23:56] :emacs:ticket:
*** TODO [#C] coerce all applicable keybindings to (kbd "...") format [2015-06-08 Пн 16:09] :emacs:ticket:
*** TODO [#B] [[http://www.emacswiki.org/emacs/TrampMode][EmacsWiki: Tramp Mode - http://www.emacswiki.org/emacs/TrampMode]] - more elaborate setup, eliminate hangups, etc [2015-06-08 Пн 21:37] :emacs:ticket:
*** TODO [#A] search for extension to export smth to google calendar [2015-06-08 Пн 21:47] :emacs:ticket:
*** TODO [#C] [[https://github.com/syl20bnr/spacemacs#configuration-layers][syl20bnr/spacemacs - https://github.com/syl20bnr/spacemacs#configuration-layers]] - borrow ideas [2015-06-09 Вт 16:15] :emacs:ticket:
*** TODO [#A] review colors of hydras and their heads [2015-06-10 Ср 22:16] :emacs:ticket:
*** TODO [#A] fix the clash of PareditEverywhere and commenting (namely M-]) in some major modes [2015-06-15 Пн 17:55] :emacs:ticket:
*** TODO [#A] review and change helm colors, especially for files/dirs listings (some are pretty unreadble) [2015-06-16 Вт 10:52] :emacs:ticket:
*** TODO [#B] fallback on isearch for "too short" phi-searches [2015-06-18 Чт 14:37] :emacs:ticket:
*** TODO [#B] maybe function for selecting among open jabber-chat buffers [2015-06-22 Пн 15:09] :emacs:ticket:
*** TODO [#B] is there any way to automatically tag entries with some function during capture process? [2015-07-03 Пт 16:00] :orgmode:emacs:ticket:
*** TODO [#C] borrow ideas from "smotitah" package [2015-07-11 Сб 17:24] :emacs:ticket:
*** TODO [#C] borrow ideas from http://github.com/kurisuwhyte/emacs-wonderland [2015-07-11 Сб 18:32] :emacs:ticket:
*** TODO [#C] fork pyimpsort and correct behaviour [2015-07-14 Вт 14:17] :emacs:ticket:
*** TODO [#C] fork py-autopep8 and see if it works correctly [2015-07-14 Вт 23:13] :emacs:ticket:
*** TODO [#C] fork python-pep8 package, check correctness and customizability [2015-07-16 Чт 12:46] :emacs:ticket:
*** TODO [#B] found the root cause of serial errors with filesystem notification [2015-07-16 Чт 12:54] :emacs:ticket:
*** TODO [#C] magit: bind blame mode and blame commit showing [2015-07-25 Сб 17:20] :emacs:ticket:
*** TODO [#B] workaround yatemplate insertion in org-agenda buffer [2015-07-25 Сб 17:23] :emacs:ticket:
*** TODO [#A] find a way to make emacs not to stuck when some dirs display with dired become deleted  [2015-07-31 Пт 19:26] :emacs:ticket:
*** TODO [#A] show magit commit buffer in side of magit log window [2015-09-06 Вс 21:48] :emacs:ticket:
*** TODO [#A] make smth like #'projectile-mark-as project' which places empty .projectile file into current default-directory [2015-10-17 Сб 19:19] :emacs:ticket:
*** TODO [#A] check if the point at the beginning of the string or not while inserting TODO-like templates with yasnippet (in all modes affected) [2015-10-22 Чт 17:52] :emacs:ticket:
*** TODO [#C] review functions in [[https://github.com/magnars/multiple-cursors.el][magnars/multiple-cursors.el - https://github.com/magnars/multiple-cursors.el]] [2015-10-26 Пн 21:55] :emacs:ticket:
*** TODO [#B] think if the way to present task/note's complexity, either using tags or in some other way with orgmode [2015-10-26 Пн 23:35] :emacs:ticket:
*** TODO [#A] try using use-package's :ensure to install from package.el archives instead of explicit packages list [2015-10-26 Пн 23:59] :emacs:ticket:
*** TODO [#A] play with Jedi's server args to finally add new paths/envs to be able to travel to appropriate venv for the particular project (+ kenobi.el) [2015-10-27 Вт 20:46] :emacs:ticket:
*** TODO [#C] play with time summarizing (creds to sachac) [2015-10-27 Вт 21:46] :emacs:ticket:ATTACH:
    :PROPERTIES:
    :Attachments: summarizing%20functions
    :ID:       722b29b5-6b12-43c9-bae9-95b4a0d15c38
    :END:
*** TODO [#B] review org-modules list and check if some of those need additional setup [2015-10-27 Вт 22:04] :emacs:ticket:
*** TODO [#B] check if zap-to-char will be useful [2015-10-27 Вт 23:04] :emacs:ticket:ATTACH:
    :PROPERTIES:
    :Attachments: zap-to-char
    :ID:       aa821abb-c782-4f5c-a042-cd141286bcfc
    :END:
*** TODO [#C] play with joining lines [2015-10-31 Сб 10:07] :emacs:ticket:ATTACH:
    :PROPERTIES:
    :Attachments: join%20lines%20hydra
    :ID:       fb9215ed-f6bd-4e0d-8546-d258726aa5be
    :END:
    http://pragmaticemacs.com/emacs/join-line-to-following-line/
*** TODO [#C] try to display projects with associated subtasks [2015-10-31 Сб 15:47] :emacs:ticket:ATTACH:
    :PROPERTIES:
    :Attachments: projects%20with%20associated%20subtasks
    :ID:       f817e7ef-41f7-4714-909e-ffe2839e331e
    :END:
*** TODO [#C] review [[http://stackoverflow.com/questions/13555385/org-mode-how-to-schedule-repeating-tasks-for-the-first-saturday-of-every-month][Org mode: How to schedule repeating tasks for the first Saturday of every month? - Stack Overflow - http://stackoverflow.com/questions/13555385/org-mode-how-to-schedule-repeating-tasks-for-the-first-saturday-of-every-month]] [2015-10-31 Сб 20:20] :emacs:ticket:
*** TODO [#B] (sachac) review capture templates internals http://pages.sachachua.com/.emacs.d/Sacha.html#text-unnumbered-80 [2015-10-31 Сб 23:59] :emacs:ticket:
*** TODO [#A] think of displaying either repeatable or consolidated full heading tree in agenda [2015-11-01 Вс 17:19] :emacs:ticket:
    SCHEDULED: <2015-11-19 Чт>
    e.g we may have scheduled heading, and therefore we want to see which org tree it belongs to (ex: which project we are working on this way)
**** context (as a grep-related notion) in various "occur"-modes (namely, orgmode)
*** DONE [#A] investigate the hang of emacs while trying to reschedule [[file:~/org/mirantis.org::*https:/review.fuel-infra.org/#/admin/projects/openstack/heat][heat fix ci]] from agenda (it works perfectly in buffer) [2015-11-05 Чт 21:13] :emacs:ticket:
    CLOSED: [2015-11-05 Чт 23:59] SCHEDULED: <2015-11-06 Пт>
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2015-11-05 Чт 23:59]
    :END:
*** DONE [#A] find out why text pasted from mentat seems to be readonly [2015-11-09 Пн 23:56] :emacs:ticket:
    CLOSED: [2015-12-10 Чт 17:19] SCHEDULED: <2015-12-10 Чт>
    :LOGBOOK:
    - State "DONE"       from "GOING"      [2015-12-10 Чт 17:19]
    - State "GOING"      from "TODO"       [2015-11-12 Чт 23:27]
    :END:
*** CANCELLED [#A] review recent orgmode customization to find out what makes org-agenda spuriously freeze emacs while trying to reschedule heading at point [2015-11-09 Пн 23:58] :emacs:ticket:
    CLOSED: [2015-12-08 Вт 20:23] SCHEDULED: <2015-12-08 Вт>
    :LOGBOOK:
    - State "CANCELLED"  from "GOING"      [2015-12-08 Вт 20:23] \\
      actually there were no customization found, affecting the bug in question
      seems there was too much outdated schedules surrounding the problem heading, but actual reason was not found
      if the bug returns, will reraise
    - State "GOING"      from "TODO"       [2015-11-13 Пт 23:43]
    :END:
*** CANCELLED [#A] investigate and maybe fix swoop breakage while there was some dir or file opened (have existent buffer) and then it was deleted [2015-11-10 Вт 18:45] :emacs:ticket:
    CLOSED: [2015-12-04 Пт 23:51] SCHEDULED: <2015-11-17 Вт>
    :LOGBOOK:
    - State "CANCELLED"  from "TODO"       [2015-12-04 Пт 23:51] \\
      cannot reproduce
    :END:
*** TODO [#B] [[http://stackoverflow.com/questions/20979918/reading-email-from-gmail-in-emacs-24][Reading email (from gmail) in emacs 24 - Stack Overflow - http://stackoverflow.com/questions/20979918/reading-email-from-gmail-in-emacs-24]] [2015-11-10 Вт 19:36] :emacs:ticket:
    SCHEDULED: <2015-11-19 Чт>
*** TODO [#C] review [[http://www.mostlymaths.net/2015/11/synctex-and-pdf-view-mode-for-emacs.html][SyncTeX and pdf-view-mode for emacs - http://www.mostlymaths.net/2015/11/synctex-and-pdf-view-mode-for-emacs.html]] [2015-11-10 Вт 20:29] :emacs:ticket:
    SCHEDULED: <2015-11-17 Вт>
*** TODO [#C] review [[https://www.reddit.com/r/emacs/comments/3r98w0/where_are_the_orglookup_functions/][Where are the org-lookup functions? : emacs - https://www.reddit.com/r/emacs/comments/3r98w0/where_are_the_orglookup_functions/]] [2015-11-12 Чт 14:32] :emacs:ticket:
    SCHEDULED: <2015-11-17 Вт>
*** DONE [#A] local refile [2015-11-15 Вс 18:15]          :orgmode:emacs:ticket:
    CLOSED: [2015-11-21 Сб 23:58] SCHEDULED: <2015-11-15 Вс>
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2015-11-21 Сб 23:58]
    :END:
*** DONE [#A] org-refile from outside org mode (namely C-u 'org-refile) [2015-11-16 Пн 23:59] :emacs:ticket:
    CLOSED: [2015-11-21 Сб 23:58] SCHEDULED: <2015-11-17 Вт>
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2015-11-21 Сб 23:58]
    :END:
*** TODO [#B] org clocking with helm interface [2015-11-22 Вс 14:47] :emacs:ticket:
*** TODO [#B] find out why refiling in the end of org-capture does not always work [2015-11-22 Вс 16:04] :emacs:ticket:
*** TODO [#B] find a way to [conditionally] turn off the popups about things under cursor (ex: Python function headers) [2015-11-24 Вт 20:29] :emacs:ticket:
    SCHEDULED: <2015-11-27 Пт>
*** DONE [#B] make DONE (and synonymous statuses) tasks go (maybe refile) to org journal [2015-11-26 Чт 15:56] :emacs:ticket:
    CLOSED: [2015-12-05 Сб 23:50] SCHEDULED: <2015-11-27 Пт>
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2015-12-05 Сб 23:50]
    :END:
*** collect and make project from all stored links about emacs + email/gmail/whatever
*** TODO [#A] find out if there is some king of timeout for non-answering repos for package.el [2015-11-28 Сб 23:03] :emacs:ticket:
** archive
   Archived entries from file /home/octocat/.emacs.d/todo.org
*** DONE rc-backups.el: move to settings                              :relocate:
    CLOSED: [2014-06-01 Вс 12:58]
    - State "DONE"       from "TODO"       [2014-06-01 Вс 12:58]
    :PROPERTIES:
    :ARCHIVE_TIME: 2014-07-06 Вс 22:55
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE [#C] rc-bookmarks.el: review additional extensions (e.g. bm, breadcrumbs, etc.) :review:
    CLOSED: [2014-06-30 Пн 18:55]
    - State "DONE"       from "TODO"       [2014-06-30 Пн 18:55]
    :PROPERTIES:
    :ARCHIVE_TIME: 2014-07-06 Вс 22:57
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE rc-completion.el: extract yasnippet customdefs                :extract:
    CLOSED: [2014-06-01 Вс 20:53]
    - State "DONE"       from "TODO"       [2014-06-01 Вс 20:53]
    :PROPERTIES:
    :ARCHIVE_TIME: 2014-07-06 Вс 22:57
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE rc-dired.el: extract dired customdefs                         :extract:
    CLOSED: [2014-06-01 Вс 21:03]
    - State "DONE"       from "TODO"       [2014-06-01 Вс 21:03]
    :PROPERTIES:
    :ARCHIVE_TIME: 2014-07-06 Вс 22:57
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE rc-editing.el: extract editing customdefs (check if we can break something) :extract:
    CLOSED: [2014-06-19 Чт 23:39]
    - State "DONE"       from "TODO"       [2014-06-19 Чт 23:39]
    :PROPERTIES:
    :ARCHIVE_TIME: 2014-07-06 Вс 22:57
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE rc-generic.el: merge into editing                            :relocate:
    CLOSED: [2014-06-01 Вс 21:12]
    - State "DONE"       from "TODO"       [2014-06-01 Вс 21:12]
    :PROPERTIES:
    :ARCHIVE_TIME: 2014-07-06 Вс 22:57
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE rc-git.el: merge into programming                            :relocate:
    CLOSED: [2014-06-19 Чт 23:46]
    - State "DONE"       from "TODO"       [2014-06-19 Чт 23:46]
    :PROPERTIES:
    :ARCHIVE_TIME: 2014-07-06 Вс 22:57
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE rc-gmail.el: merge into clients                              :relocate:
    CLOSED: [2014-06-19 Чт 23:50]
    - State "DONE"       from "TODO"       [2014-06-19 Чт 23:50]
    :PROPERTIES:
    :ARCHIVE_TIME: 2014-07-06 Вс 22:57
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE [#B] rc-info.el: MAYBE rename (rc-help.el)                     :extend:
    CLOSED: [2014-06-30 Пн 19:01]
    - State "DONE"       from "TODO"       [2014-06-30 Пн 19:01]
    :PROPERTIES:
    :ARCHIVE_TIME: 2014-07-06 Вс 22:57
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
**** MAYBE extend with help+ and other stuff alike
*** DONE rc-search.el: merge into navigate                            :relocate:
    CLOSED: [2014-06-01 Вс 21:45]
    - State "DONE"       from "TODO"       [2014-06-01 Вс 21:45]
    :PROPERTIES:
    :ARCHIVE_TIME: 2014-07-06 Вс 22:58
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE rc-prodigy.el                                                  :review:
    CLOSED: [2014-06-20 Пт 00:13]
    - State "DONE"       from "TODO"       [2014-06-20 Пт 00:13]
    :PROPERTIES:
    :ARCHIVE_TIME: 2014-07-06 Вс 22:58
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE rc-tramp.el: merge to clients                                :relocate:
    CLOSED: [2014-06-20 Пт 00:13]
    - State "DONE"       from "TODO"       [2014-06-20 Пт 00:13]
    :PROPERTIES:
    :ARCHIVE_TIME: 2014-07-06 Вс 22:58
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE rc-wincontrol.el: extract customdefs                          :extract:
    CLOSED: [2014-06-01 Вс 21:58]
    - State "DONE"       from "TODO"       [2014-06-01 Вс 21:58]
    :PROPERTIES:
    :ARCHIVE_TIME: 2014-07-06 Вс 22:58
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE completion: review template engines (tempo, yasnippet, etc.)   :review:
    CLOSED: [2014-06-23 Пн 00:56]
    - State "DONE"       from "TODO"       [2014-06-23 Пн 00:56]
    :PROPERTIES:
    :ARCHIVE_TIME: 2014-07-06 Вс 22:58
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE navigate: decentralize custom-search-keymap (e.g. to be able to define keys elsewhere) :relocate:extract:
    CLOSED: [2014-06-04 Ср 13:54]
    - State "DONE"       from "TODO"       [2014-06-04 Ср 13:54]
    :PROPERTIES:
    :ARCHIVE_TIME: 2014-07-06 Вс 22:58
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE [#A] fix keyboard layout (particularly improper quoting in russian layout) :fix:
    CLOSED: [2014-06-30 Пн 16:00]
    - State "DONE"       from "TODO"       [2014-06-30 Пн 16:00]
    :PROPERTIES:
    :ARCHIVE_TIME: 2014-07-06 Вс 22:58
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
**** HINT /etc/X11/xorg.conf.d/input.conf
*** DONE fix tramp-based sudo-find-file or change underlying implementation :fix:
    CLOSED: [2014-06-23 Пн 00:56]
    - State "DONE"       from "TODO"       [2014-06-23 Пн 00:56]
    :PROPERTIES:
    :ARCHIVE_TIME: 2014-07-06 Вс 22:58
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE think of adding mode-specific TODO snippets to yasnippet       :extend:
    CLOSED: [2014-06-19 Чт 23:42]
    - State "DONE"       from "TODO"       [2014-06-19 Чт 23:42]
    :PROPERTIES:
    :ARCHIVE_TIME: 2014-07-06 Вс 22:58
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE unset <Tab> as 'yas-expand binding                                :fix:
    CLOSED: [2014-06-11 Ср 00:56]
    - State "DONE"       from "TODO"       [2014-06-11 Ср 00:56]
    :PROPERTIES:
    :ARCHIVE_TIME: 2014-07-06 Вс 22:58
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE [#A] filter out obsolete items from totry.org                  :review:
    CLOSED: [2014-06-28 Сб 13:30]
    - State "DONE"       from "TODO"       [2014-06-28 Сб 13:30]
    :PROPERTIES:
    :ARCHIVE_TIME: 2014-07-06 Вс 22:58
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE place old emacs tickets org content here and organize          :review:
    CLOSED: [2014-06-08 Вс 16:44]
    - State "DONE"       from "TODO"       [2014-06-08 Вс 16:44]
    :PROPERTIES:
    :ARCHIVE_TIME: 2014-07-06 Вс 22:58
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE [#A] orgmode url opening [2011-04-15 Птн 03:28] 	       :emacs:ticket:orgmode
    CLOSED: [2014-06-30 Пн 19:36]
    - State "DONE"       from "TODO"       [2014-06-30 Пн 19:36]
      substituted by 'browse-url-at-point
    :PROPERTIES:
    :ARCHIVE_TIME: 2014-07-06 Вс 22:58
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
    При открытии url с помощью C-c C-o (org-open-at-point)
    UTF8-escaped адреса открываются некорректно
    Пример: http://ru.wikipedia.org/wiki/%D1%CA%C4
*** DONE [#A] orgmode export                                               :fix:
    CLOSED: [2014-07-06 Вс 02:05]
    - State "DONE"       from "TODO"       [2014-07-06 Вс 02:05]
    :PROPERTIES:
    :ARCHIVE_TIME: 2014-07-06 Вс 22:58
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE MAYBE add {todo.org, totry.org} to agenda                 :investigate:
    CLOSED: [2014-06-23 Пн 00:58]
    - State "DONE"       from "TODO"       [2014-06-23 Пн 00:58]
    :PROPERTIES:
    :ARCHIVE_TIME: 2014-07-06 Вс 22:58
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE ERC: separate list of joined channels to switch       :investigate:erc:
    CLOSED: [2014-06-23 Пн 01:00]
    - State "DONE"       from "TODO"       [2014-06-23 Пн 01:00]
    :PROPERTIES:
    :ARCHIVE_TIME: 2014-07-06 Вс 22:58
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE ERC: navigate URLs as in jabber chats                             :erc:
    CLOSED: [2014-06-22 Вс 01:23]
    - State "DONE"       from "TODO"       [2014-06-22 Вс 01:23]
    :PROPERTIES:
    :ARCHIVE_TIME: 2014-07-06 Вс 22:58
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE [#A] advice projectile-ag/grep/whatever to accept prefix argument and don't insert TAP as search term
    CLOSED: [2014-06-30 Пн 20:14]
    - State "DONE"       from "TODO"       [2014-06-30 Пн 20:14]
    :PROPERTIES:
    :ARCHIVE_TIME: 2014-07-06 Вс 22:58
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE review emacs-jedi for the subject of tweaking
    CLOSED: [2014-06-23 Пн 01:00]
    - State "DONE"       from "TODO"       [2014-06-23 Пн 01:00]
    :PROPERTIES:
    :ARCHIVE_TIME: 2014-07-06 Вс 22:58
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE extension for showing md5 of file in minibuffer [2014-06-20 Пт 18:11] :emacs:ticket:
    CLOSED: [2014-06-23 Пн 01:00]
    - State "DONE"       from "TODO"       [2014-06-23 Пн 01:00]
    :PROPERTIES:
    :ARCHIVE_TIME: 2014-07-06 Вс 22:59
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE find how to invert fg/bg for git-gutter with bbatsov's zenburn
    CLOSED: [2014-06-22 Вс 01:16]
    - State "DONE"       from "TODO"       [2014-06-22 Вс 01:16]
    :PROPERTIES:
    :ARCHIVE_TIME: 2014-07-06 Вс 22:59
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE [#A] review org-agenda-custom-commands [2014-06-25 Ср 20:17] :emacs:ticket:
    CLOSED: [2014-06-28 Сб 15:08]
    - State "DONE"       from "TODO"       [2014-06-28 Сб 15:08]
    :PROPERTIES:
    :ARCHIVE_TIME: 2014-07-06 Вс 22:59
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** CANCELLED [#A] find if there is any way to mark org files as agenda [2014-06-25 Ср 21:15] :emacs:ticket:
    CLOSED: [2014-06-30 Пн 16:01]
    - State "CANCELLED"  from "TODO"       [2014-06-30 Пн 16:01] \\
      nope, it doesn't make sense
    :PROPERTIES:
    :ARCHIVE_TIME: 2014-07-06 Вс 22:59
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: CANCELLED
    :END:
*** DONE [#A] find out-of-the-box machinery for commenting state transitions in org-mode and where it may be useful if any [2014-06-25 Ср 21:07] :emacs:ticket:
    CLOSED: [2014-07-08 Вт 00:25]
    - State "DONE"       from "TODO"       [2014-07-08 Вт 00:25]
    :PROPERTIES:
    :ARCHIVE_TIME: 2014-07-08 Вт 13:21
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE [#A] make command to change task status, timestamping and refiling atomically (for plan.org/done.org) [2014-06-23 Пн 01:03] :emacs:ticket:
    CLOSED: [2014-07-08 Вт 00:56]
    - State "DONE"       from "TODO"       [2014-07-08 Вт 00:56]
    :PROPERTIES:
    :ARCHIVE_TIME: 2014-07-08 Вт 13:21
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE [#A] check for options to move to crypted credentials          :review:
    CLOSED: [2014-07-07 Пн 17:57]
    - State "DONE"       from "TODO"       [2014-07-07 Пн 17:57]
    :PROPERTIES:
    :ARCHIVE_TIME: 2014-07-08 Вт 13:21
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE [#A] check and update org-capture template for stumpwm todo [2014-07-03 Чт 17:04] :emacs:ticket:
    CLOSED: [2014-07-08 Вт 15:08]
    - State "DONE"       from "TODO"       [2014-07-08 Вт 15:08]
    :PROPERTIES:
    :ARCHIVE_TIME: 2014-07-09 Ср 23:39
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE [#A] make some harness for custom major mode automatic activation (HINT: +auto-mode-alist) [2014-07-05 Сб 22:52] :emacs:ticket:
    CLOSED: [2014-07-08 Вт 16:10]
    - State "DONE"       from "TODO"       [2014-07-08 Вт 16:10]
    :PROPERTIES:
    :ARCHIVE_TIME: 2014-07-09 Ср 23:39
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE [#A] check why calfw fails to run (maybe not loaded) [2014-07-07 Пн 16:18] :emacs:ticket:
    CLOSED: [2014-07-08 Вт 15:00]
    - State "DONE"       from "TODO"       [2014-07-08 Вт 15:00]
    :PROPERTIES:
    :ARCHIVE_TIME: 2014-07-09 Ср 23:39
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE [#A] increase detail level for 'search' org-capture template(s) (e.g. for english/other translation) [2014-07-03 Чт 17:02] :emacs:ticket:
    CLOSED: [2014-07-12 Сб 15:37]
    - State "DONE"       from "TODO"       [2014-07-12 Сб 15:37]
    :PROPERTIES:
    :ARCHIVE_TIME: 2014-07-12 Сб 15:37
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE [#A] find out how to make projectile ignore .gitignore files in project subdirs or search for a new project management extension (or try to fix it) [2014-07-05 Сб 00:52] :emacs:ticket:
    CLOSED: [2014-07-12 Сб 21:46]
    - State "DONE"       from "TODO"       [2014-07-12 Сб 21:46]
    :PROPERTIES:
    :ARCHIVE_TIME: 2014-07-12 Сб 22:16
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE [#A] fix slime installation with el-get (byte-compiling is someway broken) [2014-06-30 Пн 19:30] :emacs:ticket:
    CLOSED: [2014-07-13 Вс 00:40]
    - State "DONE"       from "TODO"       [2014-07-13 Вс 00:40]
    :PROPERTIES:
    :ARCHIVE_TIME: 2014-07-14 Пн 14:23
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE [#A] find/maybe eliminate cause of "desktop file is in use by pid..." [2014-06-30 Пн 22:13] :emacs:ticket:
    CLOSED: [2014-07-14 Пн 14:24]
    - State "DONE"       from "TODO"       [2014-07-14 Пн 14:24]
    :PROPERTIES:
    :ARCHIVE_TIME: 2014-07-14 Пн 14:24
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE [#A] some way to change python indentation more sanely than line-by-line [2014-07-02 Ср 16:16] :emacs:ticket:
    CLOSED: [2014-07-14 Пн 17:39]
    - State "DONE"       from "TODO"       [2014-07-14 Пн 17:39]
    :PROPERTIES:
    :ARCHIVE_TIME: 2014-07-14 Пн 17:39
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE [#A] search for extra 'require statements, particularly from customdefs [2014-07-07 Пн 15:12] :emacs:ticket:
    CLOSED: [2014-07-14 Пн 17:50]
    - State "DONE"       from "TODO"       [2014-07-14 Пн 17:50]
    :PROPERTIES:
    :ARCHIVE_TIME: 2014-07-14 Пн 17:50
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE [#A] find back Dimitri Fountaine's emacs customizations for postgresql development [2014-07-06 Вс 11:33] :emacs:ticket:
    CLOSED: [2014-07-14 Пн 18:56]
    - State "DONE"       from "TODO"       [2014-07-14 Пн 18:56]
    :PROPERTIES:
    :ARCHIVE_TIME: 2014-07-14 Пн 18:57
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE [#A] choose between breadcrumb and bm [2014-07-07 Пн 14:54] :emacs:ticket:bookmarks:
    CLOSED: [2014-07-14 Пн 22:15]
    - State "DONE"       from "TODO"       [2014-07-14 Пн 22:15]
    :PROPERTIES:
    :ARCHIVE_TIME: 2014-07-14 Пн 22:15
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE [#A] review slime-setup extensions [2014-07-07 Пн 16:15] :emacs:ticket:
    CLOSED: [2014-07-15 Вт 01:17]
    - State "DONE"       from "TODO"       [2014-07-15 Вт 01:17]
    :PROPERTIES:
    :ARCHIVE_TIME: 2014-07-15 Вт 01:17
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE [#A] fork breadcrumb and try to add bookmarked line displaying [2014-07-14 Пн 20:51] :emacs:ticket:
    CLOSED: [2014-07-17 Чт 22:58]
    - State "DONE"       from "TODO"       [2014-07-17 Чт 22:58]
    :PROPERTIES:
    :ARCHIVE_TIME: 2014-07-17 Чт 22:58
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
**** https://github.com/joodland/bm review references usefulness
*** DONE [#A] functionality for narrowing single sexp (e.g. list) (in case of long one) [2014-08-07 Чт 13:06] :emacs:ticket:
    CLOSED: [2014-08-15 Пт 00:57]
    - State "DONE"       from "TODO"       [2014-08-15 Пт 00:57]
    :PROPERTIES:
    :ARCHIVE_TIME: 2014-08-15 Пт 00:58
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE [#A] find out how to customize holidays in org-mode   :investigate:fix:
    CLOSED: [2014-08-15 Пт 02:01]
    - State "DONE"       from "TODO"       [2014-08-15 Пт 02:01]
    :PROPERTIES:
    :ARCHIVE_TIME: 2014-08-15 Пт 02:01
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
**** C-h v calendar-holidays
*** DONE [#C] rc-headers.el                                    :review:relocate:
    CLOSED: [2014-08-15 Пт 23:34]
    - State "DONE"       from "TODO"       [2014-08-15 Пт 23:34]
    :PROPERTIES:
    :ARCHIVE_TIME: 2014-08-15 Пт 23:34
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE [#A] advise 'browse-url-at-point to be able to automatically move point inside url on the line, if any [2014-07-01 Вт 00:28] :emacs:ticket:
    CLOSED: [2014-08-21 Чт 01:16]
    - State "DONE"       from "TODO"       [2014-08-21 Чт 01:16]
    :PROPERTIES:
    :ARCHIVE_TIME: 2014-08-21 Чт 01:22
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE [#A] maybe create bundle of functions for getting some common path (e.g. path within config root, org root, etc) [2014-07-08 Вт 13:31] :emacs:ticket:ATTACH:
    CLOSED: [2014-08-26 Вт 01:13]
    - State "DONE"       from "TODO"       [2014-08-26 Вт 01:13]
    :PROPERTIES:
    :Attachments: tlh-registers.el
    :ID:       58cb5813-f85c-4f07-a96c-c2cbc2dcdb4b
    :ARCHIVE_TIME: 2014-08-26 Вт 01:13
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE [#A] make acpid (lid.sh) eval emacs commands successfully (particularly 'emacsclient --eval "(jabber-disconnect)"') [2014-06-19 Чт 15:16] :emacs:ticket:
    CLOSED: [2014-08-29 Пт 23:27]
    - State "DONE"       from "TODO"       [2014-08-29 Пт 23:27]
    :PROPERTIES:
    :ARCHIVE_TIME: 2014-08-29 Пт 23:27
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE [#A] maybe rebind org-clock-goto and org-set-property more sanely [2014-09-22 Пн 01:37] :emacs:ticket:orgmode:
    CLOSED: [2014-09-23 Вт 14:21]
    - State "DONE"       from "TODO"       [2014-09-23 Вт 14:21]
    :PROPERTIES:
    :ARCHIVE_TIME: 2014-09-23 Вт 14:21
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE [#A] review keybindings in http://doc.norang.ca/org-mode.html#text-KeyBindings according to current needs [2014-09-22 Пн 01:40] :emacs:ticket:orgmode:
    CLOSED: [2014-09-23 Вт 14:30]
    - State "DONE"       from "TODO"       [2014-09-23 Вт 14:30]
    :PROPERTIES:
    :ARCHIVE_TIME: 2014-09-23 Вт 14:30
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE [#A] fix 'browse-url-at-point advice to fall back to org-machinery for all but URLs  [2014-07-01 Вт 02:42] :emacs:ticket:
    CLOSED: [2014-10-28 Вт 19:02]
    - State "DONE"       from "TODO"       [2014-10-28 Вт 19:02]
    :PROPERTIES:
    :ARCHIVE_TIME: 2014-10-28 Вт 19:03
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
**** HINT org-open-at-point-functions
**** org-open-at-point-functions work another way than we want, so a workaround for existing solution was introduced
*** DONE [#A] check why arrows work in helm-occur but bounded differently in emacs-swoop :investigate:
    CLOSED: [2014-11-30 Вс 23:46]
    - State "DONE"       from "TODO"       [2014-11-30 Вс 23:46]
    :PROPERTIES:
    :ARCHIVE_TIME: 2014-11-30 Вс 23:46
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE [#A] fix details displaying in dired (broken by 24.4) [2014-10-26 Вс 19:41] :emacs:ticket:
    CLOSED: [2014-11-30 Вс 23:50]
    - State "DONE"       from "TODO"       [2014-11-30 Вс 23:50]
    :PROPERTIES:
    :ARCHIVE_TIME: 2014-11-30 Вс 23:51
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE [#A] remove yandex weather display from orgmode [2014-09-24 Ср 00:49] :emacs:ticket:
    CLOSED: [2014-11-30 Вс 23:53]
    - State "DONE"       from "TODO"       [2014-11-30 Вс 23:53]
    :PROPERTIES:
    :ARCHIVE_TIME: 2014-11-30 Вс 23:53
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE [#A] make 'sudo-find-file being called using prefix argument to 'find-file [2014-09-30 Вт 01:38] :emacs:ticket:
    CLOSED: [2014-12-01 Пн 01:59]
    - State "DONE"       from "TODO"       [2014-12-01 Пн 01:59]
    :PROPERTIES:
    :ARCHIVE_TIME: 2014-12-01 Пн 01:59
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE [#A] add "(provide '<basename>) for elisp file template" [2014-10-26 Вс 19:46] :emacs:ticket:
    CLOSED: [2014-12-01 Пн 22:44]
    - State "DONE"       from "TODO"       [2014-12-01 Пн 22:44]
    :PROPERTIES:
    :ARCHIVE_TIME: 2014-12-01 Пн 22:44
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE [#C] rc-elisp.el                                               :review:
    CLOSED: [2014-12-01 Пн 23:09]
    - State "DONE"       from "TODO"       [2014-12-01 Пн 23:09]
    :PROPERTIES:
    :ARCHIVE_TIME: 2014-12-01 Пн 23:09
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE [#C] rc-haskell.el                                      :review:extend:
    CLOSED: [2014-12-01 Пн 23:10]
    - State "DONE"       from "TODO"       [2014-12-01 Пн 23:10]
    :PROPERTIES:
    :ARCHIVE_TIME: 2014-12-01 Пн 23:10
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE [#B] some hook (maybe interactive) or programmatic solution to customize new source files header (e.g. GPL|MIT|whatever) :investigate:
    CLOSED: [2014-12-01 Пн 23:12]
    - State "DONE"       from "TODO"       [2014-12-01 Пн 23:12]
    :PROPERTIES:
    :ARCHIVE_TIME: 2014-12-01 Пн 23:12
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
**** http://emacswiki.org/emacs/AutomaticFileHeaders
*** DONE [#C] w3m-emacs: setup, review, maybe view docs there, maybe customize keybindings :review:
    CLOSED: [2014-12-01 Пн 23:29]
    - State "DONE"       from "TODO"       [2014-12-01 Пн 23:29]
    :PROPERTIES:
    :ARCHIVE_TIME: 2014-12-01 Пн 23:29
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE [#C] review extensions with "workgroups"-like functionality (again)
    CLOSED: [2014-12-01 Пн 23:36]
    - State "DONE"       from "TODO"       [2014-12-01 Пн 23:36]
    :PROPERTIES:
    :ARCHIVE_TIME: 2014-12-01 Пн 23:36
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
**** https://github.com/nex3/perspective-el
**** http://www.wickeddutch.com/2014/01/03/gaining-some-perspective-in-emacs/
**** http://emacsrookie.com/2011/09/25/workspaces/
**** https://github.com/pashinin/workgroups2
**** http://www.gentei.org/~yuuji/software/windows.el
**** https://github.com/tlh/workgroups.el
**** https://github.com/nex3/perspective-el
**** http://www.emacswiki.org/emacs/workspaces.el
*** DONE [#C] fix indents cycling in haskell-mode [2014-07-01 Вт 00:45] :emacs:ticket:
    CLOSED: [2014-12-02 Вт 00:08]
    - State "DONE"       from "TODO"       [2014-12-02 Вт 00:08]
    :PROPERTIES:
    :ARCHIVE_TIME: 2014-12-02 Вт 00:08
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE [#B] some kind of fix for pep8 checkers (flycheck/etc.) (mainly flake8 config appreciation) [2014-07-02 Ср 02:01] :emacs:ticket:
    CLOSED: [2014-12-02 Вт 00:23]
    - State "DONE"       from "TODO"       [2014-12-02 Вт 00:23]
    :PROPERTIES:
    :ARCHIVE_TIME: 2014-12-02 Вт 00:23
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
**** https://bitbucket.org/jek/sandbox/src/9705f596a2a2/pycheckers
**** http://stackoverflow.com/questions/1259873/how-can-i-use-emacs-flymake-mode-for-python-with-pyflakes-and-pylint-checking-co
*** DONE [#A] add org-mastering to agenda [2014-07-03 Чт 17:00]   :emacs:ticket:
    CLOSED: [2014-08-27 Ср 15:33]
    - State "DONE"       from "TODO"       [2014-08-27 Ср 15:33]
    :PROPERTIES:
    :ARCHIVE_TIME: 2014-12-02 Вт 00:24
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE [#B] eval-after-load --> with-eval-after-load [2014-11-17 Пн 02:02] :emacs:ticket:
    CLOSED: [2014-12-02 Вт 00:52]
    - State "DONE"       from "TODO"       [2014-12-02 Вт 00:52]
    :PROPERTIES:
    :ARCHIVE_TIME: 2014-12-02 Вт 00:52
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE [#A] fix emacs-swoop [2014-12-12 Пт 00:33]               :emacs:ticket:
    CLOSED: [2014-12-12 Пт 12:24]
    - State "DONE"       from "TODO"       [2014-12-12 Пт 12:24]
    :PROPERTIES:
    :ARCHIVE_TIME: 2015-01-06 Вт 18:30
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
    extension sources was accidentally screwed
*** DONE [#A] use sauron again for orgmode agenda notifications (check any issues pending) [2015-01-11 Вс 00:02] :emacs:ticket:
    CLOSED: [2015-01-11 Вс 11:13] SCHEDULED: <2015-01-11 Вс 21:00>
    - State "DONE"       from "TODO"       [2015-01-11 Вс 11:13]
    :PROPERTIES:
    :ARCHIVE_TIME: 2015-01-11 Вс 11:13
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE [#A] make shortcuts for widely used tags [2015-01-15 Чт 23:31] :emacs:ticket:orgmode:
    CLOSED: [2015-01-18 Вс 01:24] SCHEDULED: <2015-01-17 Сб>
    - State "DONE"       from "TODO"       [2015-01-18 Вс 01:24]
    :PROPERTIES:
    :ARCHIVE_TIME: 2015-01-26 Пн 23:55
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
**** code example
     (setq org-tag-alist '(("URGENT" . ?u)
                           ("@PHONE" . ?p)
                           ("@ERRANDS" . ?e)))
*** DONE [#A] do not show headlines with inherited tags in agenda [2015-01-18 Вс 13:50] :orgmode:emacs:ticket:
    CLOSED: [2015-01-18 Вс 22:05]
    - State "DONE"       from "TODO"       [2015-01-18 Вс 22:05]
    :PROPERTIES:
    :ARCHIVE_TIME: 2015-01-26 Пн 23:55
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE [#A] automate projects capturing [2015-01-18 Вс 15:06]   :emacs:ticket:
    CLOSED: [2015-01-18 Вс 15:28] SCHEDULED: <2015-01-18 Вс>
    - State "DONE"       from "GOING"      [2015-01-18 Вс 15:28]
    CLOCK: [2015-01-18 Вс 15:26]--[2015-01-18 Вс 15:28] =>  0:02
    CLOCK: [2015-01-18 Вс 15:24]--[2015-01-18 Вс 15:26] =>  0:02
    - State "GOING"      from "TODO"       [2015-01-18 Вс 15:24]
    :PROPERTIES:
    :ARCHIVE_TIME: 2015-01-26 Пн 23:55
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE [#A] think of capturing side links when processing some infosources [2015-01-18 Вс 15:08] :orgmode:emacs:ticket:
    CLOSED: [2015-01-18 Вс 17:55] SCHEDULED: <2015-01-18 Вс>
    - State "DONE"       from "TODO"       [2015-01-18 Вс 17:55]
    :PROPERTIES:
    :ARCHIVE_TIME: 2015-01-26 Пн 23:55
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE [#A] try to switch sauron back on, for orgmode notifications [2014-12-12 Пт 00:35] :emacs:ticket:
    CLOSED: [2015-01-27 Вт 23:07]
    - State "DONE"       from "TODO"       [2015-01-27 Вт 23:07]
    :PROPERTIES:
    :ARCHIVE_TIME: 2015-02-01 Вс 22:16
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE [#A] agenda command for displaying headlines without any TODO states (and maybe without priorities) [2015-01-29 Чт 00:19] :orgmode:emacs:ticket:
    CLOSED: [2015-02-04 Ср 23:50]
  :LOGBOOK:
  - State "DONE"       from "TODO"       [2015-02-04 Ср 23:50]
  :END:
    HINT: setup stuck projects rules
    SCHEDULED: <2015-01-30 Пт>
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-02-16 Пн 00:30
  :ARCHIVE_FILE: ~/.emacs.d/todo.org
  :ARCHIVE_CATEGORY: todo
  :ARCHIVE_TODO: DONE
  :END:
*** CANCELLED [#B] increase or disable timeout for pinentry if possible [2015-02-05 Чт 19:12] :emacs:ticket:
    CLOSED: [2015-02-06 Пт 19:47] SCHEDULED: <2015-02-06 Пт>
  :LOGBOOK:
  - State "CANCELLED"  from "TODO"       [2015-02-06 Пт 19:47] \\
    Too hard to get simple
  :END:
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-02-16 Пн 00:30
  :ARCHIVE_FILE: ~/.emacs.d/todo.org
  :ARCHIVE_CATEGORY: todo
  :ARCHIVE_TODO: CANCELLED
  :END:
*** DONE [#B] find cause of "blah-blah iswitchb is obsolete" message [2015-01-11 Вс 11:40] :emacs:ticket:
    CLOSED: [2015-02-22 Вс 17:55]
  :LOGBOOK:
  - State "DONE"       from "TODO"       [2015-02-22 Вс 17:55]
  :END:
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-02-23 Пн 16:36
  :ARCHIVE_FILE: ~/.emacs.d/todo.org
  :ARCHIVE_CATEGORY: todo
  :ARCHIVE_TODO: DONE
  :END:
*** CANCELLED [#A] check trails of flymake in config [2015-03-16 Пн 12:58] :emacs:ticket:
    CLOSED: [2015-03-16 Пн 12:59] SCHEDULED: <2015-03-16 Пн>
    :LOGBOOK:
    - State "CANCELLED"  from "TODO"       [2015-03-16 Пн 12:59] \\
      there are many extensions using flymake for their own, sometimes internal, purposes
    :END:
    :PROPERTIES:
    :ARCHIVE_TIME: 2015-04-05 Вс 22:17
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: CANCELLED
    :END:
*** DONE [#A] helm source for portage [2015-04-04 Сб 12:35]       :emacs:ticket:
    CLOSED: [2015-04-05 Вс 22:15] SCHEDULED: <2015-04-04 Сб>
    :CLOCK:
    CLOCK: [2015-04-05 Вс 22:05]--[2015-04-05 Вс 22:15] =>  0:10
    :END:
    :LOGBOOK:
    - State "DONE"       from "GOING"      [2015-04-05 Вс 22:15]
    - State "GOING"      from "TODO"       [2015-04-05 Вс 22:04]
    :END:
    :PROPERTIES:
    :ARCHIVE_TIME: 2015-04-05 Вс 22:18
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE [#A] check all custom major mode hooks if they are too heavy [2014-11-03 Пн 21:02] :emacs:ticket:
    CLOSED: [2015-04-28 Вт 00:08]
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2015-04-28 Вт 00:08]
    :END:
    :PROPERTIES:
    :ARCHIVE_TIME: 2015-04-28 Вт 18:35
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE [#A] try various helm sources [2014-11-15 Сб 01:08]      :emacs:ticket:
    CLOSED: [2015-04-28 Вт 00:11]
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2015-04-28 Вт 00:11]
    :END:
    :PROPERTIES:
    :ARCHIVE_TIME: 2015-04-28 Вт 18:35
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
    helm-source-fixme (maybe setup my own, using the idea)
    helm-source-jabber-contacts
    helm-source-stumpwm-commands
    helm-source-session
    helm-source-org-headline
    helm-source-bookmark-files&dirs
    helm-source-advice
    helm-source-org-keywords
    helm-source-evaluation-result
    helm-source-bookmarks-ssh
    helm-source-bmkext-addressbook
    helm-source-bookmark-man
    helm-source-imenu
    helm-source-picklist
    helm-source-gentoo
    helm-source-ff-file-name-history
    helm-source-simple-call-tree-functions-callers
    helm-source-emacs-lisp-expectations
    helm-source-tracker-search
    helm-source-emacs-process
    helm-source-esh
    helm-source-use-flags
    helm-source-pp-bookmarks
    helm-man-woman
*** DONE [#A] compare output of project files with ido and helm (maybe helm's includes subprojects contents) [2014-11-25 Вт 01:09] :emacs:ticket:
    CLOSED: [2015-04-28 Вт 18:34]
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2015-04-28 Вт 18:34]
    :END:
    :PROPERTIES:
    :ARCHIVE_TIME: 2015-04-28 Вт 18:35
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** CANCELLED [#A] a simple customdef to place .projectile file in current dir [2014-12-28 Вс 21:44] :emacs:ticket:
    CLOSED: [2015-04-27 Пн 22:50]
    :LOGBOOK:
    - State "CANCELLED"  from "TODO"       [2015-04-27 Пн 22:50] \\
      new projectile can treat tree below current dir as a project
    :END:
    :PROPERTIES:
    :ARCHIVE_TIME: 2015-04-28 Вт 18:35
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: CANCELLED
    :END:
*** CANCELLED [#A] customdef for placing org links for dired entities [2015-01-20 Вт 16:03] :emacs:ticket:
    CLOSED: [2015-04-28 Вт 00:12]
    :LOGBOOK:
    - State "CANCELLED"  from "TODO"       [2015-04-28 Вт 00:12] \\
      org-store-link seems to do this out of the box
    :END:
    :PROPERTIES:
    :ARCHIVE_TIME: 2015-04-28 Вт 18:35
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: CANCELLED
    :END:
*** DONE [#A] insert dired path as orgmode file link someway [2015-01-26 Пн 00:44] :orgmode:emacs:ticket:
    CLOSED: [2015-04-28 Вт 00:13]
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2015-04-28 Вт 00:13]
    :END:
    :PROPERTIES:
    :ARCHIVE_TIME: 2015-04-28 Вт 18:35
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE [#A] define hydra for flycheck errors navigation [2015-02-17 Вт 19:55] :emacs:ticket:
    CLOSED: [2015-04-28 Вт 00:14]
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2015-04-28 Вт 00:14]
    :END:
    :PROPERTIES:
    :ARCHIVE_TIME: 2015-04-28 Вт 18:35
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE [#A] get rid of org indent mode everywhere [2015-02-19 Чт 23:59] :orgmode:emacs:ticket:
    CLOSED: [2015-04-28 Вт 00:14]
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2015-04-28 Вт 00:14]
    :END:
    :PROPERTIES:
    :ARCHIVE_TIME: 2015-04-28 Вт 18:35
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE [#A] perform diminishing on behalf of use-package [2015-02-22 Вс 23:48] :emacs:ticket:
    CLOSED: [2015-04-28 Вт 00:15]
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2015-04-28 Вт 00:15]
    :END:
    :PROPERTIES:
    :ARCHIVE_TIME: 2015-04-28 Вт 18:35
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** CANCELLED [#A] error running timer ... not a git repository [2015-04-21 Вт 13:58] :emacs:ticket:
    CLOSED: [2015-05-12 Вт 14:20] SCHEDULED: <2015-05-01 Пт>
    :LOGBOOK:
    - State "CANCELLED"  from "TODO"       [2015-05-12 Вт 14:20] \\
      Not enough info on this concrete issue. Similar issue was popup/auto-complete-related, so maybe fixes/workarounds are already released
    :END:
    :PROPERTIES:
    :ARCHIVE_TIME: 2015-05-12 Вт 14:21
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: CANCELLED
    :END:
*** CANCELLED [#A] change helm-find-files behaviour with respect to current dir (now off-by-1) [2015-05-01 Пт 14:07] :emacs:ticket:
    CLOSED: [2015-05-12 Вт 14:24] SCHEDULED: <2015-05-01 Пт>
    :LOGBOOK:
    - State "CANCELLED"  from "TODO"       [2015-05-12 Вт 14:24] \\
      false alarm
    :END:
    :PROPERTIES:
    :ARCHIVE_TIME: 2015-05-12 Вт 18:58
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: CANCELLED
    :END:
*** DONE [#C] http://therandymon.com/woodnotes/emacs-for-writers/node27.html try to make hydra [2015-05-02 Сб 15:21] :emacs:ticket:
    CLOSED: [2015-06-01 Пн 18:30] SCHEDULED: <2015-05-02 Сб>
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2015-06-01 Пн 18:30]
    :END:
    :PROPERTIES:
    :ARCHIVE_TIME: 2015-06-01 Пн 23:14
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE [#C] structured parenthesis editing in python mode        :investigate:
    CLOSED: [2015-06-08 Пн 15:53]
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2015-06-08 Пн 15:53]
    :END:
    :PROPERTIES:
    :ARCHIVE_TIME: 2015-06-08 Пн 15:59
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE [#B] maybe generalize (otherwise reimplement) jabber quoting for ERC :fix:investigate:erc:
    CLOSED: [2015-06-08 Пн 15:53]
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2015-06-08 Пн 15:53]
    :END:
    :PROPERTIES:
    :ARCHIVE_TIME: 2015-06-08 Пн 15:59
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE [#B] setup org refiling                            :investigate:review:
    CLOSED: [2015-06-08 Пн 15:54]
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2015-06-08 Пн 15:54]
    :END:
    :PROPERTIES:
    :ARCHIVE_TIME: 2015-06-08 Пн 15:59
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
**** наладить refile из разных org-файлов в "текущие дела" (сюда) [2013-03-31 Вс 18:50] :todo:orgmode:
**** разобраться с org-refile [2013-03-31 Вс 18:50]               :todo:orgmode:
**** разобраться как настроить targets для refile, чтобы при выборе не висело множество однотипных 'filename.org' [2013-03-31 Вс 18:49] :todo:orgmode:
**** разработать и настроить структуру refile для хранения истории выполненных задач [2013-03-31 Вс 18:49] :todo:orgmode:
*** CANCELLED [#C] Erlang setup: review and extend (from inventory or right there) :review:extend:
    CLOSED: [2015-06-08 Пн 15:55]
    :LOGBOOK:
    - State "CANCELLED"  from "TODO"       [2015-06-08 Пн 15:55] \\
      not needed / should be rethought
    :END:
    :PROPERTIES:
    :ARCHIVE_TIME: 2015-06-08 Пн 16:00
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: CANCELLED
    :END:
*** DONE [#B] find out some (maybe, persistent) way to add file to org-agenda-files :investigate:
    CLOSED: [2015-06-08 Пн 15:55]
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2015-06-08 Пн 15:55]
    :END:
    :PROPERTIES:
    :ARCHIVE_TIME: 2015-06-08 Пн 16:00
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE [#B] fix issue with strange initial encoding in org files ("c" instead of "U" in mode line, russian text as hieroglyphs) [2014-06-28 Сб 18:51] :emacs:ticket:
    CLOSED: [2015-06-08 Пн 15:56]
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2015-06-08 Пн 15:56]
    :END:
    :PROPERTIES:
    :ARCHIVE_TIME: 2015-06-08 Пн 16:00
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** CANCELLED [#C] emacs client for delicious [2014-07-01 Вт 02:40] :emacs:ticket:
    CLOSED: [2015-06-08 Пн 15:57]
    :LOGBOOK:
    - State "CANCELLED"  from "TODO"       [2015-06-08 Пн 15:57] \\
      probably better to implement it as standalone app
    :END:
    :PROPERTIES:
    :ARCHIVE_TIME: 2015-06-08 Пн 16:00
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: CANCELLED
    :END:
**** HINT resclient
*** CANCELLED [#B] find out why emacs moves between frames within dual head setup and fails to otherwise [2014-07-01 Вт 03:03] :emacs:ticket:
    CLOSED: [2015-06-08 Пн 15:58]
    :LOGBOOK:
    - State "CANCELLED"  from "TODO"       [2015-06-08 Пн 15:58] \\
      cannot reproduce / context was forwarded too much
    :END:
    :PROPERTIES:
    :ARCHIVE_TIME: 2015-06-08 Пн 16:00
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: CANCELLED
    :END:
*** DONE [#B] make magit-blame-mode stop activating while running org-capture [2015-01-11 Вс 00:00] :emacs:ticket:
    CLOSED: [2015-06-08 Пн 16:00]
    :LOGBOOK:
    - State "DONE"       from "WAITING"    [2015-06-08 Пн 16:00]
    :END:
    - State "WAITING"    from "TODO"       [2015-01-11 Вс 22:28] \\
      cannot reproduce right now
    :PROPERTIES:
    :ARCHIVE_TIME: 2015-06-08 Пн 16:00
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE [#B] try to incorporate https://github.com/Bruce-Connor/names to automate namespaces (maybe additional benefits can be found) [2014-12-11 Чт 12:38] :emacs:ticket:
    CLOSED: [2015-06-08 Пн 16:02]
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2015-06-08 Пн 16:02]
    :END:
    :PROPERTIES:
    :ARCHIVE_TIME: 2015-06-08 Пн 16:16
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** DONE [#C] search for 'local-set-key' uses and try to eliminate [2015-01-04 Вс 23:47] :emacs:ticket:
    CLOSED: [2015-06-08 Пн 16:16]
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2015-06-08 Пн 16:16]
    :END:
    :PROPERTIES:
    :ARCHIVE_TIME: 2015-06-08 Пн 16:18
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** CANCELLED [#B] find how to suppress ecb dialog for upgraded settings on activate
    CLOSED: [2015-06-08 Пн 16:22]
    :LOGBOOK:
    - State "CANCELLED"  from "TODO"       [2015-06-08 Пн 16:22] \\
      removed ecb at all
    :END:
    :PROPERTIES:
    :ARCHIVE_TIME: 2015-06-08 Пн 16:24
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: CANCELLED
    :END:
*** CANCELLED [#C] ERC: bots [2014-06-23 Пн 00:22]            :emacs:ticket:erc:
    CLOSED: [2015-06-08 Пн 16:21]
    :LOGBOOK:
    - State "CANCELLED"  from "TODO"       [2015-06-08 Пн 16:21] \\
      cannot remember initial task
    :END:
    :PROPERTIES:
    :ARCHIVE_TIME: 2015-06-08 Пн 16:24
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: CANCELLED
    :END:
*** CANCELLED [#C] reapply/reimplement portage handling code to up-to-date el-get [2014-07-01 Вт 00:51] :emacs:ticket:
    CLOSED: [2015-06-08 Пн 16:23]
    :LOGBOOK:
    - State "CANCELLED"  from "TODO"       [2015-06-08 Пн 16:23] \\
      does not make much sense at the moment. moreover, it seems the respective code was abandoned
    :END:
    :PROPERTIES:
    :ARCHIVE_TIME: 2015-06-08 Пн 16:24
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: CANCELLED
    :END:
*** CANCELLED [#C] think of some reflection layer such as bool vars for particular emacs version, etc. :investigate:
    CLOSED: [2015-06-08 Пн 16:27]
    :LOGBOOK:
    - State "CANCELLED"  from "TODO"       [2015-06-08 Пн 16:27] \\
      does not make much sense while there is only one environment exists as a workplace, maybe return to it later
    :END:
    :PROPERTIES:
    :ARCHIVE_TIME: 2015-06-08 Пн 16:31
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: CANCELLED
    :END:
*** CANCELLED [#C] maybe issue minimal config - barely initial or with extensions already being parts of emacs (e.g. ERC) :investigate:
    CLOSED: [2015-06-08 Пн 16:29]
    :LOGBOOK:
    - State "CANCELLED"  from "TODO"       [2015-06-08 Пн 16:29] \\
      cannot see if it wiil be of any usefulness, especially with custom workflow on a single workspace (some particular laptop)
    :END:
    :PROPERTIES:
    :ARCHIVE_TIME: 2015-06-08 Пн 16:31
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: CANCELLED
    :END:
*** CANCELLED [#C] MAYBE some setup above emacs registers          :investigate:
    CLOSED: [2015-06-08 Пн 17:11]
    :LOGBOOK:
    - State "CANCELLED"  from "TODO"       [2015-06-08 Пн 17:11] \\
      built-in setup seems to be sufficient
    :END:
    :PROPERTIES:
    :ARCHIVE_TIME: 2015-06-08 Пн 17:11
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: CANCELLED
    :END:
*** CANCELLED [#C] Wanderlust: fix std11 encoding problem in mail headers  :fix:
    CLOSED: [2015-06-08 Пн 17:12]
    :LOGBOOK:
    - State "CANCELLED"  from "TODO"       [2015-06-08 Пн 17:12] \\
      wanderlust is not used now / context was forwarded
    :END:
    :PROPERTIES:
    :ARCHIVE_TIME: 2015-06-08 Пн 17:14
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: CANCELLED
    :END:
*** DONE [#C] org-mode tables setup                         :investigate:review:
    CLOSED: [2015-06-08 Пн 17:14]
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2015-06-08 Пн 17:14]
    :END:
    :PROPERTIES:
    :ARCHIVE_TIME: 2015-06-08 Пн 17:14
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** CANCELLED [#C] some setup for Wanderlust (and probably org-mode integration) :investigate:review:
    CLOSED: [2015-06-08 Пн 17:15]
    :LOGBOOK:
    - State "CANCELLED"  from "TODO"       [2015-06-08 Пн 17:15] \\
      wanderlust is not used now / in case it will be used, we may resuurect old setup or create new with better understanding
    :END:
    :PROPERTIES:
    :ARCHIVE_TIME: 2015-06-08 Пн 17:16
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: CANCELLED
    :END:
*** CANCELLED [#C] check el-get setup coupling with any particular linux distro, including current (Gentoo) [2014-07-02 Ср 23:46] :emacs:ticket:el:get:
    CLOSED: [2015-06-08 Пн 17:17]
    :LOGBOOK:
    - State "CANCELLED"  from "TODO"       [2015-06-08 Пн 17:17] \\
      does not make sense for current workplace configuration/layout
    :END:
    :PROPERTIES:
    :ARCHIVE_TIME: 2015-06-08 Пн 17:18
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: CANCELLED
    :END:
*** DONE [#C] customdef framework for in-emacs strings processing (or find existing) [2014-07-03 Чт 15:29] :emacs:ticket:
    CLOSED: [2015-06-08 Пн 17:18]
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2015-06-08 Пн 17:18]
      in fact, "s" framework from magnars works reasonably well
    :END:
    :PROPERTIES:
    :ARCHIVE_TIME: 2015-06-08 Пн 17:19
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: DONE
    :END:
*** CANCELLED [#C] think of some interface wrappers between setenv/etc calls [2014-07-07 Пн 16:13] :emacs:ticket:
    CLOSED: [2015-06-08 Пн 17:20]
    :LOGBOOK:
    - State "CANCELLED"  from "TODO"       [2015-06-08 Пн 17:20] \\
      task statement is too common
    :END:
    :PROPERTIES:
    :ARCHIVE_TIME: 2015-06-08 Пн 17:21
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: CANCELLED
    :END:
*** CANCELLED [#C] find out how to open *magit-log-edit* [2014-08-13 Ср 01:08] :emacs:ticket:
    CLOSED: [2015-06-08 Пн 17:22]
    :LOGBOOK:
    - State "CANCELLED"  from "TODO"       [2015-06-08 Пн 17:22] \\
      aim for this has been lost
    :END:
    :PROPERTIES:
    :ARCHIVE_TIME: 2015-06-08 Пн 17:23
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: CANCELLED
    :END:
*** CANCELLED [#C] review custom keybindings again [2014-08-21 Чт 13:42] :emacs:ticket:
    CLOSED: [2015-06-08 Пн 17:23]
    :LOGBOOK:
    - State "CANCELLED"  from "TODO"       [2015-06-08 Пн 17:23] \\
      it is performed continuously anyway
    :END:
    :PROPERTIES:
    :ARCHIVE_TIME: 2015-06-08 Пн 17:24
    :ARCHIVE_FILE: ~/.emacs.d/todo.org
    :ARCHIVE_CATEGORY: todo
    :ARCHIVE_TODO: CANCELLED
    :END:
** DONE [#A] provide way for sift to choose whether it should use regexp parsing or not (search as is, like with "*all*" search string) [2015-12-02 Ср 17:20] :emacs:ticket:
   CLOSED: [2015-12-10 Чт 20:18] SCHEDULED: <2015-12-11 Пт>
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2015-12-10 Чт 20:18]
   :END:
** TODO [#B] get rid of explicit auto-modes declaration and move to :mode clauses in {use,req}-package [2015-12-07 Пн 19:17] :emacs:ticket:
* to try
** BBDB
*** http://bbdb.sourceforge.net/
*** http://bbdb.sourceforge.net/faq.html
*** http://bbdb.sourceforge.net/bbdb.html
*** http://sachachua.com/blog/2008/02/wicked-cool-emacs-bbdb-keeping-track-of-contact-dates/
*** http://sachachua.com/blog/2008/04/wicked-cool-emacs-bbdb-set-up-bbdb/
*** http://sachachua.com/blog/2008/04/wicked-cool-emacs-bbdb-import-csv-and-vcard-files/
*** http://emacs-fu.blogspot.com/2009/08/managing-e-mail-addresses-with-bbdb.html
*** http://www.jwz.org/bbdb/
*** http://www.emacswiki.org/emacs/BbdbImporters
*** http://www.emacswiki.org/emacs/BbdbConfiguration
*** http://www.emacswiki.org/emacs/SplitMailUsingBbdbs
*** http://rpatterson.net/software/bbdb.gmailfilter
*** http://sunsite.ualberta.ca/Documentation/Gnu/emacs-21.1/html_node/eudc_4.html
*** http://julien.danjou.info/blog/2010.html#Emacs_Google_Maps_and_BBDB
** seems useful
*** http://doc.norang.ca/org-mode.html#ToDoStateTriggers
*** http://emacsredux.com/blog/2014/03/22/a-peek-at-emacs-24-dot-4-focus-hooks/
*** http://emacsredux.com/blog/2014/08/27/a-peek-at-emacs-24-dot-4-superword-mode/ try to make a hydra
*** http://endlessparentheses.com/introducing-names-practical-namespaces-for-emacs-lisp.html
*** http://punchagan.muse-amuse.in/posts/playing-music-using-mpsyt-from-emacs.html
*** http://stackoverflow.com/questions/1054903/how-do-you-get-python-documentation-in-texinfo-info-format
*** https://github.com/Silex/elmacro
*** https://github.com/camdez/checkbox.el
*** https://github.com/jwiegley/use-package review update notes
*** https://github.com/magnars/string-edit.el
*** https://github.com/mgalgs/indent-hints-mode
*** https://github.com/terranpro/magit-gerrit
*** [[http://oremacs.com/2015/01/04/dired-nohup/][Start a process from dired · (or emacs]]
*** http://endlessparentheses.com/new-on-elpa-and-in-emacs-25-1-let-alist.html
*** http://kostafey.blogspot.ru/2012/10/mode-line.html
*** http://orgmode.org/worg/org-contrib/org-drill.html
*** http://www.emacswiki.org/emacs/Htmlize
*** http://www.emacswiki.org/emacs/VisibleMark
*** http://www.emacswiki.org/emacs/WebKit
*** https://code.google.com/p/emacs-google/wiki/googlecontacts
*** https://github.com/3b/slime-proxy
*** https://github.com/Fuco1/keyadvice.el
*** https://github.com/Malabarba/elisp-bug-hunter
*** https://github.com/abo-abo/function-args
*** https://github.com/abo-abo/latex-wrap
*** https://github.com/abo-abo/make-it-so
*** https://github.com/abo-abo/org-download
*** https://github.com/adamrt/sane-term
*** https://github.com/anler/tagedit
*** https://github.com/benma/visual-regexp-steroids.el/
*** https://github.com/capitaomorte/sly
*** https://github.com/dengste/doc-present
*** https://github.com/ecukes/ecukes
*** https://github.com/glasserc/ethan-wspace
*** https://github.com/itsjeyd/git-wip
*** https://github.com/itsjeyd/git-wip-timemachine
*** https://github.com/jamesyoungman/vimvars
*** https://github.com/jixiuf/dired-filetype-face
*** https://github.com/kai2nenobu/guide-key
*** https://github.com/kelvinh/org-page
*** https://github.com/madsdk/yasnippets-latex
*** https://github.com/magit/git-modes
*** https://github.com/magnars/change-inner.el
*** https://github.com/mickeynp/sona.el
*** https://github.com/mpenet/clojure-snippets
*** https://github.com/novoid/Memacs
*** https://github.com/novoid/lazyblorg
*** https://github.com/overtone/emacs-live
*** https://github.com/polypus74/HSnippets
*** https://github.com/purcell/ac-js2
*** https://github.com/purcell/exec-path-from-shell
*** https://github.com/purcell/helm-dictionary
*** https://github.com/purcell/ibuffer-vc
*** https://github.com/purcell/mmm-mode
*** https://github.com/purcell/string-inflection
*** https://github.com/rafl/espect
*** https://github.com/rejeep/yasnippets
*** https://github.com/rolandwalker/back-button
*** https://github.com/rolandwalker/back-button
*** https://github.com/steckerhalter/emacs-fasd
*** https://github.com/syohex/elmacro
*** https://github.com/syohex/emacs-ac-tmux-complete
*** https://github.com/syohex/emacs-emamux
*** https://github.com/syohex/emacs-helm-pydoc
*** https://github.com/syohex/emacs-quickrun
*** https://github.com/syohex/rectangle-utils
*** https://github.com/zk-phi/phi-search
*** https://gitlab.com/goobook/goobook
*** https://www.masteringemacs.org/article/discoverel-discover-emacs-context-menus
** http://www.emacswiki.org/emacs/PostgreSQL [2014-07-11 Пт 15:31]   :emacs:try:
** Dimitri Fountaine's emacs customizations for postgresql development [2014-07-14 Пн 18:57] :emacs:try:ATTACH:
   :PROPERTIES:
   :Attachments: pgsrc.el dim-pgsql.el
   :ID:       f9c53018-ca47-469a-9610-5ca08434e198
   :END:
** orgmode: todo state triggers [2014-09-23 Вт 14:54]                :emacs:try:
** auto-complete-c-headers [2014-10-05 Вс 02:09]                     :emacs:try:
** flymake-google-cpplint [2014-10-05 Вс 02:13]                      :emacs:try:
** google-c-style  [2014-10-05 Вс 02:13]                             :emacs:try:
** tabbar buffer groups [2014-11-10 Пн 00:42]                        :emacs:try:
** voice coding (search for infosources) [2014-11-12 Ср 00:46]       :emacs:try:
** org-cycle-include-plain-lists [2014-11-14 Пт 01:26]               :emacs:try:
** org-todo-state-tags-triggers [2015-01-29 Чт 00:23]        :orgmode:emacs:try:
** org-agenda-filter-preset [2015-01-31 Сб 14:00]                    :emacs:try:
** ibuffer-vc [2015-02-01 Вс 17:42]                                  :emacs:try:
** fullframe [2015-02-01 Вс 18:01]                                   :emacs:try:
** set-rectangular-region-anchor [2015-02-01 Вс 21:30]               :emacs:try:
** org-mobile [2015-02-01 Вс 21:49]                                  :emacs:try:
** org-crypt [2015-02-01 Вс 21:52]                                   :emacs:try:
** play with footnote mode [2015-02-22 Вс 23:59]                     :emacs:try:
** google-c-style [2015-05-02 Сб 18:48]                              :emacs:try:
** [[https://github.com/sshaw/git-link]] [2015-05-02 Сб 21:42]           :emacs:try:
** [[https://github.com/purcell/exec-path-from-shell]] [2015-05-03 Вс 19:25] :emacs:try:
** https://github.com/wasamasa/firestarter [2015-05-04 Пн 14:55]     :emacs:try:
** [[https://github.com/zk-phi/togetherly][zk-phi/togetherly]] [2015-05-05 Вт 23:35]                           :emacs:try:
** [[http://renard.github.io/o-blog-v2.6/index.html][O-Blog easy web site and bloging system]] [2015-05-05 Вт 23:50]     :emacs:try:
** [[http://blog.binchen.org/posts/emacs-speed-up-1000.html][Emacs speed up 1000% | Chen's blog]] [2015-05-08 Пт 22:34]          :emacs:try:
** [[https://github.com/rolandwalker/fixmee][rolandwalker/fixmee]] [2015-05-09 Сб 16:24]                         :emacs:try:
** [[https://github.com/fourier/ztree][fourier/ztree]] [2015-05-09 Сб 17:19]                               :emacs:try:
** [[https://github.com/sabof/org-bullets][sabof/org-bullets]] [2015-05-09 Сб 17:24]                           :emacs:try:
** [[https://github.com/abo-abo/hydra/wiki/Twittering][Twittering · abo-abo/hydra Wiki]] [2015-05-09 Сб 23:59]             :emacs:try:
** [[https://github.com/abo-abo/hydra/wiki/Rectangle-Operations][Rectangle Operations · abo-abo/hydra Wiki]] [2015-05-10 Вс 14:45]   :emacs:try:
** [[https://github.com/abo-abo/hydra/wiki/PDF-Tools][PDF Tools · abo-abo/hydra Wiki]] [2015-05-10 Вс 14:45]              :emacs:try:
** [[https://github.com/abo-abo/hydra/wiki/YASnippet][YASnippet · abo-abo/hydra Wiki]] [2015-05-10 Вс 14:47]              :emacs:try:
** [[https://github.com/asok/peep-dired][asok/peep-dired]] [2015-05-16 Сб 17:13]                             :emacs:try:
** [[http://www.fitzsim.org/blog/?p%3D257][EUDC Improvements | fitzsim's development log]] [2015-05-19 Вт 12:35] :emacs:try:
** [[http://batsov.com/prelude/][Prelude by bbatsov]] - borrow ideas [2015-05-19 Вт 12:45]           :emacs:try:
** [[http://ericjmritz.name/2015/06/01/firestarter-automated-testing-and-more-in-emacs/][Firestarter: Automated Testing and More in Emacs | One More Game-Dev and Programming Blog - http://ericjmritz.name/2015/06/01/firestarter-automated-testing-and-more-in-emacs/]] [2015-06-02 Вт 17:54] :emacs:try:
** [[https://github.com/cpbotha/deft-turbo][cpbotha/deft-turbo - https://github.com/cpbotha/deft-turbo]] [2015-06-02 Вт 17:57] :emacs:try:
** [[http://howardism.org/Technical/Emacs/literate-devops.html][Literate DevOps - http://howardism.org/Technical/Emacs/literate-devops.html]] [2015-06-03 Ср 16:34] :emacs:try:
** [[http://blog.binchen.org/posts/how-to-use-yasnippets-to-produce-email-templates-in-emacs.html][How to use yasnippets to produce email templates in Emacs | Chens blog - http://blog.binchen.org/posts/how-to-use-yasnippets-to-produce-email-templates-in-emacs.html]] [2015-06-04 Чт 13:31] :emacs:try:
** [[http://oremacs.com/2015/01/07/org-protocol-1/][My org-protocol setup, part 1. · (or emacs - http://oremacs.com/2015/01/07/org-protocol-1/]] [2015-06-05 Пт 23:47] :emacs:try:
** [[http://oremacs.com/2015/01/08/org-protocol-2/][My org-protocol setup, part 2. · (or emacs - http://oremacs.com/2015/01/08/org-protocol-2/]] [2015-06-05 Пт 23:48] :emacs:try:
** [[https://github.com/portante/pycscope][portante/pycscope - https://github.com/portante/pycscope]] [2015-06-08 Пн 13:58] :emacs:try:
** [[https://github.com/sdague/stacktest][sdague/stacktest - https://github.com/sdague/stacktest]] [2015-06-08 Пн 21:36] :emacs:try:
** [[https://github.com/sdague/fly-hack][sdague/fly-hack - https://github.com/sdague/fly-hack]] [2015-06-08 Пн 21:37] :emacs:try:
** [[http://www.emacswiki.org/emacs/FlySpell#toc2][EmacsWiki: Fly Spell - http://www.emacswiki.org/emacs/FlySpell#toc2]] [2015-06-08 Пн 21:37] :emacs:try:
** [[https://github.com/mgrbyte/pungi][mgrbyte/pungi - https://github.com/mgrbyte/pungi]] [2015-06-09 Вт 13:06] :emacs:try:
** [[https://github.com/gabrielelanaro/emacs-for-python/][gabrielelanaro/emacs-for-python - https://github.com/gabrielelanaro/emacs-for-python/]] - borrow ideas [2015-06-10 Ср 15:02] :emacs:try:
** [[https://github.com/abingham/traad][abingham/traad - https://github.com/abingham/traad]] 2nd try [2015-06-10 Ср 15:05] :emacs:try:
** [[https://github.com/sergey-pashaev/helm-cscope][sergey-pashaev/helm-cscope - https://github.com/sergey-pashaev/helm-cscope]] [2015-06-10 Ср 15:06] :emacs:try:
** [[https://github.com/zenozeng/yafolding.el][zenozeng/yafolding.el - https://github.com/zenozeng/yafolding.el]] [2015-06-10 Ср 15:28] :emacs:try:
** [[https://github.com/magnars/fold-this.el][magnars/fold-this.el - https://github.com/magnars/fold-this.el]] [2015-06-10 Ср 15:28] :emacs:try:
** [[http://kitchingroup.cheme.cmu.edu/blog/2014/12/20/A-new-mode-for-Python-documentation/][The Kitchin Research Group - http://kitchingroup.cheme.cmu.edu/blog/2014/12/20/A-new-mode-for-Python-documentation/]] [2015-06-10 Ср 15:43] :emacs:try:
** [[https://github.com/proofit404/anaconda-mode][proofit404/anaconda-mode - https://github.com/proofit404/anaconda-mode]] 2nd try [2015-06-10 Ср 15:43] :emacs:try:
** [[https://github.com/porterjamesj/virtualenvwrapper.el][porterjamesj/virtualenvwrapper.el - https://github.com/porterjamesj/virtualenvwrapper.el]] [2015-06-10 Ср 15:44] :emacs:try:
** [[https://github.com/jorgenschaefer/pyvenv][jorgenschaefer/pyvenv - https://github.com/jorgenschaefer/pyvenv]] [2015-06-10 Ср 15:44] :emacs:try:
** [[http://sachachua.com/blog/2015/06/adding-calculations-based-on-time-to-the-org-agenda-clock-report/][Adding calculations based on time to the Org Agenda clock report - sacha chua :: living an awesome life - http://sachachua.com/blog/2015/06/adding-calculations-based-on-time-to-the-org-agenda-clock-report/]] [2015-06-11 Чт 16:46] :emacs:try:
** [[http://endlessparentheses.com/better-compile-command.html?source%3Drss][Better compile command · Endless Parentheses - http://endlessparentheses.com/better-compile-command.html?source=rss]] [2015-06-16 Вт 11:02] :emacs:try:
** [[http://sachachua.com/blog/2015/06/providing-values-to-functions-in-org-capture-templates/][Providing values to functions in org-capture-templates - sacha chua :: living an awesome life - http://sachachua.com/blog/2015/06/providing-values-to-functions-in-org-capture-templates/]] [2015-06-18 Чт 15:30] :emacs:try:
** [[https://github.com/cemerick/piggieback][cemerick/piggieback - https://github.com/cemerick/piggieback]] [2015-06-19 Пт 15:01] :emacs:try:
** [[http://endlessparentheses.com/cider-debug-a-visual-interactive-debugger-for-clojure.html][Cider-debug, a visual, interactive, debugger for Clojure · Endless Parentheses - http://endlessparentheses.com/cider-debug-a-visual-interactive-debugger-for-clojure.html]] [2015-06-19 Пт 15:02] :emacs:try:
** [[http://sachachua.com/blog/2015/06/using-your-own-emacs-lisp-functions-in-org-mode-table-calculations-easier-dosage-totals/][Using your own Emacs Lisp functions in Org Mode table calculations: easier dosage totals - sacha chua :: living an awesome life - http://sachachua.com/blog/2015/06/using-your-own-emacs-lisp-functions-in-org-mode-table-calculations-easier-dosage-totals/]] [2015-06-19 Пт 15:59] :emacs:try:
** [[http://ru-emacs.livejournal.com/85243.html][ru_emacs: Двуязычная проверка орфографии в Emacs - http://ru-emacs.livejournal.com/85243.html]] [2015-06-21 Вс 12:54] :emacs:try:
** [[http://pragmaticemacs.com/emacs/sort-lines-in-a-region/][Sort lines in a region | Pragmatic Emacs - http://pragmaticemacs.com/emacs/sort-lines-in-a-region/]] [2015-06-21 Вс 13:07] :emacs:try:
** visible-mark [2015-06-24 Ср 22:58]                                :emacs:try:
** [[https://github.com/doitian/thing-actions.el][doitian/thing-actions.el - https://github.com/doitian/thing-actions.el]] [2015-06-26 Пт 19:22] :emacs:try:
** [[https://github.com/pashinin/capture.el][pashinin/capture.el - https://github.com/pashinin/capture.el]] [2015-06-26 Пт 19:36] :emacs:try:
** [[https://github.com/rmm5t/maxframe.el][rmm5t/maxframe.el - https://github.com/rmm5t/maxframe.el]] [2015-06-26 Пт 19:44] :emacs:try:
** [[https://github.com/etrepum/ghc-mod][etrepum/ghc-mod - https://github.com/etrepum/ghc-mod]] [2015-06-26 Пт 19:49] :emacs:try:
** [[https://github.com/vkurup/python-django.el][vkurup/python-django.el - https://github.com/vkurup/python-django.el]] [2015-06-26 Пт 19:59] :emacs:try:
** [[https://bitbucket.org/edgimar/michel-orgmode][edgimar / michel-orgmode — Bitbucket - https://bitbucket.org/edgimar/michel-orgmode]] [2015-06-28 Вс 16:36] :emacs:try:
** [[http://endlessparentheses.com/how-i-blog-one-year-of-posts-in-a-single-org-file.html?source%3Drss][How I blog with Emacs: One year of posts in a single org file]] [2015-06-28 Вс 19:18] :emacs:try:
** [[https://github.com/vinitkumar/googlecl][vinitkumar/googlecl]] [2015-06-29 Пн 16:46]                         :emacs:try:
** [[http://doc.rix.si/org/fsem.html#sec-3-1-4-1][Hardcore Freestyle Emacs - http://doc.rix.si/org/fsem.html#sec-3-1-4-1]] [2015-06-29 Пн 17:04] :emacs:try:
** [[https://github.com/sabof/org-bullets][sabof/org-bullets - https://github.com/sabof/org-bullets]] [2015-06-30 Вт 14:43] :emacs:try:
** [[https://github.com/dfeich/org-babel-examples][dfeich/org-babel-examples - https://github.com/dfeich/org-babel-examples]] [2015-06-30 Вт 19:58] :emacs:try:
** [[https://github.com/nflath/recursive-narrow][nflath/recursive-narrow - https://github.com/nflath/recursive-narrow]] [2015-07-06 Пн 13:38] :emacs:try:
** [[http://oremacs.com/2015/07/07/hydra-resume/][Pause or resume the current Hydra · (or emacs - http://oremacs.com/2015/07/07/hydra-resume/]] [2015-07-08 Ср 13:13] :emacs:try:
** timesheet.el [2015-07-14 Вт 13:35]                                :emacs:try:
** thingopt [2015-07-14 Вт 13:37]                                    :emacs:try:
** thing-cmds [2015-07-14 Вт 13:37]                                  :emacs:try:
** searchq [2015-07-14 Вт 22:24]                                     :emacs:try:
** grep-a-lot [2015-07-14 Вт 22:25]                                  :emacs:try:
** py-import-check [2015-07-14 Вт 23:14]                             :emacs:try:
** nose-* [2015-07-16 Чт 10:08]                                      :emacs:try:
** eww-lnum [2015-07-16 Чт 12:54]                                    :emacs:try:
** memory-usage [2015-07-16 Чт 13:03]                                :emacs:try:
** calfw-gcal [2015-07-16 Чт 13:04]                                  :emacs:try:
** wand [2015-07-16 Чт 13:07]                                        :emacs:try:
** [[http://endlessparentheses.com/fixing-double-capitals-as-you-type.html?source%3Drss][Fixing DOuble CApitals as you type · Endless Parentheses - http://endlessparentheses.com/fixing-double-capitals-as-you-type.html?source=rss]] [2015-07-20 Пн 21:46] :emacs:try:
** [[http://oremacs.com/2015/07/20/hydra-columns/][Easily arrange hydra into a matrix · (or emacs - http://oremacs.com/2015/07/20/hydra-columns/]] [2015-07-22 Ср 18:40] :emacs:try:
** [[http://oremacs.com/2015/07/23/ivy-multiaction/][New Ivy multi-action exit · (or emacs - http://oremacs.com/2015/07/23/ivy-multiaction/]] [2015-07-23 Чт 23:49] :emacs:try:
** [[http://endlessparentheses.com/embedding-youtube-videos-with-org-mode-links.html?source%3Drss][Embedding Youtube videos with org-mode links · Endless Parentheses - http://endlessparentheses.com/embedding-youtube-videos-with-org-mode-links.html?source=rss]] [2015-07-28 Вт 16:49] :emacs:try:
** [[http://endlessparentheses.com/embedding-youtube-videos-with-org-mode-links.html][Embedding Youtube videos with org-mode links · Endless Parentheses - http://endlessparentheses.com/embedding-youtube-videos-with-org-mode-links.html]] [2015-07-31 Пт 13:17] :emacs:try:
** [[http://oremacs.com/2015/07/27/counsel-recoll/][Using Recoll desktop search database with Emacs · (or emacs - http://oremacs.com/2015/07/27/counsel-recoll/]] [2015-08-02 Вс 23:59] :emacs:try:
** [[http://blog.binchen.org/posts/use-which-func-mode-with-js2-mode.html][Use which-func-mode with js2-mode | Chens blog - http://blog.binchen.org/posts/use-which-func-mode-with-js2-mode.html]] [2015-08-03 Пн 22:55] :emacs:try:
** [[http://sachachua.com/blog/2015/08/org-mode-date-arithmetic/][Org Mode date arithmetic - sacha chua :: living an awesome life - http://sachachua.com/blog/2015/08/org-mode-date-arithmetic/]] [2015-08-07 Пт 22:59] :emacs:try:
** [[http://blog.binchen.org/posts/evil-text-object-to-select-nearby-file-path.html][Evil text object to select nearby file path | Chens blog - http://blog.binchen.org/posts/evil-text-object-to-select-nearby-file-path.html]] [2015-08-08 Сб 21:54] :emacs:try:
** [[http://endlessparentheses.com/use-org-mode-links-for-absolutely-anything.html][Use Org-Mode Links for Absolutely Anything · Endless Parentheses - http://endlessparentheses.com/use-org-mode-links-for-absolutely-anything.html]] [2015-08-12 Ср 14:34] :emacs:try:
** [[http://www.lunaryorn.com/2015/08/16/emojis-in-emacs.html][Emojis in Emacs – lunarsite - http://www.lunaryorn.com/2015/08/16/emojis-in-emacs.html]] [2015-08-17 Пн 09:34] :emacs:try:
** [[http://endlessparentheses.com/a-comment-or-uncomment-sexp-command.html?source=rss][A comment-or-uncomment-sexp command in Emacs - http://endlessparentheses.com/a-comment-or-uncomment-sexp-command.html?source=rss]] [2015-08-18 Вт 17:40] :emacs:try:
** [[http://pragmaticemacs.com/emacs/delete-blank-lines-and-shrink-whitespace/][Delete blank lines and shrink whitespace | Pragmatic Emacs - http://pragmaticemacs.com/emacs/delete-blank-lines-and-shrink-whitespace/]] [2015-08-19 Ср 23:36] :emacs:try:
** [[http://endlessparentheses.com/embedding-youtube-videos-with-org-mode-links.html?source=rss][Embedding Youtube videos with org-mode links · Endless Parentheses - http://endlessparentheses.com/embedding-youtube-videos-with-org-mode-links.html?source=rss]] [2015-08-25 Вт 16:32] :emacs:try:
** [[http://blog.binchen.org/posts/how-to-take-screen-shot-for-business-people-efficiently-in-emacs.html][How to take screen shot for business people efficiently in Emacs | Chens blog - http://blog.binchen.org/posts/how-to-take-screen-shot-for-business-people-efficiently-in-emacs.html]] [2015-08-29 Сб 17:56] :emacs:try:
** [[http://www.wisdomandwonder.com/link/9922/how-to-reintegrate-changes-for-word-back-into-org-mode][How to reintegrate changes for Word back into Org-Mode | Wisdom and Wonder - http://www.wisdomandwonder.com/link/9922/how-to-reintegrate-changes-for-word-back-into-org-mode]] [2015-08-29 Сб 17:57] :emacs:try:
** helm-pages for pages (^L) navigation [2015-09-03 Чт 18:44]        :emacs:try:
** [[http://endlessparentheses.com/org-mode-subtrees-and-file-local-variables.html][Org-mode subtrees and file-local variables · Endless Parentheses - http://endlessparentheses.com/org-mode-subtrees-and-file-local-variables.html]] [2015-09-03 Чт 19:11] :emacs:try:
** [[http://erikclarke.net/2014/10/21/keeping-a-lab-notebook-with-org-mode-git-papers-and-pandoc-part-ii/][Keeping a lab notebook with org-mode, git, Papers, and Pandoc (Part II) | pleiotropy - http://erikclarke.net/2014/10/21/keeping-a-lab-notebook-with-org-mode-git-papers-and-pandoc-part-ii/]] [2015-09-09 Ср 18:08] :emacs:try:
** [[https://github.com/wakatime/wakatime][wakatime/wakatime - https://github.com/wakatime/wakatime]] [2015-09-12 Сб 09:31] :emacs:try:
** [[http://endlessparentheses.com/improving-page-navigation.html?source=rss][Improving page (section) navigation · Endless Parentheses - http://endlessparentheses.com/improving-page-navigation.html?source=rss]] [2015-09-15 Вт 23:59] :emacs:try:
** [[https://github.com/Malabarba/camcorder.el][Malabarba/camcorder.el - https://github.com/Malabarba/camcorder.el]] [2015-09-19 Сб 22:07] :emacs:try:
** [[http://erikclarke.net/2014/10/21/keeping-a-lab-notebook-with-org-mode-git-papers-and-pandoc-part-ii/][Keeping a lab notebook with org-mode, git, Papers, and Pandoc (Part II) | pleiotropy - http://erikclarke.net/2014/10/21/keeping-a-lab-notebook-with-org-mode-git-papers-and-pandoc-part-ii/]] [2015-09-19 Сб 23:15] :emacs:try:
** [[https://github.com/justbur/emacs-which-key][justbur/emacs-which-key - https://github.com/justbur/emacs-which-key]] [2015-09-20 Вс 20:28] :emacs:try:
** [[http://endlessparentheses.com/flycheck-a-directory-and-report-the-results.html?source=rss][Flycheck a directory and report the results · Endless Parentheses - http://endlessparentheses.com/flycheck-a-directory-and-report-the-results.html?source=rss]] [2015-09-24 Чт 17:25] :emacs:try:
** [[http://blog.everythingtastesbetterwithchilli.com/2015/09/27/emacs-and-filenotify/][Emacs and filenotify - http://blog.everythingtastesbetterwithchilli.com/2015/09/27/emacs-and-filenotify/]] [2015-09-28 Пн 02:01] :emacs:try:
** [[http://endlessparentheses.com/better-time-stamps-in-org-export.html?source=rss][Better time-stamps in org-export with Emacs - http://endlessparentheses.com/better-time-stamps-in-org-export.html?source=rss]] [2015-10-06 Вт 09:24] :emacs:try:
** [[https://github.com/ReanGD/emacs-multi-compile][ReanGD/emacs-multi-compile - https://github.com/ReanGD/emacs-multi-compile]] [2015-10-07 Ср 13:37] :emacs:try:
** [[http://www.lunaryorn.com/2015/08/16/emojis-in-emacs.html][Emojis in Emacs — lunarsite - http://www.lunaryorn.com/2015/08/16/emojis-in-emacs.html]] [2015-10-07 Ср 15:36] :emacs:try:
** ps-ccrypt [2015-10-11 Вс 23:24]                                   :emacs:try:
** real-auto-save [2015-10-11 Вс 23:25]                              :emacs:try:
** ispell [2015-10-11 Вс 23:59]                                      :emacs:try:
** graphviz-dot-mode [2015-10-12 Пн 16:06]                           :emacs:try:
** edit-indirect package [2015-10-15 Чт 21:17]                       :emacs:try:
** narrow-indirect package [2015-10-15 Чт 21:17]                     :emacs:try:
** [[http://irreal.org/blog/?p=2029][Embedded Notes in Text | Irreal - http://irreal.org/blog/?p=2029]] [2015-10-15 Чт 21:34] :emacs:try:
** [[https://github.com/Malabarba/paradox][Malabarba/paradox - https://github.com/Malabarba/paradox]] [2015-10-16 Пт 10:26] :emacs:try:
** [[https://github.com/vspinu/polymode][vspinu/polymode - https://github.com/vspinu/polymode]] [2015-10-16 Пт 11:00] :emacs:try:
** real-auto-save [2015-10-17 Сб 23:59]                              :emacs:try:
** [[http://www.nongnu.org/geiser/][Geiser: Top - http://www.nongnu.org/geiser/]] [2015-10-17 Сб 23:59] :emacs:try:
** beeminder [2015-10-20 Вт 20:49]                                   :emacs:try:
** clipmon [2015-10-20 Вт 20:53]                                     :emacs:try:
** edit-list [2015-10-21 Ср 19:00]                                   :emacs:try:
** [[https://github.com/larstvei/Focus][larstvei/Focus - https://github.com/larstvei/Focus]] [2015-10-25 Вс 22:13] :emacs:try:
** [[https://github.com/joostkremers/writeroom-mode][joostkremers/writeroom-mode - https://github.com/joostkremers/writeroom-mode]] [2015-10-25 Вс 22:14] :emacs:try:
** [[http://blog.everythingtastesbetterwithchilli.com/2015/09/27/emacs-and-filenotify/][Emacs and filenotify - http://blog.everythingtastesbetterwithchilli.com/2015/09/27/emacs-and-filenotify/]] [2015-10-25 Вс 22:16] :emacs:try:
** [[https://github.com/thisirs/state][thisirs/state - https://github.com/thisirs/state]] [2015-10-25 Вс 22:39] :emacs:try:
** [[https://github.com/choppsv1/ietf-docs][choppsv1/ietf-docs - https://github.com/choppsv1/ietf-docs]] [2015-10-25 Вс 22:39] :emacs:try:
** [[https://github.com/jcpetkovich/shrink-whitespace.el][jcpetkovich/shrink-whitespace.el - https://github.com/jcpetkovich/shrink-whitespace.el]] [2015-10-25 Вс 22:55] :emacs:try:
** [[https://github.com/rocky/emacs-test-simple][rocky/emacs-test-simple - https://github.com/rocky/emacs-test-simple]] [2015-10-25 Вс 22:59] :emacs:try:
** [[https://github.com/lujun9972/uimage][lujun9972/uimage - https://github.com/lujun9972/uimage]] [2015-10-25 Вс 22:59] :emacs:try:
** [[https://github.com/ralesi/ranger.el][ralesi/ranger.el - https://github.com/ralesi/ranger.el]] [2015-10-26 Пн 21:21] :emacs:try:
** [[https://github.com/emacs-helm/helm-recoll][emacs-helm/helm-recoll - https://github.com/emacs-helm/helm-recoll]] [2015-10-26 Пн 21:36] :emacs:try:
** [[https://github.com/chmouel/openstack-cgit-browse-file][chmouel/openstack-cgit-browse-file - https://github.com/chmouel/openstack-cgit-browse-file]] [2015-10-26 Пн 21:37] :emacs:try:
** [[http://emacs-ide.tuxfamily.org/][Emacs-IDE - http://emacs-ide.tuxfamily.org/]] [2015-10-26 Пн 21:41] :emacs:try:
** [[https://github.com/jyp/boon][jyp/boon - https://github.com/jyp/boon]] [2015-10-26 Пн 21:45]      :emacs:try:
** [[https://github.com/EHartC/memento][EHartC/memento - https://github.com/EHartC/memento]] [2015-10-26 Пн 21:53] :emacs:try:
** [[https://github.com/bastibe/org-journal][bastibe/org-journal - https://github.com/bastibe/org-journal]] [2015-10-26 Пн 23:24] :emacs:try:
** [[https://github.com/fgeller/fingers.el][fgeller/fingers.el - https://github.com/fgeller/fingers.el]] [2015-10-26 Пн 23:25] :emacs:try:
** [[https://github.com/QBobWatson/popup-keys][QBobWatson/popup-keys - https://github.com/QBobWatson/popup-keys]] [2015-10-26 Пн 23:25] :emacs:try:
** [[https://github.com/steckerhalter/discover-my-major][steckerhalter/discover-my-major - https://github.com/steckerhalter/discover-my-major]] [2015-10-26 Пн 23:26] :emacs:try:
** [[https://github.com/rudolfochrist/interleave][rudolfochrist/interleave - https://github.com/rudolfochrist/interleave]] [2015-10-26 Пн 23:33] :emacs:try:
** [[https://github.com/Golevka/emacs-clang-complete-async][Golevka/emacs-clang-complete-async - https://github.com/Golevka/emacs-clang-complete-async]] [2015-10-26 Пн 23:33] :emacs:try:
** [[https://github.com/knu/elscreen][knu/elscreen - https://github.com/knu/elscreen]] [2015-10-26 Пн 23:34] :emacs:try:
** [[https://github.com/wamei/elscreen-multi-term][wamei/elscreen-multi-term - https://github.com/wamei/elscreen-multi-term]] [2015-10-26 Пн 23:34] :emacs:try:
** [[http://melpa.org/#/magit-rockstar][magit-rockstar - MELPA - http://melpa.org/#/magit-rockstar]] [2015-10-27 Вт 18:08] :emacs:try:
** [[https://github.com/zk-phi/togetherly/][zk-phi/togetherly - https://github.com/zk-phi/togetherly/]] [2015-10-27 Вт 18:19] :emacs:try:
** [[https://github.com/zk-phi/electric-case][zk-phi/electric-case - https://github.com/zk-phi/electric-case]] [2015-10-27 Вт 18:33] :emacs:try:
** [[https://github.com/zk-phi/phi-search-dired][zk-phi/phi-search-dired - https://github.com/zk-phi/phi-search-dired]] [2015-10-27 Вт 18:34] :emacs:try:
** [[https://github.com/Fuco1/nave-mode][Fuco1/nave-mode - https://github.com/Fuco1/nave-mode]] [2015-10-27 Вт 18:51] :emacs:try:
** [[https://github.com/tj64/outshine][tj64/outshine - https://github.com/tj64/outshine]] [2015-10-27 Вт 18:53] :emacs:try:
** [[https://github.com/chmouel/tox.el][chmouel/tox.el - https://github.com/chmouel/tox.el]] [2015-10-27 Вт 20:29] :emacs:try:
** [[https://github.com/rayslava/emacs-point-el][rayslava/emacs-point-el - https://github.com/rayslava/emacs-point-el]] [2015-10-29 Чт 19:38] :emacs:try:
** real-auto-save [2015-11-01 Вс 23:39]                              :emacs:try:
** [[https://github.com/takaxp/org-tree-slide][takaxp/org-tree-slide - https://github.com/takaxp/org-tree-slide]] [2015-11-03 Вт 14:39] :emacs:try:
** [[https://github.com/ilya-babanov/emacs-bpr][ilya-babanov/emacs-bpr - https://github.com/ilya-babanov/emacs-bpr]] [2015-11-03 Вт 15:03] :emacs:try:
** [[http://melpa.org/#/helm-grepint][helm-grepint - MELPA - http://melpa.org/#/helm-grepint]] [2015-11-03 Вт 17:49] :emacs:try:
** [[https://github.com/synic/jbeans-emacs][synic/jbeans-emacs - https://github.com/synic/jbeans-emacs]] [2015-11-03 Вт 23:59] :emacs:try:
** [[http://melpa.org/#/replace-symbol][replace-symbol - MELPA - http://melpa.org/#/replace-symbol]] [2015-11-05 Чт 10:28] :emacs:try:
** [[https://github.com/bmastenbrook/termbright-theme-el][bmastenbrook/termbright-theme-el - https://github.com/bmastenbrook/termbright-theme-el]] [2015-11-05 Чт 10:30] :emacs:try:
** [[https://github.com/justbur/emacs-which-key][justbur/emacs-which-key - https://github.com/justbur/emacs-which-key]] [2015-11-05 Чт 20:49] :emacs:try:
** [[https://github.com/cask/cask][cask/cask - https://github.com/cask/cask]] [2015-11-05 Чт 20:52]    :emacs:try:
** [[https://github.com/rdallasgray/pallet][rdallasgray/pallet - https://github.com/rdallasgray/pallet]] [2015-11-05 Чт 20:52] :emacs:try:
** [[http://melpa.org/#/typing-game][typing-game - MELPA - http://melpa.org/#/typing-game]] [2015-11-09 Пн 23:52] :emacs:try:
** [[http://melpa.org/#/noxml-fold][noxml-fold - MELPA - http://melpa.org/#/noxml-fold]] [2015-11-09 Пн 23:52] :emacs:try:
** [[http://melpa.org/#/github-notifier][MELPA - http://melpa.org/#/github-notifier]] [2015-11-09 Пн 23:53]  :emacs:try:
** [[http://melpa.org/#/emoji-fontset][emoji-fontset - MELPA - http://melpa.org/#/emoji-fontset]] [2015-11-09 Пн 23:54] :emacs:try:
** [[https://github.com/xuchunyang/eshell-z][xuchunyang/eshell-z - https://github.com/xuchunyang/eshell-z]] [2015-11-10 Вт 14:02] :emacs:try:
** [[https://github.com/company-mode/company-mode/issues/68][More info about how this compares to auto-complete · Issue #68 · company-mode/company-mode - https://github.com/company-mode/company-mode/issues/68]] [2015-11-10 Вт 19:40] :emacs:try:
** [[http://i.imgur.com/zlp94Vd.png][zlp94Vd.png (Изображение PNG, 950 × 1076 пикселов) - http://i.imgur.com/zlp94Vd.png]] [2015-11-10 Вт 19:59] :emacs:try:
** [[https://www.reddit.com/r/emacs/comments/3rzy03/access_the_last_environment_i_have_left/][Access the last environment I have left : emacs - https://www.reddit.com/r/emacs/comments/3rzy03/access_the_last_environment_i_have_left/]] [2015-11-10 Вт 20:02] :emacs:try:
** [[https://github.com/atilaneves/cmake-ide][atilaneves/cmake-ide - https://github.com/atilaneves/cmake-ide]] [2015-11-10 Вт 20:22] :emacs:try:
** https://github.com/ReanGD/emacs-multi-compile [2015-11-12 Чт 13:16] :emacs:try:
** [[https://github.com/iqbalansari/emacs-emojify][iqbalansari/emacs-emojify - https://github.com/iqbalansari/emacs-emojify]] [2015-11-15 Вс 11:29] :emacs:try:
** [[http://endlessparentheses.com/test-driven-development-in-cider-and-emacs.html?source=rss][Test-Driven-Development in CIDER and Emacs · Endless Parentheses - http://endlessparentheses.com/test-driven-development-in-cider-and-emacs.html?source=rss]] [2015-11-16 Пн 20:12] :emacs:try:
** [[https://github.com/alphapapa/org-protocol-capture-html#org-protocol-capture-html][alphapapa/org-protocol-capture-html - https://github.com/alphapapa/org-protocol-capture-html#org-protocol-capture-html]] [2015-11-16 Пн 23:06] :emacs:try:
** [[http://irreal.org/blog/?p=4705][Textified Web Pages in Emacs | Irreal - http://irreal.org/blog/?p=4705]] [2015-11-16 Пн 23:06] :emacs:try:
** [[https://github.com/politza/pdf-tools][politza/pdf-tools - https://github.com/politza/pdf-tools]] [2015-11-17 Вт 14:32] :emacs:try:
** [[https://github.com/edvorg/req-package][edvorg/req-package - https://github.com/edvorg/req-package]] [2015-11-17 Вт 17:21] :emacs:try:
** [[https://github.com/svend/ibuffer-tramp][svend/ibuffer-tramp - https://github.com/svend/ibuffer-tramp]] [2015-11-21 Сб 15:47] :emacs:try:
** [[https://github.com/shosti/wacspace.el][shosti/wacspace.el - https://github.com/shosti/wacspace.el]] [2015-11-21 Сб 19:42] :emacs:try:
** [[http://www.emacswiki.org/emacs/GotoChg][EmacsWiki: Goto Chg - http://www.emacswiki.org/emacs/GotoChg]] [2015-11-21 Сб 20:00] :emacs:try:
** helm + org [2015-11-21 Сб 23:36]                                  :emacs:try:
** [[https://github.com/skeeto/elisp-finalize][skeeto/elisp-finalize - https://github.com/skeeto/elisp-finalize]] [2015-11-22 Вс 14:01] :emacs:try:
** [[https://github.com/dpsutton/resize-mode][dpsutton/resize-mode - https://github.com/dpsutton/resize-mode]] [2015-11-22 Вс 14:09] :emacs:try:
** [[http://melpa.org/#/region-state][MELPA - http://melpa.org/#/region-state]] [2015-11-22 Вс 14:23]     :emacs:try:
** [[http://melpa.org/#/therapy][MELPA - http://melpa.org/#/therapy]] [2015-11-22 Вс 14:24]          :emacs:try:
** [[http://melpa.org/#/wilt][MELPA - http://melpa.org/#/wilt]] [2015-11-22 Вс 14:25]             :emacs:try:
** [[http://melpa.org/#/elog][MELPA - http://melpa.org/#/elog]] [2015-11-22 Вс 14:25]             :emacs:try:
** [[https://github.com/aki2o/emacs-bts][aki2o/emacs-bts - https://github.com/aki2o/emacs-bts]] [2015-11-22 Вс 14:59] :emacs:try:
** [#B] [[https://www.reddit.com/r/emacs/comments/3skh5v/how_to_pass_the_useragent_ssh_key_passphrase/][How to pass the user-agent ssh key passphrase through to Emacs {i.e. for magit}? : emacs - https://www.reddit.com/r/emacs/comments/3skh5v/how_to_pass_the_useragent_ssh_key_passphrase/]] [2015-11-22 Вс 15:01] :emacs:try:
** [[https://github.com/rolandwalker/back-button][rolandwalker/back-button - https://github.com/rolandwalker/back-button]] [2015-11-22 Вс 15:44] :emacs:try:
** [[https://github.com/ganmacs/jumplist][ganmacs/jumplist - https://github.com/ganmacs/jumplist]] [2015-11-22 Вс 15:47] :emacs:try:
** [[https://github.com/tty-tourist/org-tracktable][tty-tourist/org-tracktable - https://github.com/tty-tourist/org-tracktable]] [2015-11-22 Вс 16:05] :emacs:try:
** [[https://github.com/noctuid/chronicler.el][noctuid/chronicler.el - https://github.com/noctuid/chronicler.el]] [2015-11-22 Вс 16:06] :emacs:try:
** [[http://melpa.org/#/bind-map][bind-map - MELPA - http://melpa.org/#/bind-map]] [2015-11-22 Вс 16:15] :emacs:try:
   :PROPERTIES:
   :ID:       94446aab-5236-4a25-99f2-1db2d10c5edf
   :END:
** [#B] [[http://melpa.org/#/org-time-budgets][MELPA - http://melpa.org/#/org-time-budgets]] [2015-11-22 Вс 16:15] :emacs:try:
   :PROPERTIES:
   :ID:       20615f8d-8bfd-4cd3-a421-4662993f86e5
   :END:
** [[https://www.google.ru/search?num=100&q=org-clocktable&gws_rd=cr,ssl&ei=66pRVq_BGoaVsAGm0YToAg][org-clocktable - Поиск в Google - https://www.google.ru/search?num=100&q=org-clocktable&gws_rd=cr,ssl&ei=66pRVq_BGoaVsAGm0YToAg]] [2015-11-22 Вс 16:15] :emacs:try:
   :PROPERTIES:
   :ID:       7531383e-bcbd-4907-9a27-67b7a36ec44c
   :END:
** [[http://melpa.org/#/yaml-tomato][yaml-tomato - MELPA - http://melpa.org/#/yaml-tomato]] [2015-11-25 Ср 23:12] :emacs:try:
** [[http://melpa.org/#/flycheck-css-colorguard][flycheck-css-colorguard - MELPA - http://melpa.org/#/flycheck-css-colorguard]] [2015-11-25 Ср 23:17] :emacs:try:
** [[http://melpa.org/#/badwolf-theme][badwolf-theme - MELPA - http://melpa.org/#/badwolf-theme]] [2015-11-25 Ср 23:19] :emacs:try:
** [#B] [[https://gist.github.com/tmalsburg/9747104][A simple script for converting vCard files to org-contacts. - https://gist.github.com/tmalsburg/9747104]] [2015-11-26 Чт 18:15] :emacs:try:
** [[https://github.com/istib/helm-mode-manager][istib/helm-mode-manager - https://github.com/istib/helm-mode-manager]] [2015-11-29 Вс 13:54]                                          :emacs:try:
** [[https://github.com/yuya373/emacs-slack][yuya373/emacs-slack - https://github.com/yuya373/emacs-slack]] [2015-11-30 Пн 19:27]                                          :emacs:try:
** [[http://endlessparentheses.com/using-paradox-for-github-notifications.html?source=rss][Using Paradox for Github notifications · Endless Parentheses - http://endlessparentheses.com/using-paradox-for-github-notifications.html?source=rss]] [2015-11-30 Пн 19:39]                                          :emacs:try:
** [[https://github.com/buzztaiki/lice-el][buzztaiki/lice-el - https://github.com/buzztaiki/lice-el]] [2015-12-02 Ср 10:35]                                          :emacs:try:
** [[http://melpa.org/#/resize-window][resize-window - MELPA - http://melpa.org/#/resize-window]] [2015-12-02 Ср 23:59]                                          :emacs:try:
** [[http://melpa.org/#/easy-lentic][easy-lentic - MELPA - http://melpa.org/#/easy-lentic]] [2015-12-02 Ср 23:59]                                          :emacs:try:
** [[http://melpa.org/#/encourage-mode][encourage-mode - MELPA - http://melpa.org/#/encourage-mode]] [2015-12-02 Ср 23:59]                                          :emacs:try:
** [[https://github.com/Lindydancer/multicolumn][Lindydancer/multicolumn - https://github.com/Lindydancer/multicolumn]] [2015-12-03 Чт 20:29]                                          :emacs:try:
** [[https://www.reddit.com/r/emacs/comments/3ui312/multiline_configurable_polylingual_automatic/][multi-line - configurable, polylingual, automatic splitting of statements into multiple-lines : emacs - https://www.reddit.com/r/emacs/comments/3ui312/multiline_configurable_polylingual_automatic/]] [2015-12-03 Чт 20:55]                                          :emacs:try:
** [[https://github.com/wasamasa/jammer][wasamasa/jammer - https://github.com/wasamasa/jammer]] [2015-12-07 Пн 19:16]                                          :emacs:try:
** [[http://www.djcbsoftware.nl/code/mu/mu4e.html][djcbsoftware - http://www.djcbsoftware.nl/code/mu/mu4e.html]] [2015-12-07 Пн 20:01]                                          :emacs:try:
** [[http://www.djcbsoftware.nl/code/mu/mu4e.html][djcbsoftware - http://www.djcbsoftware.nl/code/mu/mu4e.html]] [2015-12-07 Пн 20:03]                                          :emacs:try:
** [[https://github.com/boyw165/history][boyw165/history - https://github.com/boyw165/history]] [2015-12-09 Ср 13:01]                                          :emacs:try:
** [[https://github.com/wasamasa/shackle][wasamasa/shackle - https://github.com/wasamasa/shackle]] [2015-12-09 Ср 13:42]                                          :emacs:try:
** [#B] [[https://github.com/promethial/paxedit][promethial/paxedit - https://github.com/promethial/paxedit]] [2015-12-09 Ср 16:02] :emacs:try:
** [[https://github.com/gregsexton/origami.el][gregsexton/origami.el - https://github.com/gregsexton/origami.el]] [2015-12-09 Ср 16:08]                                          :emacs:try:
** [[http://www.emacswiki.org/emacs/nameses][EmacsWiki: nameses - http://www.emacswiki.org/emacs/nameses]] [2015-12-09 Ср 16:08]                                          :emacs:try:
** [[https://github.com/zk-phi/phi-grep][zk-phi/phi-grep - https://github.com/zk-phi/phi-grep]] [2015-12-09 Ср 16:10]                                          :emacs:try:
** [[https://github.com/josteink/wsd-mode][josteink/wsd-mode - https://github.com/josteink/wsd-mode]] [2015-12-09 Ср 16:14]                                          :emacs:try:
** [[https://www.reddit.com/r/programming/comments/3sed38/parinfer_simpler_lisp_editing/][Parinfer - simpler Lisp editing : programming - https://www.reddit.com/r/programming/comments/3sed38/parinfer_simpler_lisp_editing/]] [2015-12-09 Ср 19:13]                                          :emacs:try:
** [[https://github.com/thierryvolpiatto/zop-to-char/][thierryvolpiatto/zop-to-char - https://github.com/thierryvolpiatto/zop-to-char/]] [2015-12-09 Ср 19:14]                                          :emacs:try:
** [[https://github.com/joddie/pcre2el][joddie/pcre2el - https://github.com/joddie/pcre2el]] [2015-12-09 Ср 19:15]                                          :emacs:try:
** org-expiry [2015-12-09 Ср 19:19]                                  :emacs:try:
** bbdb or org-contacts [2015-12-09 Ср 19:20]                                          :emacs:try:
** [[https://github.com/Malabarba/aggressive-indent-mode][Malabarba/aggressive-indent-mode - https://github.com/Malabarba/aggressive-indent-mode]] [2015-12-09 Ср 20:24]                                          :emacs:try:
** [[https://github.com/nschum/highlight-symbol.el][nschum/highlight-symbol.el - https://github.com/nschum/highlight-symbol.el]] [2015-12-09 Ср 20:24]                                          :emacs:try:
** [[http://workgroups2.readthedocs.org/en/latest/][Workgroups2 - Emacs session manager — Workgroups2 1.2 documentation - http://workgroups2.readthedocs.org/en/latest/]] [2015-12-09 Ср 21:11]                                          :emacs:try:
** [[http://quantifiedawesome.com/][quantified awesome - http://quantifiedawesome.com/]] [2015-12-09 Ср 21:59]                                          :emacs:try:
** [[https://github.com/Fuco1/free-keys][Fuco1/free-keys - https://github.com/Fuco1/free-keys]] [2015-12-09 Ср 22:02]                                          :emacs:try:
** [[https://www.reddit.com/r/emacs/comments/3r98w0/where_are_the_orglookup_functions/][Where are the org-lookup functions? : emacs - https://www.reddit.com/r/emacs/comments/3r98w0/where_are_the_orglookup_functions/]] [2015-12-09 Ср 22:03]                                          :emacs:try:
** [[https://github.com/jschaf/esup][jschaf/esup - https://github.com/jschaf/esup]] [2015-12-09 Ср 22:05]                                          :emacs:try:
** [[http://cestdiego.github.io/blog/2015/12/04/using-rsync-when-tramp-is-too-much/][Using Rsync when Tramp is too much - Diego Berrocal - http://cestdiego.github.io/blog/2015/12/04/using-rsync-when-tramp-is-too-much/]] [2015-12-09 Ср 23:18]                                          :emacs:try:
** [[https://github.com/cute-jumper/emacs-firefox-controller][cute-jumper/emacs-firefox-controller - https://github.com/cute-jumper/emacs-firefox-controller]] [2015-12-11 Пт 23:59]                                          :emacs:try:
** [[http://whatthefuck.computer/blog/2015/08/16/taskflow/][Automatic Workflows in Org-Mode - Computer :( - http://whatthefuck.computer/blog/2015/08/16/taskflow/]] [2015-12-12 Сб 02:11]                                          :emacs:try:
** [[https://www.gnu.org/software/emacs/manual/html_node/eudc/][Emacs Unified Directory Client (EUDC) Manual: Top - https://www.gnu.org/software/emacs/manual/html_node/eudc/]] [2015-12-13 Вс 23:55]                                          :emacs:try:
** [[https://github.com/magnars/string-edit.el][magnars/string-edit.el - https://github.com/magnars/string-edit.el]] [2015-12-16 Ср 23:59]                                          :emacs:try:
** [[https://github.com/johanvts/emacs-fireplace/][johanvts/emacs-fireplace - https://github.com/johanvts/emacs-fireplace/]] [2015-12-19 Сб 12:48]                                          :emacs:try:
** [[https://github.com/fourier/idea-darkula-theme][fourier/idea-darkula-theme - https://github.com/fourier/idea-darkula-theme]] [2015-12-22 Вт 19:44]                                          :emacs:try:
** [[https://github.com/lujun9972/verify-url/blob/master/verify-url.el][verify-url/verify-url.el at master · lujun9972/verify-url - https://github.com/lujun9972/verify-url/blob/master/verify-url.el]] [2015-12-24 Чт 14:11]                                          :emacs:try:
** [[https://github.com/bbatsov/super-save][bbatsov/super-save - https://github.com/bbatsov/super-save]] [2015-12-27 Вс 22:52]                                          :emacs:try:
** [[https://github.com/nflath/man-commands][nflath/man-commands - https://github.com/nflath/man-commands]] [2015-12-27 Вс 23:04]                                          :emacs:try:
** [#B] [[https://github.com/agpchil/mu4e-maildirs-extension][agpchil/mu4e-maildirs-extension - https://github.com/agpchil/mu4e-maildirs-extension]] [2015-12-28 Пн 23:59] :emacs:try:
** [[https://github.com/enoson/eno.el][enoson/eno.el - https://github.com/enoson/eno.el]] [2015-12-30 Ср 13:54]                                          :emacs:try:
** [[https://github.com/magnars/.emacs.d/tree/master/defuns][.emacs.d/defuns at master · magnars/.emacs.d - https://github.com/magnars/.emacs.d/tree/master/defuns]] [2015-12-30 Ср 15:39]                                          :emacs:try:
** [[https://github.com/ocodo/.emacs.d/blob/master/custom/handy-functions.el][.emacs.d/handy-functions.el at master · ocodo/.emacs.d - https://github.com/ocodo/.emacs.d/blob/master/custom/handy-functions.el]] [2015-12-30 Ср 15:40]                                          :emacs:try:
** [[https://github.com/rejeep/emacs/blob/master/defuns.el][emacs/defuns.el at master · rejeep/emacs - https://github.com/rejeep/emacs/blob/master/defuns.el]] [2015-12-30 Ср 15:40]                                          :emacs:try:
** [[http://melpa.org/#/org-iv][org-iv - MELPA - http://melpa.org/#/org-iv]] [2015-12-31 Чт 15:27]                                          :emacs:try:
** [[https://github.com/7696122/path-headerline-mode][7696122/path-headerline-mode - https://github.com/7696122/path-headerline-mode]] [2015-12-31 Чт 19:29]                                          :emacs:try:
** [[http://melpa.org/#/firefox-controller][firefox-controller - MELPA - http://melpa.org/#/firefox-controller]] [2016-01-01 Пт 15:54]                                          :emacs:try:
** [[http://melpa.org/#/slack][slack - MELPA - http://melpa.org/#/slack]] [2016-01-01 Пт 19:13]                                          :emacs:try:
** [[http://melpa.org/#/private-diary][MELPA - http://melpa.org/#/private-diary]] [2016-01-01 Пт 19:32]                                          :emacs:try:
** [[http://melpa.org/#/elisp-lint][MELPA - http://melpa.org/#/elisp-lint]] [2016-01-01 Пт 20:23]                                          :emacs:try:
** [[http://melpa.org/#/verify-url][verify-url - MELPA - http://melpa.org/#/verify-url]] [2016-01-01 Пт 21:00]                                          :emacs:try:
** [[http://melpa.org/#/import-js][import-js - MELPA - http://melpa.org/#/import-js]] [2016-01-01 Пт 21:08]                                          :emacs:try:
** [[http://melpa.org/#/latex-math-preview][latex-math-preview - MELPA - http://melpa.org/#/latex-math-preview]] [2016-01-01 Пт 21:08]                                          :emacs:try:
** [#B] [[http://melpa.org/#/dim][MELPA - http://melpa.org/#/dim]] [2016-01-01 Пт 21:09]         :emacs:try:
** [[http://melpa.org/#/clean-buffers][MELPA - http://melpa.org/#/clean-buffers]] [2016-01-01 Пт 21:11]                                          :emacs:try:
** [[http://melpa.org/#/cff][MELPA - http://melpa.org/#/cff]] [2016-01-01 Пт 21:11]                                          :emacs:try:
** [[https://gist.github.com/sshbio/8da8c12e9a667b0445f0][An init progress bar in the mode line with sections titles in the echo area. - https://gist.github.com/sshbio/8da8c12e9a667b0445f0]] [2016-01-01 Пт 21:35]                                          :emacs:try:
** [[http://melpa.org/#/smartwin][MELPA - http://melpa.org/#/smartwin]] [2016-01-01 Пт 21:48]                                          :emacs:try:
** [[https://github.com/gaudecker/draft-mode][gaudecker/draft-mode - https://github.com/gaudecker/draft-mode]] [2016-01-01 Пт 22:39]                                          :emacs:try:
** [[http://melpa.org/#/python-mode][python-mode - MELPAMELPA - http://melpa.org/#/ - http://melpa.org/#/python-mode]] [2016-01-02 Сб 12:02]                                          :emacs:try:
** [#B] [[https://github.com/abingham/emacs-ycmd][abingham/emacs-ycmd - https://github.com/abingham/emacs-ycmd]] [2016-01-02 Сб 12:27] :emacs:try:
** [#B] [[https://github.com/LefterisJP/malinka][LefterisJP/malinka - https://github.com/LefterisJP/malinka]] [2016-01-02 Сб 14:32] :emacs:try:
** [[https://github.com/kootenpv/emp][kootenpv/emp - https://github.com/kootenpv/emp]] [2016-01-02 Сб 17:24]                                          :emacs:try:
** [[http://orgmode.org/worg/org-contrib/org-drill.html][org-drill.el – flashcards and spaced repetition for org-mode - http://orgmode.org/worg/org-contrib/org-drill.html]] [2016-01-03 Вс 21:59]                                          :emacs:try:
** [#B] [[https://github.com/rexim/org-cliplink][rexim/org-cliplink - https://github.com/rexim/org-cliplink]] [2016-01-03 Вс 21:59] :emacs:try:
** [[http://orgmode.org/worg/org-contrib/org-velocity.html][org-velocity.el — something like Notational Velocity for Org - http://orgmode.org/worg/org-contrib/org-velocity.html]] [2016-01-03 Вс 22:00]                                          :emacs:try:
