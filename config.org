#+TITLE: Wiedzmin's literate Emacs configuration
#+OPTIONS: toc:4 h:4

* bootstrapping
** basic utils
   :PROPERTIES:
   :ID:       6384b6fd-8dd7-4e9d-a4a2-eec18757ab1e
   :END:
   It's good to have centralized working datasets storage,
   to prevent pollution of Emacs config directory.
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package no-littering
       :ensure t
       :custom
       (no-littering-var-directory (expand-file-name "data/" user-emacs-directory)))
   #+END_SRC
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package subr-x)

     (setq home-directory (getenv "HOME"))
     (setq config-basedir
           (file-name-directory
            (or (buffer-file-name) load-file-name)))

     (defun concat-normalize-slashes (prefix suffix)
       (concat "/"
               (string-join
                (split-string
                 (string-join (list prefix suffix) "/") "/" t) "/")))

     (defun at-homedir (&optional suffix)
       (concat-normalize-slashes home-directory suffix))

     (defun at-org-dir (&optional suffix)
       (concat-normalize-slashes (at-homedir "/docs/org")
                                 suffix))

     (defun at-org-kb-dir (&optional suffix)
       (concat-normalize-slashes (at-homedir "/docs/org-kb")
                                 suffix))

     (defun at-config-basedir (&optional suffix)
       (concat-normalize-slashes config-basedir suffix))

     (defun at-user-data-dir (&optional suffix)
       (concat-normalize-slashes no-littering-var-directory suffix))

     (defun at-workspace-dir (&optional suffix)
       (concat-normalize-slashes (at-homedir "/workspace") suffix))
   #+END_SRC
** essential packages and tweaks
   :PROPERTIES:
   :ID:       f2a7ba0e-9ec0-4f97-9b28-adc923f60859
   :END:
   #+BEGIN_SRC emacs-lisp :tangle yes
     (load (at-config-basedir "credentials.el.gpg"))

     (use-package auto-compile
       :ensure t
       :config
       (auto-compile-on-load-mode 1)
       (auto-compile-on-save-mode 1)
       :custom
       (auto-compile-display-buffer nil)
       (auto-compile-mode-line-counter t))

     (use-package f
       :ensure t
       :after (s dash))

     (use-package names :ensure t)
     (use-package anaphora :ensure t)

     (use-package delight :ensure t)

     (use-package pcre2el
       :ensure t
       :config
       (pcre-mode))

     (use-package notifications)

     (use-package cus-edit
       :hook (kill-emacs-hook . (lambda () (delete-file custom-file)))
       :custom
       (custom-file (at-config-basedir "customizations.el")))

     (use-package emacs
       :config
       (fset 'yes-or-no-p 'y-or-n-p)
       (setq scalable-fonts-allowed t)
       (setq use-dialog-box nil)
       (setq enable-recursive-minibuffers t)
       ;; don't let the cursor go into minibuffer prompt
       (setq minibuffer-prompt-properties
             '(read-only t point-entered minibuffer-avoid-prompt face minibuffer-prompt))
       (when (eq system-type 'gnu-linux)
         (setq x-alt-keysym 'meta))
       (put 'downcase-region 'disabled nil)
       (put 'erase-buffer 'disabled nil)
       (put 'narrow-to-region 'disabled nil)
       (put 'scroll-left 'disabled nil)
       (put 'scroll-right 'disabled nil)
       (put 'upcase-region 'disabled nil)
       (setq scroll-preserve-screen-position 'always)
       ;; reduce point movement lag, see https://emacs.stackexchange.com/questions/28736/emacs-pointcursor-movement-lag/28746
       (setq auto-window-vscroll nil)
       (setq undo-limit 1000000)
       (advice-add 'undo-auto--last-boundary-amalgamating-number :override #'ignore) ;; https://stackoverflow.com/a/41560712/2112489
       (setq indent-tabs-mode nil)
       (set-default 'indent-tabs-mode nil);; Never insert tabs, !!!DO NOT REMOVE!!!
       (setq-default tab-width 4)
       (setq mark-even-if-inactive t)
       (setq-default fill-column 200)
       (setq-default indicate-empty-lines t)
       (setq-default truncate-lines t)
       (setq x-stretch-cursor t)
       (setq user-full-name (capitalize private/real-name))
       ;; print symbols
       (setq print-circle t)
       (setq print-gensym t)
       ;; encodings
       (setq locale-coding-system 'utf-8)
       (define-coding-system-alias 'UTF-8 'utf-8)
       (define-coding-system-alias 'utf-8-emacs 'utf-8) ; needed by bbdb...
       (define-coding-system-alias 'utf_8 'utf-8)
       (set-default buffer-file-coding-system 'utf-8-unix)
       (setq sentence-end-double-space nil)
       (setq tab-always-indent t))
   #+END_SRC
** input methods
   :PROPERTIES:
   :ID:       19ad65dc-243b-4d83-b4ed-c0161f35e3ae
   :END:
   Set default input method
   #+BEGIN_SRC emacs-lisp :tangle yes
     (setq default-input-method 'russian-computer)
   #+END_SRC
   Reverse input method makes Emacs with non-English system keyboard layout
   to behave correctly with keybindings. It definitely makes sense while
   using Emacs in such X WMs when there is no chance to hook into keyboard
   layouts switching (those are probably all, except StumpWM/XMonad, AFAIK)
   #+BEGIN_SRC emacs-lisp :tangle (if (not (member (getenv "CURRENT_WM") '("stumpwm" "xmonad"))) "yes" "no")
     (use-package reverse-im
       :ensure t
       :config
       (reverse-im-activate "russian-computer"))
   #+END_SRC
** Encryption and security
*** packages
    :PROPERTIES:
    :ID:       f23f36ac-a857-455c-9186-129925c5d5c4
    :END:
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package auth-source
        :custom
        (auth-sources '("~/.authinfo.gpg")))

      (use-package epa
        :after (epg)
        :config
        (epa-file-enable)
        :custom
        (epa-pinentry-mode 'loopback))

      (use-package epg-config
        :after (epg)
        :custom
        (epg-gpg-program "gpg2")
        (epg-gpg-home-directory "~/.gnupg"))

      (use-package password-cache
        :custom
        (password-cache-expiry nil)
        (password-cache t))

      (use-package keychain-environment
        :ensure t
        :config
        (keychain-refresh-environment))
    #+END_SRC
** GC tweaks
   :PROPERTIES:
   :ID:       f696a57b-17a7-485b-8642-c6d1431ba612
   :END:
   #+BEGIN_SRC emacs-lisp :tangle yes
     (setq gc-cons-percentage 0.3)

     (setq gc-cons-threshold most-positive-fixnum)
     (add-hook 'after-init-hook #'(lambda ()
                                    (setq gc-cons-threshold 800000)))

     (add-hook 'minibuffer-setup-hook (lambda () (setq gc-cons-threshold most-positive-fixnum)))
     (add-hook 'minibuffer-exit-hook (lambda () (setq gc-cons-threshold 800000)))

     (add-hook 'focus-out-hook #'garbage-collect)
   #+END_SRC
* appearance
** fonts
   :PROPERTIES:
   :ID:       bd3e3e74-904d-40f2-b8e7-ed96b0d366ad
   :END:
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package font-core
       :config
       (global-font-lock-mode 1))

     (use-package font-lock
       :config
       (setq font-lock-maximum-decoration t))

     (use-package unicode-fonts
       :ensure t
       :after (persistent-soft)
       :config
       (unicode-fonts-setup))
   #+END_SRC
** setup smart modeline
   :PROPERTIES:
   :ID:       487f7c0d-ba0c-4598-a6fa-d817a8b30ba4
   :END:
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package spaceline :ensure t
       :custom
       (powerline-default-separator 'wave)
       (spaceline-flycheck-bullet "❖ %s")
       (spaceline-separator-dir-left '(right . right))
       (spaceline-separator-dir-right '(left . left)))

     (use-package spaceline-config
       :ensure spaceline
       :config
       (spaceline-info-mode 1)
       (spaceline-emacs-theme 'projectile-root))
   #+END_SRC
** load themes and choose one
   :PROPERTIES:
   :ID:       561c87c4-8d29-4a80-ac66-2dc3251cf5ca
   :END:
   Also some other good-looking theme is "material-theme"
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package nord-theme :ensure t :config (load-theme 'nord t) :disabled)
     (use-package kaolin-themes :ensure t :config (load-theme 'kaolin-dark t) :disabled)
     (use-package hc-zenburn-theme :ensure t :config (load-theme 'hc-zenburn t) :disabled)
     (use-package sunburn-theme :ensure t :config (load-theme 'sunburn t) :disabled)
     (use-package labburn-theme :ensure t :config (load-theme 'labburn t) :disabled)
     (use-package darcula-theme :ensure t :config (load-theme 'darcula t) :disabled)
     (use-package darkburn-theme :ensure t :config (load-theme 'darkburn t))
     (use-package solarized-theme :ensure t :config (load-theme 'solarized-dark t) :disabled)

     ;; Providing dark enough colors, unless we are using an appropriate theme, Darkburn, for example
     (when (boundp 'zenburn-colors-alist)
       (set-face-attribute 'default nil :background "#1A1A1A")
       (set-face-attribute 'region nil :background (cdr (assoc "zenburn-bg-2" zenburn-colors-alist))))
   #+END_SRC
** frames
   :PROPERTIES:
   :ID:       8f6440cb-848f-4f09-a13a-a39cb3e18531
   :END:
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package tooltip
       :config
       (tooltip-mode 0))

     (use-package avoid
       :config
       (mouse-avoidance-mode 'jump))

     (use-package frame
       :config
       (blink-cursor-mode 0)
       (setq frame-title-format "emacs - %b %f") ;; for various external tools
       (setq truncate-partial-width-windows nil))

     (use-package tool-bar
       :config
       (tool-bar-mode -1))

     (use-package scroll-bar
       :config
       (scroll-bar-mode -1)
       (when (>= emacs-major-version 25)
         (horizontal-scroll-bar-mode -1)))

     (use-package menu-bar
       :config
       (menu-bar-mode -1))

     (use-package popwin :ensure t)

     (use-package hl-line
       :config
       (global-hl-line-mode 1))

     (use-package time
       :config
       (display-time)
       :custom
       (display-time-day-and-date t)
       ;; (display-time-form-list (list 'time 'load))
       (display-time-world-list
        '(("Europe/Moscow" "Moscow")))
       (display-time-mail-file t)
       (display-time-default-load-average nil)
       (display-time-24hr-format t)
       (display-time-string-forms '( day " " monthname " (" dayname ") " 24-hours ":" minutes)))
   #+END_SRC
** uniquify buffer names
   :PROPERTIES:
   :ID:       636ed879-e1ab-4a6a-b88e-160833520849
   :END:
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package uniquify
       :custom
       (uniquify-buffer-name-style 'post-forward)
       (uniquify-separator ":")
       (uniquify-ignore-buffers-re "^\\*")
       (uniquify-strip-common-suffix nil))
   #+END_SRC
* persistence
** save history
   :PROPERTIES:
   :ID:       3f0c8dc7-a980-42da-ad21-69aae50566ab
   :END:
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package savehist
       :config
       (savehist-mode t)
       :custom
       (savehist-save-minibuffer-history t)
       (savehist-autosave-interval 60)
       (history-length 10000)
       (history-delete-duplicates t)
       (savehist-additional-variables
             '(kill-ring
               search-ring
               regexp-search-ring)))
   #+END_SRC
** maintain recent files
   :PROPERTIES:
   :ID:       71d27955-27a7-4efe-ad81-8b45298ddfda
   :END:
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package recentf
       :no-require t
       :defer 1
       :config
       (use-package recentf-ext :ensure t)
       (add-to-list 'recentf-exclude no-littering-var-directory)
       (add-to-list 'recentf-exclude no-littering-etc-directory)
       (recentf-mode t)
       :custom
       (recentf-max-saved-items 250)
       (recentf-max-menu-items 15))
   #+END_SRC
** backups
   :PROPERTIES:
   :ID:       12bb8959-8134-4017-a147-1151a96fde54
   :END:
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package backup-each-save
       :ensure t
       :hook (after-save-hook . backup-each-save))

     ;;TODO: ensure backups are being created
     (use-package backup-walker
       :ensure t
       :commands backup-walker-start)
   #+END_SRC
** concurrency and caching
   :PROPERTIES:
   :ID:       1a9bd60c-7c56-49be-9f08-38d1649eaa16
   :END:
   Simultaneous edits still will be detected when saving is made. But disabling lock files prevents our working
   dirs from being clobbered with.
   #+BEGIN_SRC emacs-lisp :tangle yes
     (setf create-lockfiles nil)
   #+END_SRC
   If you're saving an elisp file, likely the .elc is no longer valid.
   #+BEGIN_SRC emacs-lisp :tangle yes
     (add-hook 'after-save-hook
               (lambda ()
               (if (and (equal major-mode 'emacs-lisp-mode)
                        (file-exists-p (concat buffer-file-name "c")))
                     (delete-file (concat buffer-file-name "c")))))
   #+END_SRC
* common
** emacs server
   :PROPERTIES:
   :ID:       d12f1321-1005-42b2-8d96-0e55ebb5cee9
   :END:
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package server
       :defer 2
       :preface
       (defun custom/server-save-edit ()
         (interactive)
         (save-buffer)
         (server-edit))
       (defun custom/save-buffer-clients-on-exit ()
         (interactive)
         (if (and (boundp 'server-buffer-clients) server-buffer-clients)
             (server-save-edit)
           (save-buffers-kill-emacs t)))
       :hook (server-visit-hook . (lambda () (local-set-key (kbd "C-c C-c") 'custom/server-save-edit)))
       :config
       (unless (and (string-equal "root" (getenv "USER"))
                    (server-running-p))
         (require 'server)
         (server-start))
       (advice-add 'save-buffers-kill-terminal :before 'custom/save-buffer-clients-on-exit))
   #+END_SRC
** some ubiquitous packages
*** hydra
    :PROPERTIES:
    :ID:       bd5362c6-e714-48af-b1de-7b521fa6bb44
    :END:
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package hydra
        :ensure t
        :config
        (set-face-attribute 'hydra-face-blue nil :foreground "#00bfff"))
    #+END_SRC
*** ivy-based
    :PROPERTIES:
    :ID:       977de8de-42e2-478a-ad6b-6c2d87b6e47a
    :END:
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package ivy
        :ensure t
        :delight ivy-mode
        :bind (("C-x b" . ivy-switch-buffer)
               ("M-<f12>" . ivy-switch-buffer)
               ("<f10>" . ivy-resume)
               ("C-c v" . ivy-push-view)
               ("C-c V" . ivy-pop-view))
        :config
        (ivy-mode 1)
        :custom-face
        (ivy-current-match ((t (:background "gray1"))))
        :custom
        (ivy-display-style 'fancy)
        (ivy-use-selectable-prompt t "Make the prompt line selectable")
        (ivy-use-virtual-buffers t) ;; add 'recentf-mode’and bookmarks to 'ivy-switch-buffer'.
        (ivy-height 20) ;; number of result lines to display
        (ivy-count-format "%d/%d ")
        (ivy-initial-inputs-alist nil) ;; no regexp by default
        (ivy-re-builders-alist
         ;; allow input not in order
         '((read-file-name-internal . ivy--regex-fuzzy)
           (t . ivy--regex-ignore-order))))

      (use-package amx
        :ensure t
        :bind ("M-x" . amx)
        :custom
        (amx-backend 'ivy)
        (amx-save-file (at-user-data-dir "amx-items")))

      (use-package counsel
        :ensure t
        :defer 2
        :after (swiper)
        :delight counsel-mode
        :init
        (require 'iso-transl)
        :bind (([remap menu-bar-open] . counsel-tmm)
               ([remap insert-char] . counsel-unicode-char)
               ([remap isearch-forward] . counsel-grep-or-swiper)
               ("C-h L" . counsel-locate)
               ("C-c C-SPC" . counsel-mark-ring)
               ("C-x C-r" . counsel-recentf)
               ("C-c C-." . counsel-fzf)
               ("C-c w" . counsel-wmctrl)
               :map help-map
               ("l" . counsel-find-library)
               :prefix-map custom-help-prefix-map
               :prefix "<f1>"
               ("f" . counsel-describe-function)
               ("v" . counsel-describe-variable)
               ("l" . counsel-find-library)
               ("b" . counsel-descbinds)
               ("i" . counsel-info-lookup-symbol)
               :map iso-transl-ctl-x-8-map
               ("RET" . counsel-unicode-char)
               :map ivy-minibuffer-map
               ("M-y" . ivy-next-line))
        :custom
        (counsel-git-cmd "rg --files")
        (counsel-grep-base-command "rg -i -M 120 --no-heading --line-number --color never '%s' %s")
        (counsel-rg-base-command "rg -i -M 120 --no-heading --line-number --color never %s .")
        :config
        (counsel-mode 1))

      (use-package ivy-hydra
        :ensure t
        :after (ivy))

      (use-package ivy-rich
        :ensure t
        :after (ivy)
        :defines ivy-rich-abbreviate-paths ivy-rich-switch-buffer-name-max-length
        :custom
        (ivy-rich-switch-buffer-name-max-length 60 "Increase max length of buffer name.")
        :config
        (dolist (cmd
                 '(ivy-switch-buffer
                   ivy-switch-buffer-other-window
                   counsel-projectile-switch-to-buffer))
          (ivy-set-display-transformer cmd #'ivy-rich-switch-buffer-transformer)))

      (use-package ivy-xref
        :ensure t
        :custom
        (xref-show-xrefs-function #'ivy-xref-show-xrefs "Use Ivy to show xrefs"))

      (use-package ivy-dired-history
        :ensure t
        :after (dired savehist)
        :config
        (add-to-list 'savehist-additional-variables 'ivy-dired-history-variable))
    #+END_SRC
*** custom ivy-based
    :PROPERTIES:
    :ID:       307edab6-3ef0-41c5-b010-de6c25c376d8
    :END:
    #+BEGIN_SRC emacs-lisp :tangle yes
      (defun custom/open-encrypted-document ()
        (interactive)
        (ivy-read "Various documents: "
                  (funcall #'(lambda () (f-files (at-homedir "/docs/enc") nil t)))
                  :action #'(lambda (candidate)
                              (find-file candidate))
                  :require-match t
                  :caller 'custom/open-encrypted-document))

      (defun custom/open-org-file ()
        (interactive)
        (ivy-read "Org files: "
                  (funcall #'(lambda () (f-files (at-org-dir) nil t)))
                  :action #'(lambda (candidate)
                              (find-file candidate))
                  :require-match t
                  :caller 'custom/open-org-file))

      (defun custom/open-org-kb-file ()
        (interactive)
        (ivy-read "Org files: "
                  (funcall #'(lambda () (f-files (at-org-kb-dir) nil t)))
                  :action #'(lambda (candidate)
                              (find-file candidate))
                  :require-match t
                  :caller 'custom/open-org-kb-file))

      (defhydra hydra-custom-counsel (:idle 1.0)
        ("e" custom/open-encrypted-document "open encrypted document")
        ("o" custom/open-org-file "open Org file")
        ("k" custom/open-org-kb-file "open Org KB file")
        ("q" nil "cancel"))
      (global-set-key (kbd "C-c r") 'hydra-custom-counsel/body)
    #+END_SRC
*** other
    :PROPERTIES:
    :ID:       3b824d3a-e56f-4be5-b663-f92c7dcc81ad
    :END:
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package tramp
        :config
        (setq tramp-default-method "ssh")
        (setq tramp-ssh-controlmaster-options "")
        (setq tramp-default-proxies-alist nil))

      (use-package crux
        :ensure t
        :disabled
        :bind (:map dired-mode-map
               ("C-!" . crux-open-with)
               :map ctl-x-map
               ("\C-i" . crux-ispell-word-then-abbrev)))

      (use-package paradox
        :ensure t
        :after (seq let-alist spinner hydra)
        :commands paradox-list-packages
        :custom
        (paradox-execute-asynchronously t)
        (paradox-column-width-package 27)
        (paradox-column-width-version 13)
        (paradox-github-token private/paradox-github-token)
        :config
        (remove-hook 'paradox-after-execute-functions #'paradox--report-buffer-print))

      ;; for some reason feature 'files' provided with use-package
      ;; brings more headache than it deserves, so a little bit of
      ;; dirty imperative style below (still hope on fixing it later)
      (defun custom/untabify-buffer ()
        (when (member major-mode '(haskell-mode
                                   emacs-lisp-mode
                                   lisp-mode
                                   python-mode))
          (untabify (point-min) (point-max))))
      (add-hook 'before-save-hook #'delete-trailing-whitespace)
      (add-hook 'before-save-hook #'custom/untabify-buffer)
      (when (> emacs-major-version 25) (auto-save-visited-mode 1))
      (setq require-final-newline t)
      (setq enable-local-variables nil)
      ;; backup settings
      (setq auto-save-default nil)
      (setq backup-by-copying t)
      (setq backup-by-copying-when-linked t)
      (setq backup-directory-alist '(("." . "~/.cache/emacs/backups")))
      (setq delete-old-versions -1)
      (setq kept-new-versions 6)
      (setq kept-old-versions 2)
      (setq version-control t)
      (setq save-abbrevs 'silently)

      (use-package novice
        :config
        (setq disabled-command-function nil))

      (use-package which-key
        :ensure t
        :config
        (which-key-setup-side-window-right)
        (which-key-mode))
    #+END_SRC
** encodings
   :PROPERTIES:
   :ID:       3819b6d8-73a0-4fba-bf37-ab10e3c9f45a
   :END:
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package mule
       :config
       (prefer-coding-system 'utf-8)
       (set-default-coding-systems 'utf-8)
       (set-buffer-file-coding-system 'utf-8 'utf-8-unix)
       (set-selection-coding-system 'utf-8)
       (set-terminal-coding-system 'utf-8)
       (set-clipboard-coding-system 'utf-8)
       (set-keyboard-coding-system 'utf-8))
   #+END_SRC
* navigate
** URLs, links and TAPs
   :PROPERTIES:
   :ID:       26a89d53-8c77-48d7-82b4-09a6acef1e6f
   :END:
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package link-hint
       :ensure t
       :custom
       (link-hint-avy-style 'de-bruijn))

     (use-package browse-url
       :if (and (eq system-type 'gnu/linux)
                (eq window-system 'x))
       :preface
       (defun custom/buffer-urls--candidates ()
         (save-excursion
           (save-restriction
             (let ((urls))
               (goto-char (point-min))
               (while (re-search-forward org-plain-link-re nil t)
                 (push (thing-at-point 'url) urls))
               (remove nil urls)))))
       (defun custom/open-url-current-buffer ()
         (interactive)
         (ivy-read "URLs: "
                   (funcall #'custom/buffer-urls--candidates)
                   :action #'(lambda (candidate)
                               (browse-url candidate))
                   :require-match t
                   :caller 'custom/open-url-current-buffer))
       (defun feh-browse (url &rest ignore)
         "Browse image using feh."
         (interactive (browse-url-interactive-arg "URL: "))
         (start-process (concat "feh " url) nil "feh" url))
       (defun mpv-browse (url &rest ignore)
         "Browse video using mpv."
         (interactive (browse-url-interactive-arg "URL: "))
         (start-process (concat "mpv --loop-file=inf" url) nil "mpv" "--loop-file=inf" url))
       :custom
       (browse-url-browser-function 'browse-url-generic)
       (browse-url-generic-program "xdg-open")
       :config
       (setq browse-url-browser-function
             (append
              (mapcar (lambda (re)
                        (cons re #'eww-browse-url))
                      private/browse-url-images-re)
              (mapcar (lambda (re)
                        (cons re #'mpv-browse))
                      private/browse-url-videos-re)
              '(("." . browse-url-xdg-open)))))
   #+END_SRC
** cursor positioning
   :PROPERTIES:
   :ID:       da45d0ec-d722-4d55-9841-912ccf83aadf
   :END:
   #+BEGIN_SRC emacs-lisp :tangle yes
     ;;Make cursor stay in the same column when scrolling using pgup/dn.
     ;;Previously pgup/dn clobbers column position, moving it to the
     ;;beginning of the line.
     ;;<http://www.dotemacs.de/dotfiles/ElijahDaniel.emacs.html>
     (defadvice custom/scroll-up (around ewd-scroll-up first act)
       "Keep cursor in the same column."
       (let ((col (current-column)))
         ad-do-it
         (move-to-column col)))
     (defadvice custom/scroll-down (around ewd-scroll-down first act)
       "Keep cursor in the same column."
       (let ((col (current-column)))
         ad-do-it
         (move-to-column col)))

     (use-package saveplace
       :defer 1
       :config
       (save-place-mode 1))
   #+END_SRC
** frames spawning
   :PROPERTIES:
   :ID:       6e6577e0-0142-4c0b-99fb-52cbd81797c9
   :END:
    #+BEGIN_SRC emacs-lisp :tangle yes
      (defun custom/update-frames (heads-count)
        (let* ((frames-count (length (frame-list)))
               (diff-count (- heads-count frames-count))
               (diff-count-abs (abs diff-count)))
          (cond
           ((plusp diff-count)
            (dotimes (i diff-count-abs)
              (make-frame-command)))
           ((minusp diff-count)
            (let ((frame (selected-frame)))
              (dolist (fr (frame-list))
                (unless (eq fr frame) (condition-case nil (delete-frame fr) (error nil))))))
           (t t))))
    #+END_SRC
** unset keybindings
   :PROPERTIES:
   :ID:       41e2a40b-7161-4ef8-92ce-51fbcfa2b1b5
   :END:
    #+BEGIN_SRC emacs-lisp :tangle yes
      (global-unset-key (kbd "C-s"))
      (global-unset-key (kbd "C-r"))
      (global-unset-key (kbd "C-M-s"))
      (global-unset-key (kbd "C-M-r"))
      (global-unset-key (kbd "C-x C-b"))
    #+END_SRC
** special navigation
   :PROPERTIES:
   :ID:       96abc097-e32b-4e28-b1ab-85691f83ea61
   :END:
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package beginend
       :ensure t
       :delight beginend-global-mode beginend-prog-mode beginend-magit-status-mode
       :config
       (beginend-global-mode))

     (use-package mwim
       :ensure t
       :bind (([remap move-beginning-of-line] . mwim-beginning-of-code-or-line)
              ([remap move-end-of-line] . mwim-end-of-code-or-line)))

     (use-package smooth-scrolling :ensure t)
   #+END_SRC
** projects
   :PROPERTIES:
   :ID:       b530ebb1-9107-4c98-a03b-c139588735f9
   :END:
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package projectile
       :ensure t
       :delight (projectile-mode " prj")
       :bind ("C-x j j" . projectile-switch-project)
       :demand t
       :preface
       (defun custom/open-project-todos ()
         (interactive)
         (let ((todos-file (expand-file-name "todo.org" (projectile-project-root)))) ;; TODO: parameterize filename
           (condition-case nil
               (when (file-exists-p todos-file)
                 (find-file todos-file))
             (error (message "Cannot find project todos")))))
       :custom
       (projectile-enable-caching t)
       (projectile-require-project-root nil)
       (projectile-completion-system 'ivy)
       (projectile-tags-command "find %s -type f -print | egrep -v \"/[.][a-zA-Z]\" | etags -")
       :config
       (def-projectile-commander-method ?d
         "Open project root in dired."
         (projectile-dired))
       (def-projectile-commander-method ?g
         "Search in project."
         (counsel-rg))
       (def-projectile-commander-method ?t
         "Open project's file with TODOs."
         (custom/open-project-todos))
       (add-to-list 'projectile-other-file-alist '("html" "js"))
       (add-to-list 'projectile-other-file-alist '("js" "html"))
       (setq projectile-switch-project-action 'projectile-commander)
       (projectile-mode 1))

     (use-package counsel-projectile
       :ensure t
       :after (counsel projectile)
       :preface
       (defun counsel-projectile-switch-project-action-open-todos (project)
         "Open project's TODOs."
         (let ((projectile-switch-project-action
                (lambda ()
                  (custom/open-project-todos))))
           (counsel-projectile-switch-project-by-name project)))

       :bind ("C-x j j" . 'counsel-projectile-switch-project)
       :config
       (add-to-list 'counsel-projectile-switch-project-action '("t" counsel-projectile-switch-project-action-open-todos "open project's todos") t)
       (setq projectile-switch-project-action 'counsel-projectile-switch-project))
   #+END_SRC
** dired
   :PROPERTIES:
   :ID:       c33b40eb-4d4b-44ba-9b00-5725a2af0ada
   :END:
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package dired
       :commands dired
       :hook (dired-mode-hook . auto-revert-mode)
       :bind (([remap list-directory] . dired)
              :map dired-mode-map
              ("e" . (lambda ()
                       (interactive)
                       (when (derived-mode-p 'dired-mode)
                         (if (file-directory-p (dired-get-filename))
                             (message "Directories cannot be opened in EWW")
                           (eww-open-file (dired-get-file-for-visit))))))
              ("C-x C-k" . dired-do-delete))
       :preface
       (defvar custom/large-file-ok-types
         (rx "." (or "mp4" "mkv" "pdf") string-end)
         "Regexp matching filenames which are definitely ok to visit,
          even when the file is larger than `large-file-warning-threshold'.")
       (defadvice abort-if-file-too-large (around custom/check-large-file-ok-types)
         "If FILENAME matches `custom/large-file-ok-types', do not abort."
         (unless (string-match-p custom/large-file-ok-types (ad-get-arg 2))
           ad-do-it))
       :custom
       (dired-recursive-deletes 'top) ;; Allows recursive deletes
       (dired-dwim-target t)
       (dired-listing-switches "-lah1v --group-directories-first")
       :config
       (put 'dired-find-alternate-file 'disabled nil)
       (ad-activate 'abort-if-file-too-large)
       (use-package dired-filetype-face :ensure t)
       (use-package dired+
         :ensure t
         :disabled
         :custom
         (diredp-ignored-file-name 'green-face)
         (diredp-other-priv 'white-face)
         (diredp-rare-priv 'white-red-face)
         (diredp-compressed-file-suffix 'darkyellow-face))
       (use-package wdired
         :bind (:map dired-mode-map
                ("r" . wdired-change-to-wdired-mode))
         :custom
         (wdired-allow-to-change-permissions 'advanced))
       (use-package dired-narrow
         :ensure t
         :bind (:map dired-mode-map
                ("/" . dired-narrow)))
       (use-package dired-quick-sort
         :ensure t
         :config
         (dired-quick-sort-setup))
       (use-package diredfl
         :ensure t
         :config
         (diredfl-global-mode))
       (use-package dired-x
         :config
         ;; do not bind C-x C-j, it may be binded later
         (setq dired-bind-jump nil))
       (use-package dired-hide-dotfiles
         :ensure t
         :after (dired)
         :bind
         (:map dired-mode-map
               ("." . dired-hide-dotfiles-mode))
         :hook
         (dired-mode . dired-hide-dotfiles-mode))
       (use-package dired-recent
         :ensure t
         :config
         (dired-recent-mode 1)))

     ;; Reload dired after making changes
     (--each '(dired-do-rename
               dired-create-directory
               wdired-abort-changes)
       (eval `(defadvice ,it (after revert-buffer activate)
                (revert-buffer))))
   #+END_SRC
** search
   :PROPERTIES:
   :ID:       2623e68d-5af5-4868-81d9-aab1e516026b
   :END:
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package phi-search
       :ensure t
       :commands phi-search phi-search-backward
       :hook (isearch-mode-hook . phi-search-from-isearch-mc/setup-keys)
       :config
       (use-package phi-search-mc
         :ensure t
         :config
         (phi-search-mc/setup-keys)))

     (use-package socyl
       :ensure t
       :commands socyl-search-regexp
       :custom
       (socyl-backend 'ripgrep))

     (use-package wgrep
       :ensure t
       :bind (:map grep-mode-map
              ("C-x C-q" . wgrep-change-to-wgrep-mode)
              ("C-c C-c" . wgrep-finish-edit)))

     (defadvice occur-mode-goto-occurrence (after close-occur activate)
       (delete-other-windows))

     (use-package imenu-anywhere
       :ensure t
       :commands ivy-imenu-anywhere)

     ;; inline tasks navigation
     (use-package doom-todo-ivy
       :quelpa
       (doom-todo-ivy :repo "jsmestad/doom-todo-ivy" :fetcher github)
       :hook (after-init . doom-todo-ivy))
   #+END_SRC
** operations with windows/frames
   :PROPERTIES:
   :ID:       3f1d854c-5c75-4a89-b266-79cc876f8b5f
   :END:
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package windmove
       :bind
       (("C-s-<up>" . windmove-up)
        ("C-s-<down>" . windmove-down)
        ("C-s-<left>" . windmove-left)
        ("C-s-<right>" . windmove-right)))

     (use-package winner
       :config
       (winner-mode 1))

     (use-package golden-ratio
       :ensure t
       :delight golden-ratio-mode
       :init
       (golden-ratio-mode 1))

     (use-package framemove
       :ensure t
       :disabled
       :custom
       (framemove-hook-into-windmove t))

     (use-package windsize
       :ensure t
       :disabled ; have no sense with golden-ratio enabled
       :bind
       (("C-s-k" . windsize-up)
        ("C-s-j" . windsize-down)
        ("C-s-h" . windsize-left)
        ("C-s-l" . windsize-right)))

     (use-package ace-window
       :ensure t
       :after (avy)
       :commands ace-window
       :custom
       (aw-background nil)
       (aw-leading-char-style 'char)
       (aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l) "Use home row for selecting.")
       (aw-scope 'global "Highlight all frames.")
       :config
       (set-face-attribute 'aw-mode-line-face nil :foreground "white")
       :custom-face (aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))

     (use-package tile
       :ensure t
       :commands tile)

     (use-package transpose-frame
       :ensure t
       :commands transpose-frame)
   #+END_SRC
** scope
   :PROPERTIES:
   :ID:       95be5ba3-1e7f-4d62-94ad-d734f064add4
   :END:
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package ibuffer
       :commands ibuffer
       :bind (([remap list-buffers] . ibuffer)
              :map ibuffer-mode-map
              ("/ ." . (lambda (qualifier)
                         (interactive "sFilter by extname: ")
                         (ibuffer-filter-by-filename (concat "\\." qualifier "$"))))
              ("M-o" . other-window)) ; was ibuffer-visit-buffer-1-window
       :hook (ibuffer-mode-hook . (lambda ()
                                    ;; Make sure we're always using our buffer groups
                                    (ibuffer-switch-to-saved-filter-groups "default")))
       :custom
       (ibuffer-default-sorting-mode 'major-mode) ;recency
       (ibuffer-always-show-last-buffer :nomini)
       (ibuffer-default-shrink-to-minimum-size t)
       (ibuffer-jump-offer-only-visible-buffers t)
       (ibuffer-saved-filters
        '(("dired" ((mode . dired-mode)))
          ("foss" ((filename . "foss")))
          ("pets" ((filename . "pets")))
          ("jabberchat" ((mode . jabber-chat-mode)))
          ("orgmode" ((mode . org-mode)))
          ("elisp" ((mode . emacs-lisp-mode)))
          ("fundamental" ((mode . fundamental-mode)))
          ("haskell" ((mode . haskell-mode)))))
       (ibuffer-saved-filter-groups custom/ibuffer-saved-filter-groups))

     (use-package ibuffer-vc
       :ensure t
       :hook (ibuffer-hook . (lambda ()
                               (ibuffer-vc-set-filter-groups-by-vc-root)
                               (unless (eq ibuffer-sorting-mode 'alphabetic)
                                 (ibuffer-do-sort-by-alphabetic))))
       :custom
       (ibuffer-formats
        '((mark modified read-only vc-status-mini " "
                (name 18 18 :left :elide)
                " "
                (size 9 -1 :right)
                " "
                (mode 16 16 :left :elide)
                " "
                filename-and-process)) "include vc status info"))

     (use-package recursive-narrow :ensure t)
   #+END_SRC
** warping
   :PROPERTIES:
   :ID:       e366a2e8-2acd-4623-b584-2f64f06d7fa4
   :END:
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package swiper
       :ensure t
       :commands swiper swiper-multi swiper-occur
       :preface
       (defun custom/swiper (&optional tap)
         (interactive "P")
         (if tap
             (swiper (thing-at-point 'symbol))
           (swiper)))
       :bind ("C-s" . custom/swiper)
       :custom
       (swiper-include-line-number-in-search t)
       :custom-face (swiper-match-face-1 ((t (:background "#dddddd"))))
       :custom-face (swiper-match-face-2 ((t (:background "#bbbbbb" :weight bold))))
       :custom-face (swiper-match-face-3 ((t (:background "#bbbbff" :weight bold))))
       :custom-face (swiper-match-face-4 ((t (:background "#ffbbff" :weight bold)))))

     (use-package avy
       :ensure t
       :bind (("C-:" . avy-goto-char)
              ("M-g M-g" . avy-goto-line)
              ("M-s M-s" . avy-goto-word-0))
       :custom
       (avy-timeout-seconds 0.5)
       :custom-face (avy-goto-char-timer-face ((nil (:foreground "green" :weight bold))))
       :config
       (avy-setup-default))

     (use-package filecache)
   #+END_SRC
** hydras and keybindings
   :PROPERTIES:
   :ID:       82b18fd6-6823-4456-8403-7a7d8411212a
   :END:
   #+BEGIN_SRC emacs-lisp :tangle yes
     (defhydra hydra-window (:idle 1.0)
       "Windows/frames management"
       ("<left>" windmove-left "left" :color blue)
       ("<down>" windmove-down "down" :color blue)
       ("<up>" windmove-up "up" :color blue)
       ("<right>" windmove-right "right" :color blue)
       ("w" ace-window "ace" :color blue)
       ("=" text-scale-increase)
       ("-" text-scale-decrease)
       ("t" tile :color blue)
       ("T" transpose-frame "transpose")
       ("i" flip-frame "flip")
       ("o" flop-frame "flop")
       ("r" rotate-frame "rotate")
       ("n" make-frame-command "create frame" :color blue)
       ("k" delete-frame "delete frame" :color blue)
       ("s" delete-other-frames "delete other frames" :color blue)
       ("<f6>" heaven-and-hell-toggle-theme)
       ("q" nil "cancel"))
     (global-set-key (kbd "<f2>") 'hydra-window/body)

     (defhydra hydra-history ()
       ("y" counsel-yank-pop)
       ("m" counsel-mark-ring)
       ("c" counsel-command-history)
       ("e" counsel-expression-history)
       ("p" counsel-package)
       ("b" backup-walker-start)
       ("q" nil "cancel"))
     (global-set-key (kbd "<f9>") 'hydra-history/body)

     (defhydra hydra-projects (:color teal :idle 1.0)
       "
       PROJECT: %(projectile-project-root)
       Project               More                              Search
       --------------------------------------------------------------------------------
       _i_nvalidate cache    _c_ommander                       _r_egexp
       _I_buffer             _d_ired                           a_g_
       _k_ill buffers        recent_f_                         _m_ulti-swoop
                             _s_witch project
                             _h_elm-projectile
       "
       ("I" ibuffer)
       ("i" projectile-invalidate-cache)
       ("k" projectile-kill-buffers)
       ("c" projectile-commander)
       ("d" projectile-dired)
       ("f" projectile-recentf)
       ("s" counsel-projectile-switch-project)
       ("h" projectile-find-file)
       ("r" socyl-search-regexp)
       ("g" counsel-rg)
       ("G" (lambda () (interactive)
              (counsel-rg (thing-at-point 'symbol) (projectile-project-root))))
       ("l" counsel-git-log)
       ("t" custom/open-project-todos)
       ("m" swiper-multi))
     (global-set-key (kbd "<f8>") 'hydra-projects/body)

     (defhydra hydra-navigate ()
       "
       Locate                  Narrow/widen               Links
       -----------------------------------------------------------------------
       _s_ open URL            _r_egion                   _f_ hint & open
       _>_ reposition buffer   _d_efun                    _y_ hint & copy
       counsel-_I_menu         defun + _C_omments         _F_ hint & open multiple
                             _w_iden                    _Y_ hint & copy multiple
                             recursive _N_arrow DWIM    select w_3_m buffer
                             recursive wi_D_en DWIM
       "
       ("s" custom/open-url-current-buffer "open URL" :color blue)
       (">" reposition-window :color blue)
       ("r" narrow-to-region :color blue)
       ("d" narrow-to-defun :color blue)
       ("C" narrow-to-defun+comments-above :color blue)
       ("w" widen :color blue)
       ("N" recursive-narrow-or-widen-dwim)
       ("D" recursive-widen-dwim)
       ("f" link-hint-open-link :color blue)
       ("y" link-hint-copy-link :color blue)
       ("F" link-hint-open-multiple-links :color blue)
       ("Y" link-hint-copy-multiple-links :color blue)
       ("3" w3m-select-buffer :color blue)
       ("I" ivy-imenu-anywhere :color blue)
       ("t" doom/ivy-tasks :color blue))
     (global-set-key (kbd "<f3>") 'hydra-navigate/body)

     (global-set-key [remap kill-buffer] #'kill-this-buffer)
   #+END_SRC
* editing
** common hooks
   :PROPERTIES:
   :ID:       72f052f0-e63d-420e-bb29-637d4098c15c
   :END:
   #+BEGIN_SRC emacs-lisp :tangle yes
     (add-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p)
     (add-hook 'text-mode-hook 'turn-on-auto-fill)
     (add-hook 'text-mode-hook 'text-mode-hook-identify)

     (defun common-hooks/newline-hook ()
       (local-set-key (kbd "C-m") 'newline-and-indent)
       (local-set-key (kbd "<return>") 'newline-and-indent))
   #+END_SRC
** move and bend text around
*** definitions
    :PROPERTIES:
    :ID:       c5c1a49f-1d05-4890-871e-a2a2f40b35ea
    :END:
    This override for transpose-words fixes what I consider to be a flaw with
    the default implementation in simple.el. To transpose chars or lines, you
    always put the point on the second char or line to transpose with the
    previous char or line. The default transpose-words implementation does the
    opposite by flipping the current word with the next word instead of the
    previous word. The new implementation below instead makes transpose-words
    more consistent with how transpose-chars and trasponse-lines behave.
    #+BEGIN_SRC emacs-lisp :tangle yes
      (defun custom/transpose-words (arg)
        "[Override for default transpose-words in simple.el]
        Interchange words around point, leaving point at end of
        them. With prefix arg ARG, effect is to take word before or
        around point and drag it backward past ARG other words (forward
        if ARG negative). If ARG is zero, the words around or after
        point and around or after mark are interchanged."
        (interactive "*p")
        (if (eolp) (forward-char -1))
        (transpose-subr 'backward-word arg)
        (forward-word (+ arg 1)))
    #+END_SRC
*** setup
    :PROPERTIES:
    :ID:       b3febdce-3124-4695-b010-9822943b04c7
    :END:
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package snakehump
        :quelpa
        (snakehump :repo "aes/snakehump" :fetcher github :version original)
        :commands snakehump-next-at-point snakehump-prev-at-point)

      (use-package ialign
        :ensure t
        :bind ("C-x l" . ialign))

      (use-package hungry-delete
        :ensure t
        :commands hungry-delete-forward hungry-delete-backward)

      (use-package multiple-cursors
        :ensure t
        :after (region-bindings-mode)
        :bind (:map region-bindings-mode-map
               ("C->" . mc/mark-next-like-this)
               ("C-<" . mc/mark-previous-like-this)
               ("C-c C-o" . mc/mark-all-like-this)
               ("C-{" . mc/edit-beginnings-of-lines)
               ("C-}" . mc/edit-ends-of-lines)
               ("M-+" . mc/mark-more-like-this-extended)
               ("C-c a" . mc/mark-all-in-region)
               ("C-c d" . mc/mark-all-like-this-in-defun)
               ("C-c D" . mc/mark-all-like-this-dwim)
               ("`" . mc/sort-regions)
               ("C-+" . mc/insert-numbers))
        :config
        (use-package mc-extras
          :ensure t
          :after (multiple-cursors region-bindings-mode)
          :bind (:map region-bindings-mode-map  ; should we use this keymap or bind elsewhere?
                 ("M-." . mc/mark-next-sexps)
                 ("M-," . mc/mark-previous-sexps)
                 ("C-|" . mc/move-to-column)
                 ("C-." . mc/remove-current-cursor)))
        (use-package mc-cycle-cursors
          :bind (:map mc/keymap
                 ("C-n" . mc/cycle-forward)
                 ("C-p" . mc/cycle-backward))))

      (use-package delsel
        :bind
        ("C-c C-g" . minibuffer-keyboard-quit)
        :config
        (delete-selection-mode 1))

      ;;TODO: bind to keys more extensively
      ;;TODO: consolidate (un)filling functionality
      (use-package unfill
        :ensure t)

      (use-package simple
        :hook
        (((prog-mode-hook text-mode-hook) . turn-on-auto-fill))
        :delight
        ((visual-line-mode . " ↩")
         (auto-fill-function . " ↵"))
        :custom
        (bidi-display-reordering nil)
        (kill-whole-line t)
        (next-line-add-newlines nil)
        (blink-matching-paren nil)
        (set-mark-command-repeat-pop t)
        (save-interprogram-paste-before-kill t)
        (x-gtk-use-system-tooltips nil)
        (eval-expression-print-length nil)
        (eval-expression-print-level nil)
        :config
        (column-number-mode 1)
        (line-number-mode 1)
        (size-indication-mode 1)
        (toggle-truncate-lines 1)
        (transient-mark-mode 1)
        (put 'transient-mark-mode 'permanent-local t)
        (put 'set-goal-column 'disabled nil))

      (use-package cua-base
        :if (memq window-system '(mac ns))
        :bind (([kp-delete] . delete-char) ;; sets fn-delete to be right-delete
               ([(hyper x)] . cua-cut-region)
               ([(hyper c)] . cua-copy-region)
               ([(hyper v)] . cua-paste))
        :custom
        (process-connection-type nil)
        :config
        (cua-mode t))
    #+END_SRC
** regions and rectangles
*** definitions
    :PROPERTIES:
    :ID:       7cfe1de9-52f8-4a68-bae4-4973830b6390
    :END:
    #+BEGIN_SRC emacs-lisp :tangle yes
      (define-namespace custom/

      (defun cite-region (arg)
        (clipboard-kill-ring-save (region-beginning) (region-end))
        (with-temp-buffer
          (let ((comment-start "> "))
            (yank)
            (comment-region (point-min) (point-max))
            (when (> arg 1)
              (beginning-of-buffer)
              (insert "\n"))
            (clipboard-kill-region (point-min) (point-max)))))

      (defun append-cited-region (arg)
        (interactive "P")
        (let ((numarg (prefix-numeric-value arg)))
          (custom/cite-region numarg)
          (when (> numarg 1)
            (end-of-buffer))
          (yank)))

      ;; Compliment to kill-rectangle (just like kill-ring-save compliments
      ;; kill-region)
      ;; http://www.emacsblog.org/2007/03/17/quick-tip-set-goal-column/#comment-183
      (defun kill-save-rectangle (start end &optional fill)
        "Save the rectangle as if killed, but don't kill it. See
        `kill-rectangle' for more information."
        (interactive "r\nP")
        (kill-rectangle start end fill)
        (goto-char start)
        (yank-rectangle))

      )
    #+END_SRC
*** setup
    :PROPERTIES:
    :ID:       0fc28d80-7af1-4ce9-a52e-d46fff4d050f
    :END:
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package expand-region
        :ensure t
        :bind ("C-=" . er/expand-region))

      (use-package region-bindings-mode
        :ensure t
        :config
        (setq region-bindings-mode-disable-predicates '((lambda () buffer-read-only)))
        (region-bindings-mode-enable))

      (use-package whole-line-or-region ;; if no region is active, act on current line
        :ensure t
        :delight (whole-line-or-region-mode " WLR")
        :custom
        (whole-line-or-region-extensions-alist
         '((comment-dwim whole-line-or-region-comment-dwim-2 nil)
           (copy-region-as-kill whole-line-or-region-copy-region-as-kill nil)
           (kill-region whole-line-or-region-kill-region nil)
           (kill-ring-save whole-line-or-region-kill-ring-save nil)
           (yank whole-line-or-region-yank nil)))
        :config
        (defadvice whole-line-or-region-kill-region
            (before whole-line-or-region-kill-read-only-ok activate)
          (interactive "p")
          (unless kill-read-only-ok (barf-if-buffer-read-only)))
        (whole-line-or-region-mode 1))
    #+END_SRC
** commenting
   :PROPERTIES:
   :ID:       b5079d1e-1e13-4acd-92d5-25cc660dad24
   :END:
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package comment-dwim-2
       :ensure t
       :bind ("M-]" . comment-dwim-2))

     (use-package rebox2
       :ensure t
       :commands rebox-dwim rebox-cycle)

     (use-package banner-comment
       :ensure t
       :commands banner-comment)
   #+END_SRC
** clipboard and killring
   :PROPERTIES:
   :ID:       1486e40e-8c27-4ed9-8bce-83464ad35e19
   :END:
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package savekill :ensure t)

     (use-package copy-as-format
       :ensure t
       :config
       (defhydra hydra-copy-format (:idle 1.0)
         ("s" copy-as-format-slack "Slack")
         ("g" copy-as-format-github "Github")
         ("o" copy-as-format-org-mode "orgmode")
         ("m" copy-as-format-markdown "Markdown")
         ("a" copy-as-format-asciidoc "Asciidoc")
         ("b" copy-as-format-bitbucket "Bitbucket")
         ("d" copy-as-format-disqus "Disqus")
         ("l" copy-as-format-gitlab "GitLab")
         ("c" copy-as-format-hipchat "Hipchat")
         ("h" copy-as-format-html "HTML")
         ("j" copy-as-format-jira "Jira")
         ("w" copy-as-format-mediawiki "MediaWiki")
         ("p" copy-as-format-pod "Pod")
         ("r" copy-as-format-rst "RST")
         ("f" copy-as-format "generic")
         ("q" nil "cancel"))
       (global-set-key (kbd "C-c f") 'hydra-copy-format/body))

     (use-package select
       :custom
       (select-enable-clipboard t)
       (x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
   #+END_SRC
** undo/redo
   :PROPERTIES:
   :ID:       106282c8-1906-4508-a07e-62a831b60458
   :END:
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package undo-tree
       :ensure t
       :delight undo-tree-mode
       :commands undo-tree-undo undo-tree-redo
       :custom
       (undo-tree-visualizer-timestamps t)
       (undo-tree-visualizer-diff t)
       :config
       (global-undo-tree-mode t))
   #+END_SRC
*** try
    #+BEGIN_SRC emacs-lisp :tangle no
      (defhydra hydra-undo-tree (:color yellow :hint nil )
        " _p_: undo _n_: redo _s_: save _l_: load "
        ("p" undo-tree-undo)
        ("n" undo-tree-redo)
        ("s" undo-tree-save-history)
        ("l" undo-tree-load-history)
        ("u" undo-tree-visualize "visualize" :color blue)
        ("q" nil "quit" :color blue))
      (global-set-key (kbd "M-,") 'hydra-undo-tree/undo-tree-undo) ;; or whatever
    #+END_SRC
** spellchecking
*** flycheck
    :PROPERTIES:
    :ID:       4c008f67-6b4f-4e10-afb1-b36e165a7a12
    :END:
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package flycheck
        :ensure t
        :after (dash pkg-info let-alist seq counsel)
        :preface
        ;; CREDITS: https://github.com/nathankot/dotemacs
        (defvar counsel-flycheck-history nil
          "History for `counsel-flycheck'")
        (defun counsel-flycheck ()
          (interactive)
          (if (not (bound-and-true-p flycheck-mode))
              (message "Flycheck mode is not available or enabled")
            (ivy-read "Error: "
                      (let ((source-buffer (current-buffer)))
                        (with-current-buffer (or (get-buffer flycheck-error-list-buffer)
                                                 (progn
                                                   (with-current-buffer
                                                       (get-buffer-create flycheck-error-list-buffer)
                                                     (flycheck-error-list-mode)
                                                     (current-buffer))))
                          (flycheck-error-list-set-source source-buffer)
                          (flycheck-error-list-reset-filter)
                          (revert-buffer t t t)
                          (split-string (buffer-string) "\n" t " *")))
                      :action (lambda (s &rest _)
                                (-when-let* ( (error (get-text-property 0 'tabulated-list-id s))
                                              (pos (flycheck-error-pos error)) )
                                  (goto-char (flycheck-error-pos error))))
                      :history 'counsel-flycheck-history)))
        :commands (flycheck-next-error flycheck-previous-error counsel-flycheck)
        :custom
        (flycheck-global-modes '(not emacs-lisp-mode))
        (flycheck-display-errors-delay 0.4)
        (flycheck-check-syntax-automatically '(mode-enabled save idle-change new-line))
        :custom-face (flycheck-warning ((t (:foreground "yellow" :background "red"))))
        :config
        (global-flycheck-mode)
        (add-to-list 'display-buffer-alist
                     `(,(rx bos "*Flycheck errors*" eos)
                       (display-buffer-reuse-window
                        display-buffer-in-side-window)
                       (side            . bottom)
                       (reusable-frames . visible)
                       (window-height   . 0.33))))

      (use-package flycheck-pos-tip
        :ensure t
        :after (flycheck)
        :config
        (flycheck-pos-tip-mode))

      (use-package avy-flycheck
        :ensure t
        :config
        (avy-flycheck-setup)
        (setq avy-flycheck-dispatch-alist
            '((?x . avy-action-kill-move)
              (?X . avy-action-kill-stay)
              (?m . avy-action-mark)
              (?n . avy-action-copy))))

      (defhydra hydra-errors ()
        ("a" avy-flycheck-goto-error :color blue)
        ("c" counsel-flycheck :color blue)
        ("<up>" flycheck-previous-error "previous error")
        ("<down>" flycheck-next-error "next error")
        ("<left>" previous-error "previous error")
        ("<right>" next-error "next error")
        ("q" nil "cancel"))
      (global-set-key (kbd "C-q") 'hydra-errors/body)
    #+END_SRC
**** BACKLOG review concrete checkers functionality and usage
** utils
   :PROPERTIES:
   :ID:       793cf236-4c97-4a11-911a-9a64b9f89efd
   :END:
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package jka-cmpr-hook
       :config
       (auto-compression-mode 1))

     (use-package electric
       :config
       (electric-indent-mode -1))

     (use-package persistent-scratch
       :ensure t
       :mode ("^*scratch*$" . lisp-interaction-mode)
       :hook ((after-init-hook . persistent-scratch-restore)
              (kill-emacs-hook . persistent-scratch-save)))

     (use-package yatemplate
       :ensure t
       :after (yasnippet)
       :init
       (auto-insert-mode)
       :custom
       (yatemplate-dir (at-config-basedir "resources/auto-insert"))
       :config
       (yatemplate-fill-alist))

     (use-package page-break-lines
       :ensure t
       :config
       (turn-on-page-break-lines-mode))

     (use-package macro-math
       :ensure t
       :bind (("\C-x~" . macro-math-eval-and-round-region)
              ("\C-x=" . macro-math-eval-region)))

     (use-package archive-rpm :ensure t)

     (use-package editorconfig
       :ensure t
       :delight (editorconfig-mode " EC")
       :hook ((prog-mode-hook text-mode-hook) . editorconfig-mode))

     (use-package autorevert
       :defer 2
       :disabled
       :mode ("\\.log$" . auto-revert-mode)
       :custom
       (auto-revert-verbose nil)
       (global-auto-revert-non-file-buffers t)
       :config
       (global-auto-revert-mode 1))

     (use-package kmacro
       :custom
       (setq kmacro-ring-max 16))

     (use-package mwheel
       :custom
       (mouse-wheel-scroll-amount '(1 ((shift) . 1)))
       (mouse-wheel-progressive-speed nil))
   #+END_SRC
*** whitespaces
    :PROPERTIES:
    :ID:       3efe6111-4b9c-42a9-9a03-0d26ec8fed58
    :END:
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package whitespace
        :ensure t
        :defer 2
        :hook
        (((prog-mode-hook text-mode-hook) . whitespace-turn-on))
        :custom
        (whitespace-line-column 121)
        (whitespace-style '(indentation::space
                            space-after-tab
                            space-before-tab
                            trailing
                            lines-tail
                            tab-mark
                            face
                            tabs)))

      ;;TODO: consolidate all whitespaces utils
      ;;TODO: think of activating ws-butler in some modes, just for hands-on testing
      (use-package ws-butler
        :ensure t
        :commands ws-butler-mode)
    #+END_SRC
** major (and helper) modes
   :PROPERTIES:
   :ID:       a525152e-b1d7-4a69-a12a-7246e1679498
   :END:
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package rst
       :mode ("\\.rst$" . rst-mode))

     (use-package vimrc-mode
       :ensure t
       :mode ((".vim\\(rc\\)?$" . vimrc-mode)
              ("*pentadactyl*" . vimrc-mode)))

     (use-package sh-script
       :mode (("bashrc$" . shell-script-mode)
              ("bash_profile$" . shell-script-mode)
              ("bash_aliases$" . shell-script-mode)
              ("bash_local$" . shell-script-mode)
              ("bash_completion$" . shell-script-mode)
              (".powenv$" . shell-script-mode)
              ("\\zsh\\'" . shell-script-mode))
       :config
       ;; zsh
       (setq system-uses-terminfo nil))

     (use-package nginx-mode
       :ensure t
       :mode ("nginx" . nginx-mode))

     (use-package company-nginx
       :ensure t
       :after (nginx-mode)
       :hook (nginx-mode-hook . company-nginx-keywords))

     (use-package fic-mode :ensure t)

     (use-package csv-mode
       :ensure t
       :mode ("\\.csv" . csv-mode)
       :config
       (setq-default csv-align-padding 2))

     (use-package jinja2-mode
       :ensure t
       :mode ("\\.j2$" . jinja2-mode))

     (use-package yaml-mode
       :ensure t
       :mode (("\\.yml\\'" . yaml-mode)
              ("\\.yaml\\'" . yaml-mode))
       :hook (yaml-mode-hook . common-hooks/newline-hook))

     (define-derived-mode portage-mode prog-mode "Portage"
       "A major mode for editing Portage-related files"
       (setq-local comment-start "# ")
       (setq-local comment-start-skip "#+\\s-*")
       (setq-local font-lock-defaults nil))

     (use-package portage-mode
       :mode (("portage" . portage-mode)))

   #+END_SRC
*** docker
    :PROPERTIES:
    :ID:       84391052-7b6b-4c35-b3bb-687ea1613a9b
    :END:
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package dockerfile-mode
        :ensure t
        :mode  ("\\Dockerfile" . dockerfile-mode))

      (use-package docker-compose-mode
        :ensure t
        :mode ("docker-compose" . docker-compose-mode))
    #+END_SRC
** sexps
   :PROPERTIES:
   :ID:       d4065366-b58b-4cac-a41c-432fc6e3d1ba
   :END:
   #+BEGIN_SRC emacs-lisp :tangle yes
     ;;TODO: maybe relocate
     (use-package highlight-sexp
       :quelpa
       (highlight-sexp :repo "daimrod/highlight-sexp" :fetcher github :version original)
       :delight highlight-sexp-mode
       :hook ((lisp-mode-hook emacs-lisp-mode-hook) . highlight-sexp-mode))

     (use-package smartparens
       :ensure t
       :after (dash)
       :demand t
       :hook (((prog-mode-hook yaml-mode-hook) . smartparens-mode)
              ((lisp-mode-hook emacs-lisp-mode-hook markdown-mode-hook) . smartparens-strict-mode))
       :bind (:map smartparens-mode-map
              ;;TODO: try to make more brief keybindings
              ("C-M-t" . sp-transpose-sexp)
              ("M-F" . nil)
              ("M-B" . nil)
              ("M-<backspace>" . nil)
              ("C-S-a" . sp-beginning-of-sexp)
              ("C-S-d" . sp-end-of-sexp)
              (")" . sp-up-sex)
              ("C-<left_bracket>" . sp-select-previous-thing)
              ("C-c / r n" . sp-narrow-to-sexp)
              ("C-c / t" . sp-prefix-tag-object)
              ("C-c / p" . sp-prefix-pair-object)
              ("C-c / y" . sp-prefix-symbol-object)
              ("C-c / c" . sp-convolute-sexp)
              ("C-c / a" . sp-absorb-sexp)
              ("C-c / w" . sp-rewrap-sexp)
              ("C-c / e" . sp-emit-sexp)
              ("C-c / p" . sp-add-to-previous-sexp)
              ("C-c / n" . sp-add-to-next-sexp)
              ("C-c / j" . sp-join-sexp)
              ("C-c / s" . sp-split-sexp))
       :config
       (use-package smartparens-config)
       (show-smartparens-global-mode t)
       (sp-use-smartparens-bindings))

     (use-package paren
       :defer 2
       :custom
       (show-paren-delay 0)
       :config
       (show-paren-mode t))
   #+END_SRC
** indentation
   :PROPERTIES:
   :ID:       26fdd8dd-8d85-4aed-9b34-99b9869ee54c
   :END:
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package dtrt-indent
       :ensure t
       :config
       (dtrt-indent-mode))

     (use-package aggressive-indent
       :ensure t
       :config
       (global-aggressive-indent-mode 1)
       (add-to-list 'aggressive-indent-excluded-modes 'html-mode)
       (add-to-list 'aggressive-indent-excluded-modes 'slime-repl-mode)
       (delete 'lisp-mode aggressive-indent-modes-to-prefer-defun)
       (delete 'emacs-lisp-mode aggressive-indent-modes-to-prefer-defun)
       (add-to-list 'aggressive-indent-dont-indent-if
                    '(not (null (string-match (rx (zero-or-more space) (syntax comment-start) (zero-or-more anything)) (thing-at-point 'line))))))
   #+END_SRC
** hydras and keys
   :PROPERTIES:
   :ID:       89d1510e-ae5a-4d28-b044-018dd60c8f90
   :END:
   #+BEGIN_SRC emacs-lisp :tangle yes
     (defhydra hydra-edit (:color blue :idle 1.0)
       "
       Editing                         Kill/yank                 Buffers
       -------------------------------------------------------------------------------------
       just _o_ne space between        _y_ank to register        _`_ redraw display
       _2_ duplicate + comment         _p_ut from register       create _S_cratch
       _/_ make comment box            _k_ yank rectangle        _d_iff buffer <-> file
       _SPC_ untabify                  append next _K_ill        re_n_ame buffer+file
       _TAB_ tabify                    _a_ppend cited region     query/replace rege_x_p
       delete trailing _w_hitespaces
       _s_ort lines
       keep _u_nique lines
       _3_ snakehump back TAP
       _4_ snakehump TAP

       Custom:
       _t_ranslate TAP with Google
       _T_ranslate query with Google
       "
       ("o" just-one-space)
       ("2" crux-duplicate-and-comment-current-line-or-region)
       ("/" comment-box)
       ("SPC" untabify)
       ("TAB" tabify)
       ("w" delete-trailing-whitespace)
       ("s" sort-lines)
       ("u" delete-duplicate-lines)
       ("3" snakehump-prev-at-point)
       ("4" snakehump-next-at-point)
       ("r" rebox-dwim :color blue)
       ("c" rebox-cycle "cycle box styles")
       ("y" copy-to-register)
       ("p" insert-register)
       ("k" custom/kill-save-rectangle)
       ("K" append-next-kill)
       ("a" custom/append-cited-region)
       ("`" redraw-display)
       ("S" (lambda ()
              (interactive)
              (if symbolword-mode
                  (symbolword-mode -1)
                (symbolword-mode 1))))
       ("d" diff-buffer-with-file)
       ("n" crux-rename-file-and-buffer)
       ("x" query-replace-regexp)
       ("t" google-translate-at-point)
       ("T" google-translate-query-translate)
       ("q" nil "cancel"))
     (global-set-key (kbd "C-z") 'hydra-edit/body)

     (defhydra hydra-toggle (:color blue)
       "
       TOGGLE: de_b_ug on error (%(format \"%S\" debug-on-error))
       _w_hitespace mode
       "
       ("b" toggle-debug-on-error "debug on error")
       ("w" whitespace-mode "whitespace mode")
       ("W" global-whitespace-mode "*global* whitespace mode")
       ("B" subword-mode)
       ("v" view-mode)
       ("h" highlight-sexp-mode "toggle highlight-sexp mode")
       ("q" toggle-debug-on-quit "toggle debug-on-quit mode"))
     (global-set-key (kbd "<f11>") 'hydra-toggle/body)

     (global-unset-key (kbd "M-t")) ;; Transpose stuff with M-t // which used to be transpose-words

     (defhydra hydra-transpose ()
       "
       ___ undo last
       transpose _w_ords
       transpose _s_exps
       _a_nchored transpose
       "
       ("_" undo-tree-undo "undo last")
       ("w" custom/transpose-words "on words")
       ("s" transpose-sexps "on sexps")
       ("a" anchored-transpose "anchored")
       ("q" nil "cancel"))
     (global-set-key (kbd "M-t") 'hydra-transpose/body)

     (global-set-key [remap fill-paragraph] #'unfill-toggle)

     (global-set-key (kbd "M-\"") 'eval-region)
     (global-set-key (kbd "C-x f") 'find-file) ; I never use set-fill-column and I hate hitting it by accident.
     (global-set-key (kbd "M-SPC") 'cycle-spacing) ;; TODO: maybe place into some hydra
   #+END_SRC
* completion
** snippets
   :PROPERTIES:
   :ID:       82415c3d-9621-4a30-876b-f528246d9e6c
   :END:
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package yasnippet ;;TODO: make more declarative
       :ensure t
       :demand t
       :delight yas-minor-mode
       :mode (("yasnippet/snippets" . snippet-mode)
              ("\\.yasnippet$" . snippet-mode))
       :preface
       ;; hook for automatic reloading of changed snippets
       (defun custom/update-yasnippets-on-save ()
         (when (string-match "/resources/yasnippet" buffer-file-name)
           (yas-load-directory (at-config-basedir "resources/"))))
       ;; Inter-field navigation
       (defun custom/yas-goto-end-of-active-field ()
         (interactive)
         (let* ((snippet (car (yas--snippets-at-point)))
                (position (yas--field-end (yas--snippet-active-field snippet))))
           (if (= (point) position)
               (move-end-of-line)
             (goto-char position))))
       (defun custom/yas-goto-start-of-active-field ()
         (interactive)
         (let* ((snippet (car (yas--snippets-at-point)))
                (position (yas--field-start (yas--snippet-active-field snippet))))
           (if (= (point) position)
               (move-beginning-of-line)
             (goto-char position))))
       (defun custom/do-yas-expand ()
         (let ((yas/fallback-behavior 'return-nil))
           (yas/expand)))
       (defun custom/tab-indent-or-complete ()
         (interactive)
         (if (minibufferp)
             (minibuffer-complete)
           (if (or (not yas/minor-mode)
                   (null (custom/do-yas-expand)))
               (if (check-expansion)
                   (company-complete-common)
                 (indent-for-tab-command)))))
       :config
       ;; snippets editing mode
       (setq yas-snippet-dirs nil)
       (push yas-installed-snippets-dir yas-snippet-dirs)
       (push (at-config-basedir "resources/yasnippet/") yas-snippet-dirs)
       (push (at-config-basedir "resources/yasnippet-private/") yas-snippet-dirs)
       (setq yas-key-syntaxes '("w" "w_" "w_." "^ " "w_.()" yas-try-key-from-whitespace))
       (setq yas-expand-only-for-last-commands '(self-insert-command))
       (setq yas-prompt-functions
             '(yas-completing-prompt
               yas-x-prompt
               yas-no-prompt))
       ;; Wrap around region
       (setq yas-wrap-around-region t)
       (yas-global-mode 1)
       (add-hook 'hippie-expand-try-functions-list 'yas-hippie-try-expand)
       (add-hook 'after-save-hook 'custom/update-yasnippets-on-save)
       ;; using define-key because it turns out bind-key cannot handle some key definition forms
       (define-key yas-minor-mode-map [(tab)] nil)
       (define-key yas-keymap [(tab)] nil)
       (define-key yas-keymap [(shift tab)] nil)
       (define-key yas-keymap [backtab] nil)
       (define-key yas-minor-mode-map (kbd "<tab>") nil)
       (define-key yas-minor-mode-map (kbd "TAB") nil)
       (define-key yas-keymap (kbd "TAB") nil)
       (bind-key (kbd "<return>") 'yas-exit-all-snippets yas-keymap)
       (bind-key (kbd "C-e") 'custom/yas-goto-end-of-active-field yas-keymap)
       (bind-key (kbd "C-a") 'custom/yas-goto-start-of-active-field yas-keymap)
       (bind-key (kbd "C-n") 'yas-next-field-or-maybe-expand yas-keymap)
       (bind-key (kbd "C-p") 'yas-prev-field yas-keymap))

     (use-package auto-yasnippet
       :ensure t
       :after (yasnippet))

     (use-package ivy-yasnippet
       :after (dash ivy yasnippet)
       :ensure t)

     (defhydra hydra-yasnippet (:color teal)
       "
       _c_reate auto snippet
       _e_xpand auto snippet
       _p_ersist auto snippet
       _v_isit snippets file
       _i_nsert snippet
       "
       ("c" aya-create)
       ("e" aya-expand)
       ("p" aya-persist-snippet)
       ("v" yas-visit-snippet-file)
       ("i" ivy-yasnippet)
       ("q" nil))
     (global-set-key (kbd "<f5>") 'hydra-yasnippet/body)
   #+END_SRC
**** BACKLOG try https://github.com/abrochard/org-sync-snippets
** company
   :PROPERTIES:
   :ID:       f265a0cd-6f51-4150-a9c5-1ee0a79bc95b
   :END:
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package company
        :ensure t
        :demand t
        :delight (company-mode " γ")
        :bind (:map company-active-map
               ("\C-n" . company-select-next)
               ("\C-p" . company-select-previous)
               ("\C-d" . company-show-doc-buffer)
               ("M-." . company-show-location))
        :custom
        (company-idle-delay 0)
        (company-minimum-prefix-length 2)
        (company-tooltip-align-annotations t)
        (company-show-numbers t)
        :config
        (use-package company-flx
          :ensure t
          :no-require t
          :after (company)
          :config
          (company-flx-mode +1))
        (use-package company-quickhelp
          :ensure t
          :no-require t
          :after (company)
          :bind (:map company-active-map
                 ("C-c h" . company-quickhelp-manual-begin))
          :config
          (company-quickhelp-mode 1))
        (use-package company-statistics
          :ensure t
          :after (company)
          :config
          (company-statistics-mode))
        (global-company-mode))
    #+END_SRC
*** specialized uses
**** ansible
     :PROPERTIES:
     :ID:       66b51149-ccb4-4e7e-8781-f099c321b6d1
     :END:
     #+BEGIN_SRC emacs-lisp :tangle yes
       (use-package company-ansible
         :ensure t
         :after (company)
         :config
         (add-to-list 'company-backends 'company-ansible))
     #+END_SRC
*** try 3rdparty packages
**** https://github.com/nsf/gocode
**** https://github.com/sebastiw/distel-completion
**** https://github.com/iquiw/company-ghc
**** https://github.com/iquiw/company-cabal
**** https://github.com/iquiw/company-restclient
**** https://github.com/Valloric/ycmd + https://github.com/abingham/emacs-ycmd
** abbrevs
   :PROPERTIES:
   :ID:       47d2e50a-055b-4dc5-ab50-5a8028c34f3e
   :END:
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package hippie-exp
       :bind ("C-S-<iso-lefttab>" . hippie-expand)
       :custom
       (setq hippie-expand-try-functions-list
             '(yas-hippie-try-expand
               try-expand-all-abbrevs
               try-complete-file-name-partially
               try-complete-file-name
               try-expand-dabbrev
               try-expand-dabbrev-from-kill
               try-expand-dabbrev-all-buffers
               try-expand-list
               try-expand-line
               try-complete-lisp-symbol-partially
               try-complete-lisp-symbol)))

     (use-package abbrev
       :delight (abbrev-mode " Abv")
       :config
       (setq-default abbrev-mode t))
   #+END_SRC
* programming
** common
*** virtualization
    :PROPERTIES:
    :ID:       318076ea-2093-4a67-9879-c476ca30f85c
    :END:
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package docker
        :ensure t
        :after (dash docker-tramp magit-popup s tablist json-mode)
        :delight docker-mode
        :custom
        (docker-containers-show-all t)
        :config
        ;;TODO: bind keys
        (docker-global-mode 1))

      (use-package docker-tramp :ensure t)

      (use-package vagrant-tramp :ensure t)

      (use-package counsel-tramp
        :ensure t
        :after (docker-tramp vagrant-tramp)
        :bind ("C-c s" . counsel-tramp))
    #+END_SRC
*** eldoc
    :PROPERTIES:
    :ID:       4c7f893f-75f5-447e-9404-4ee913bb7b29
    :END:
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package eldoc
        :delight eldoc-mode
        :hook ((emacs-lisp-mode-hook lisp-interaction-mode-hook ielm-mode-hook) . turn-on-eldoc-mode)
        :custom
        (eldoc-idle-delay 0))

      (use-package c-eldoc
        :ensure t
        :after (eldoc)
        :hook ((c-mode-hook c++-mode-hook) . c-turn-on-eldoc-mode))

      (use-package eldoc-eval
        :ensure t
        :after (eldoc))
    #+END_SRC
*** common hooks
    :PROPERTIES:
    :ID:       75d0a1e7-a985-4122-a87f-21c8a0812a3a
    :END:
    #+BEGIN_SRC emacs-lisp :tangle yes
      ;; show FIXME/TODO/BUG keywords
      (defun common-hooks/prog-helpers ()
          ;; highlight additional keywords
          (font-lock-add-keywords nil '(("\\<\\(FIXME\\|FIX_ME\\|FIX ME\\):" 1 font-lock-warning-face t)))
          (font-lock-add-keywords nil '(("\\<\\(BUG\\|BUGS\\):" 1 font-lock-warning-face t)))
          (font-lock-add-keywords nil '(("\\<\\(TODO\\|TO DO\\NOTE\\|TBD\\):" 1 font-lock-warning-face t)))
          (font-lock-add-keywords nil '(("\\<\\(DONE\\|HACK\\):" 1 font-lock-doc-face t)))
          ;; highlight too long lines
          (font-lock-add-keywords nil '(("^[^\n]\\{120\\}\\(.*\\)$" 1 font-lock-warning-face t))))
    #+END_SRC
*** packages/modes
    :PROPERTIES:
    :ID:       eaf84ab6-e3df-4c7c-89cd-65515830664f
    :END:
    #+BEGIN_SRC emacs-lisp :tangle yes
      ;;TODO: extend setup
      (use-package compile)
      (use-package multi-compile :ensure t)

      (use-package regex-tool
        :ensure t
        :commands regex-tool)

      (use-package counsel-gtags
        :ensure t
        :after (counsel gtags)
        :delight (counsel-gtags-mode " CGT")
        :hook ((c-mode-hook . counsel-gtags-mode)
               (c++-mode-hook . counsel-gtags-mode))
        :bind (:map c-mode-map
               ("C-M-s" . counsel-gtags-find-symbol)
               ("C-c u" . counsel-gtags-update-tags)
               ("M-," . counsel-gtags-go-backward)
               ("M-." . counsel-gtags-dwim)
               ("M-r" . counsel-gtags-find-reference)
               :map c++-mode-map
               ("C-M-s" . counsel-gtags-find-symbol)
               ("C-c u" . counsel-gtags-update-tags)
               ("M-," . counsel-gtags-go-backward)
               ("M-." . counsel-gtags-dwim)
               ("M-r" . counsel-gtags-find-reference)
               :map counsel-gtags-mode-map
               ("C-M-s" . counsel-gtags-find-symbol)
               ("M-," . counsel-gtags-go-backward)
               ("M-." . counsel-gtags-dwim)
               ("M-r" . counsel-gtags-find-reference))
        :custom
        (counsel-gtags-path-style 'relative)
        (counsel-gtags-ignore-case t)
        (counsel-gtags-auto-update t)
        (counsel-gtags-suggested-key-mapping t))

      (use-package prog-fill
        :ensure t
        :bind (:map prog-mode-map
               ("M-q" . prog-fill)))

      (use-package rainbow-identifiers
        :ensure t
        :hook
        (prog-mode-hook . rainbow-identifiers-mode))

      (use-package rainbow-delimiters
        :ensure t
        :hook
        (prog-mode-hook . rainbow-delimiters-mode))

      (use-package rpm-spec-mode
        :ensure t
        :mode ("\\.spec$" . rpm-spec-mode))

      (use-package ini-mode
        :ensure t
        :mode ("\\.ini\\'" . ini-mode))

      (use-package po-mode
        :ensure t
        :mode ("\\.po$\\|\\.po\\." . po-mode))

      (use-package gud
        :mode ("\\.gdb$" . gdb-script-mode))

      (use-package diff-mode
        :mode ("diff" . diff-mode))

      (use-package make-mode
        :mode ("[Mm]akefile" . makefile-mode))

      ;; TODO: (alex3rd) extend setup
      (use-package format-all :ensure t)

      (use-package skeletor
        :ensure t
        :custom
        (skeletor-project-directory (at-workspace-dir "pets")))
    #+END_SRC
** vcs
*** git
    :PROPERTIES:
    :ID:       55dea188-0ba1-40da-b7b0-819246bc9500
    :END:
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package magit
        :ensure t
        :after (async dash with-editor git-commit magit-popup)
        :commands magit-status magit-blame
        :mode (("COMMIT_EDITMSG" . conf-javaprop-mode)
               ("COMMIT" . git-commit-mode))
        :bind (:map magit-status-mode-map
               ("E" . magit-rebase-interactive)
               ("q" . custom/magit-kill-buffers))
        :preface
        (defun open-global-repos-list ()
          (interactive)
          (let ((repos-buffer (get-buffer "*Magit Repositories*")))
            (if repos-buffer
                (switch-to-buffer repos-buffer)
              (magit-list-repositories))))
        (defun custom/magit-restore-window-configuration (&optional kill-buffer)
          "Bury or kill the current buffer and restore previous window configuration."
          (let ((winconf magit-previous-window-configuration)
                (buffer (current-buffer))
                (frame (selected-frame)))
            (quit-window kill-buffer (selected-window))
            (when (and winconf (equal frame (window-configuration-frame winconf)))
              (set-window-configuration winconf)
              (when (buffer-live-p buffer)
                (with-current-buffer buffer
                  (setq magit-previous-window-configuration nil))))))
        (defun custom/magit-kill-buffers ()
          "Restore window configuration and kill all Magit buffers."
          (interactive)
          (let ((buffers (magit-mode-get-buffers)))
            (magit-restore-window-configuration)
            (mapc #'kill-buffer buffers)))
        :custom
        (magit-completing-read-function 'ivy-completing-read)
        (magit-blame-heading-format "%H %-20a %C %s")
        (magit-diff-refine-hunk t)
        (magit-display-buffer-function 'magit-display-buffer-fullframe-status-topleft-v1)
        (magit-repository-directories private/magit-repositories)
        :config
        (use-package magit-filenotify
          :ensure t
          :delight (magit-filenotify-mode " FN")
          :after magit
          :hook (magit-status-mode-hook . (lambda ()
                                            (condition-case nil
                                                (magit-filenotify-mode)
                                              (error (magit-filenotify-mode -1))))))
        (use-package vdiff-magit
          :ensure t
          :bind (:map magit-mode-map
                      ("d" . vdiff-magit-dwim)
                      ("p" . vdiff-magit-popup))
          :config
          (setcdr (assoc ?e (plist-get magit-dispatch-popup :actions))
                  '("vdiff dwim" 'vdiff-magit-dwim))
          (setcdr (assoc ?E (plist-get magit-dispatch-popup :actions))
                  '("vdiff popup" 'vdiff-magit-popup))))

      (use-package magithub
        :disabled
        :ensure t
        :after (magit)
        :custom
        (magithub-clone-default-directory (at-workspace-dir "foss"))
        :config
        (magithub-feature-autoinject t))

      (use-package git-timemachine
        :ensure t
        :after (ivy)
        :demand t
        :preface
        ;; credits to @binchen
        (defun custom/git-timemachine-show-selected-revision ()
          "Show last (current) revision of file."
          (interactive)
          (let* ((collection (mapcar (lambda (rev)
                                       ;; re-shape list for the ivy-read
                                       (cons (concat (substring-no-properties (nth 0 rev) 0 7) "|" (nth 5 rev) "|" (nth 6 rev)) rev))
                                     (git-timemachine--revisions))))
            (ivy-read "commits:"
                      collection
                      :action (lambda (rev)
                                ;; compatible with ivy 9+ and ivy 8
                                (unless (string-match-p "^[a-z0-9]*$" (car rev))
                                  (setq rev (cdr rev)))
                                (git-timemachine-show-revision rev))
                      :unwind (lambda () (if (not (eq last-command-event 13))
                                             (git-timemachine-quit))))))
        (defun custom/git-timemachine ()
          "Open git snapshot with the selected version.  Based on ivy-mode."
          (interactive)
          (git-timemachine--start #'custom/git-timemachine-show-selected-revision)))

      (use-package gitignore-mode
        :ensure t
        :mode ("^.gitignore$" . gitignore-mode))

      ;; think of relocating, cause it supports not only Git
      (use-package diff-hl
        :ensure t
        :hook (magit-post-refresh-hook . diff-hl-magit-post-refresh)
        :config
        (global-diff-hl-mode 1))

      (use-package git-msg-prefix
        :ensure t
        :bind (:map git-commit-mode-map
               ("C-c i" . commit-msg-prefix))
        :custom
        (git-msg-prefix-log-flags " --since='1 week ago' ")
        (commit-msg-prefix-input-method 'ivy-read))
    #+END_SRC
**** BACKLOG [#A] find some way (maybe smth like spacemacs dashboard) to represent the states of repos from some list (either hardcoded or created dynamically), with unstaged/unpushed/whatever_useful info displayed
*** tools
    :PROPERTIES:
    :ID:       32595eee-b431-4a3b-aa90-4bf77268a449
    :END:
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package smerge-mode
        :hook (find-file-hooks . (lambda ()
                                   (save-excursion
                                     (goto-char (point-min))
                                     (when (re-search-forward "^<<<<<<< " nil t)
                                       (smerge-mode 1))))))
    #+END_SRC
**** BACKLOG try to make hydra, neat functions detected
*** hydra
    :PROPERTIES:
    :ID:       cad1e463-7d2c-48b9-bf6e-11df3e6cea89
    :END:
    #+BEGIN_SRC emacs-lisp :tangle yes
      (defhydra hydra-vcs ()
        "
        PROJECT: %(projectile-project-root)

        Magit               Additional
        -----------------------------------------
        _s_: status         _k_ smerge / goto prev conflict
        _l_: log            _j_ smerge / goto next conflict
        _f_: file log       _l_ Show repositories _l_ist
        _r_: reflog
        _w_: diff worktree
        _t_: time machine
        _b_: blame
        _c_: checkout
        _B_: branch mgr
        "
        ("s" magit-status :color blue)
        ("f" magit-log-buffer-file :color blue)
        ("c" magit-checkout :color blue)
        ("w" magit-diff-working-tree :color blue)
        ("r" magit-reflog :color blue)
        ("b" magit-blame :color blue)
        ("B" magit-branch-manager :color blue)
        ("l" magit-log :color blue)
        ("t" custom/git-timemachine :color blue)
        ("k" smerge-prev "previous conflict")
        ("j" smerge-next "next conflict")
        ("l" open-global-repos-list :color blue))
      (global-set-key (kbd "C-'") 'hydra-vcs/body)
    #+END_SRC
** languages
*** common
    :PROPERTIES:
    :ID:       d641747c-bda2-4c36-ac7f-9fbaee986ee0
    :END:
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package info-look)

      (use-package highlight-stages
        :ensure t
        :hook ((emacs-lisp-mode-hook lisp-mode-hook) . highlight-stages-mode)
        :delight highlight-stages-mode)
    #+END_SRC
*** elisp
    :PROPERTIES:
    :ID:       133554f2-800c-481d-8bcf-252753c28efd
    :END:
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package edebug-x :ensure t)

      (use-package elisp-slime-nav
        :delight elisp-slime-nav-mode
        :ensure t
        :hook ((emacs-lisp-mode-hook ielm-mode-hook) . elisp-slime-nav-mode))

      (use-package elisp-mode
        :hook ((emacs-lisp-mode-hook . (lambda ()
                                         (auto-fill-mode 1)
                                         (setq indent-tabs-mode nil)
                                         (setq comment-start ";;")
                                         (turn-on-eldoc-mode)))
               (emacs-lisp-mode-hook . common-hooks/prog-helpers)
               (emacs-lisp-mode-hook . common-hooks/newline-hook)))

      (use-package company-elisp
        :after (elisp-mode company)
        :config
        (add-to-list 'company-backends 'company-elisp))

      (add-hook 'eval-expression-minibuffer-setup-hook #'eldoc-mode)
      (add-hook 'eval-expression-minibuffer-setup-hook #'eldoc-mode)

      (dolist (mode '(paredit-mode smartparens-mode))
        (when (fboundp mode)
          (add-hook 'eval-expression-minibuffer-setup-hook mode)))
    #+END_SRC
*** lisp
    :PROPERTIES:
    :ID:       4aca675a-9557-41a4-8fe2-121fab08fdfd
    :END:
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package slime
        :ensure t
        :pin melpa-stable ;; corresponds to quicklisp version
        :hook ((lisp-mode-hook . (lambda ()
                                   (slime-mode t)
                                   (set (make-local-variable 'slime-lisp-implementations)
                                        (list (assoc 'sbcl slime-lisp-implementations)))))
               (inferior-lisp-mode-hook . inferior-slime-mode)
               (slime-mode-hook . (lambda () (when (> emacs-major-version 25)
                                               (slime-autodoc-mode -1)))) ;; some signature down the call stack is broken in 2.20
               (lisp-mode-hook . (lambda ()
                                   (auto-fill-mode 1)
                                   (setq indent-tabs-mode nil)))
               (lisp-mode-hook . common-hooks/newline-hook)
               (lisp-mode-hook . common-hooks/prog-helpers))
        :init
        (use-package slime-autoloads)
        :custom
        (slime-complete-symbol*-fancy t)
        (slime-complete-symbol-function 'slime-fuzzy-complete-symbol)
        (slime-net-coding-system 'utf-8-unix)
        :config
        (defadvice slime-documentation-lookup
            (around change-browse-url-browser-function activate)
          "Use w3m for slime documentation lookup."
          (let ((browse-url-browser-function 'w3m-browse-url))
            ad-do-it))
        (slime-setup
         '(slime-fancy-inspector slime-fancy-trace slime-fontifying-fu
           slime-hyperdoc slime-package-fu slime-references slime-trace-dialog
           slime-xref-browser slime-asdf slime-autodoc slime-banner slime-fancy
           slime-fuzzy slime-repl slime-sbcl-exts))
        (add-to-list 'slime-lisp-implementations '(sbcl ("sbcl")  :coding-system utf-8-unix)))

      ;;TODO: check if there is any conflict inconsistency between slime-builtin/company completion
      (use-package slime-company
        :ensure t
        :after (slime company))

      (setq custom/hyperspec-root "~/help/HyperSpec/")

      (use-package inf-lisp
        :config
        (setq inferior-lisp-program "sbcl"))

      (use-package common-lisp-snippets
        :ensure t
        :after (yasnippet))

      ;; lookup information in hyperspec
      (info-lookup-add-help
       :mode 'lisp-mode
       :regexp "[^][()'\" \t\n]+"
       :ignore-case t
       :doc-spec '(("(ansicl)Symbol Index" nil nil nil)))

      (defhydra hydra-slime ()
        "
      Slime
      -----------
      _s_ run
      _l_ selector
      _;_ insert balanced comments
      _M-;_ remove balanced comments
      _h_ documentation lookup
      "
        ("s" slime "run slime" :color blue)
        ("l" slime-selector "slime selector" :color blue)
        (";" slime-insert-balanced-comments)
        ("M-;" slime-remove-balanced-comments)
        ("h" slime-documentation-lookup)
        ("q" nil "cancel"))
      (global-set-key (kbd "M-p") 'hydra-slime/body)
    #+END_SRC
*** python                                                               :review:
    :PROPERTIES:
    :ID:       ebee8721-2700-4182-850c-cfb29daadfb8
    :END:
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package jedi-core
        :ensure t
        :hook (python-mode-hook . jedi:setup)
        :bind (:map python-mode-map
               ("M-/" . jedi:show-doc))
        :custom
        (jedi:complete-on-dot t)
        (jedi:goto-definition-marker-ring-length 32)
        (jedi:tooltip-method nil)
        (epc:accept-process-timeout 200)
        (jedi:get-in-function-call-timeout 0)
        (jedi:get-in-function-call-delay 0)
        (jedi:goto-definition-config '((nil definition nil)))
        (jedi:use-shortcuts t))

      (use-package company-jedi
        :ensure t
        :after (company jedi-core)
        :config
        (add-to-list 'company-backends 'company-jedi))

      (use-package python-mode
        :ensure t
        :mode ("\\.py$" . python-mode)
        :hook ((python-mode-hook . common-hooks/prog-helpers)
               (python-mode-hook . common-hooks/newline-hook)
               (python-mode-hook . (lambda ()
                                     (setq flycheck-checker 'python-flake8)
                                     (setq indent-tabs-mode nil)
                                     (setq tab-width 4)
                                     (setq imenu-create-index-function 'imenu-default-create-index-function)
                                     (modify-syntax-entry ?_ "." python-mode-syntax-table)
                                     (modify-syntax-entry ?- "." python-mode-syntax-table)
                                     (auto-fill-mode 1)))
               ;; Highlight the call to ipdb, src http://pedrokroger.com/2010/07/configuring-emacs-as-a-python-ide-2/
               (python-mode-hook . (lambda ()
                                     (highlight-lines-matching-regexp "import ipdb")
                                     (highlight-lines-matching-regexp "ipdb.set_trace()")
                                     (highlight-lines-matching-regexp "import wdb")
                                     (highlight-lines-matching-regexp "wdb.set_trace()"))))
        :bind (:map python-mode-map
               ("<M-left>" . py-shift-indent-left)
               ("<M-right>" . py-shift-indent-right))
        :config
        (add-function :before-until (local 'eldoc-documentation-function)
                      #'(lambda () "")))

      (use-package python-environment
        :ensure t
        :disabled
        :custom
        (setq python-environment-directory (at-user-data-dir ".python-environments")))

      (use-package virtualenvwrapper
        :ensure t
        :no-require t
        :hook (projectile-after-switch-project-hook . venv-projectile-auto-workon)
        :config
        (setq venv-location (at-homedir ".virtualenvs/"))
        (setq-default mode-line-format (cons '(:exec venv-current-name) mode-line-format)))

      (use-package smartparens-python
        :after (smartparens))

      (use-package flycheck-pycheckers
        :ensure t
        :no-require t
        :hook (flycheck-mode-hook . flycheck-pycheckers-setup)
        :after (flycheck))

      (use-package py-autopep8 :ensure t)

      (use-package importmagic
        :ensure t
        :disabled
        :hook (python-mode-hook . importmagic-mode))

      (use-package py-isort
        :ensure t
        :disabled) ;; TODO: bind py-isort-{buffer, region}

      (use-package pip-requirements
        :ensure t
        :delight (pip-requirements-mode "PyPA Requirements")
        :preface
        (defun custom/pip-requirements-ignore-case ()
          (setq-local completion-ignore-case t))
        :mode ("requirements\\." . pip-requirements-mode)
        :hook (pip-requirements-mode . custom/pip-requirements-ignore-case))
    #+END_SRC
***** BACKLOG imports/formatting automation (search elpy/standalone extensions)
****** isort
***** BACKLOG fix new setup
****** incorrect flake8 config (excludes)
****** check/add W0512
****** automatic venv changing per project fails
****** with active venv some "cannot import.." messages still persist
****** check epc/importmagic work
****** actualize py-isort setup
****** review pylint setup
*** cc
**** specialization for PostgreSQL development
     :PROPERTIES:
     :ID:       3ecd6265-28ad-4dab-9d73-95073d47e2f9
     :END:
     #+BEGIN_SRC emacs-lisp :tangle yes
       (defun pgsql-c-mode ()
         ;; sets up formatting for PostgreSQL C code
         (interactive)
         (c-mode)
         (setq-default tab-width 4)
         (c-set-style "bsd")             ; set c-basic-offset to 4, plus other stuff
         (c-set-offset 'case-label '+)   ; tweak case indent to match PG custom
         (setq fill-column 79)           ; matches what pgindent does
         (setq indent-tabs-mode t))      ; make sure we keep tabs when indenting
     #+END_SRC
**** packages
     :PROPERTIES:
     :ID:       4a59c96b-705d-4511-a0a5-1ec836cf3803
     :END:
     #+BEGIN_SRC emacs-lisp :tangle yes
       (use-package cc-mode
         :hook (((c++-mode-hook c-mode-hook) . common-hooks/newline-hook)
                (c-mode-common-hook . common-hooks/prog-helpers)
                ((c++-mode-hook c-mode-hook) . flycheck-mode))
         :mode (("\\.ipp?$" . c++-mode)
                ("\\.h$" . c++-mode)
                ("CMakeLists\\.txt\\'" . cmake-mode)
                ("\\.cmake\\'" . cmake-mode)
                ("\\(postgres\\|pgsql\\).*\\.[ch]\\'" . pgsql-c-mode)
                ("\\(postgres\\|pgsql\\).*\\.cc\\'" . pgsql-c-mode)))

       (use-package company-c-headers
         :ensure t
         :after (company))

       (use-package function-args
         :ensure t
         :after (swiper cc-mode)
         :bind (:map c-mode-map
                ("C-c C-<tab>" . moo-complete)
                ("C-c j" . moo-jump-local)
                :map c++-mode-map
                ("C-c C-<tab>" . moo-complete)
                ("C-c j" . moo-jump-local)))

       (use-package rtags
         :ensure t
         :after (cc-mode)
         :bind (:map c-mode-base-map
                ("M-." . tags-find-symbol-at-point)
                ("M-," . tags-find-references-at-point)
                ("M-;" . tags-find-file)
                ("C-." . tags-find-symbol)
                ("C-," . tags-find-references)
                ("C-<" . rtags-find-virtuals-at-point)
                :map global-map
                ("M-." . tags-find-symbol-at-point)
                ("M-," . tags-find-references-at-point)
                ("M-;" . tags-find-file)
                ("C-." . tags-find-symbol)
                ("C-," . tags-find-references)
                ("C-<" . rtags-find-virtuals-at-point))
         :preface
         (defun use-rtags (&optional useFileManager)
           (and (rtags-executable-find "rc")
                (cond ((not (gtags-get-rootpath)) t)
                      ((and (not (eq major-mode 'c++-mode))
                            (not (eq major-mode 'c-mode))) (rtags-has-filemanager))
                      (useFileManager (rtags-has-filemanager))
                      (t (rtags-is-indexed)))))
         (defun tags-find-symbol-at-point (&optional prefix)
           (interactive "P")
           (if (and (not (rtags-find-symbol-at-point prefix)) rtags-last-request-not-indexed)
               (gtags-find-tag)))
         (defun tags-find-references-at-point (&optional prefix)
           (interactive "P")
           (if (and (not (rtags-find-references-at-point prefix)) rtags-last-request-not-indexed)
               (gtags-find-rtag)))
         (defun tags-find-symbol ()
           (interactive)
           (call-interactively (if (use-rtags) 'rtags-find-symbol 'gtags-find-symbol)))
         (defun tags-find-references ()
           (interactive)
           (call-interactively (if (use-rtags) 'rtags-find-references 'gtags-find-rtag)))
         (defun tags-find-file ()
           (interactive)
           (call-interactively (if (use-rtags t) 'rtags-find-file 'gtags-find-file)))
         :custom
         (rtags-completions-enabled t)
         (rtags-autostart-diagnostics t)
         :config
         (use-package company-rtags
           :ensure t
           :after (company))
         (use-package flycheck-rtags
           :ensure t
           :hook (c-mode-common-hook . (lambda ()
                                         (flycheck-select-checker 'rtags)
                                         (setq-local flycheck-highlighting-mode nil) ;; RTags creates more accurate overlays.
                                         (setq-local flycheck-check-syntax-automatically nil)))))

       (use-package flycheck-clang-analyzer :ensure t)

       (info-lookup-add-help
        :mode 'c-mode
        :regexp "[^][()'\" \t\n]+"
        :ignore-case t
        :doc-spec '(("(libc)Symbol Index" nil nil nil)))
     #+END_SRC
**** TBD
***** BACKLOG review and maybe rebind keys
*** golang
    :PROPERTIES:
    :ID:       a11c0b98-c406-4f14-99c3-8ef24f4624c9
    :END:
    #+BEGIN_SRC emacs-lisp :tangle yes
      ;;TODO: some harness either here or withoin shell to automate the burden of setting up new golang project's boilerplate

      (use-package go-mode
        :ensure t
        :no-require t
        :after (multi-compile)
        :mode ("\\.go$" . go-mode)
        :hook (before-save-hook . gofmt-before-save)
        :config
        (use-package godoctor :ensure t)
        (setq  gofmt-command "goimports")
        (add-to-list 'multi-compile-alist
                     '(go-mode . (("go-build/git" "go build -v"
                                   (locate-dominating-file buffer-file-name ".git")) ;;TODO: try to guess binary name from project name (investigate how this refers to libraries builds, etc.)
                                  ("go-build/main" "go build -v"
                                   (locate-dominating-file buffer-file-name "main.go"))
                                  ("go-build-and-run/git" "go build -v && echo '########## build finished ##########' && eval ./${PWD##*/}"
                                   (multi-compile-locate-file-dir ".git"))
                                  ("go-build-and-run/main" "go build -v && echo '########## build finished ##########' && eval ./${PWD##*/}"
                                   (multi-compile-locate-file-dir "main.go")))))
        (bind-key (kbd "C-c C-c") 'multi-compile-run go-mode-map)
        (bind-key (kbd "M-.") 'godef-jump go-mode-map)
        (bind-key (kbd "M-,") 'pop-tag-mark go-mode-map))

      (use-package company-go
        :ensure t
        :after (go-mode company)
        :config
        (add-to-list 'company-backends 'company-go))

      (use-package go-guru
        :ensure t
        :hook (go-mode-hook . go-guru-hl-identifier-mode))

      (use-package flycheck-gometalinter
        :ensure t
        :custom
        ;; only run fast linters
        (flycheck-gometalinter-fast t)
        ;; use in tests files
        (flycheck-gometalinter-test t)
        (flycheck-gometalinter-deadline "10s")
        ;; gometalinter: skips 'vendor' directories and sets GO15VENDOREXPERIMENT=1
        (flycheck-gometalinter-vendor t)
        ;; gometalinter: only enable selected linters
        (flycheck-gometalinter-disable-all t)
        (flycheck-gometalinter-enable-linters
         '("golint" "vet" "vetshadow" "golint" "ineffassign" "goconst" "errcheck" "deadcode"))
        :config
        (flycheck-gometalinter-setup))

      (use-package go-eldoc
        :ensure t
        :hook (go-mode-hook . go-eldoc-setup))

      (use-package gotest
        :ensure t
        :after (go-mode)
        :bind (:map go-mode-map
               ("C-c C-x f" . go-test-current-file)
               ("C-c C-x t" . go-test-current-test)
               ("C-c C-x p" . go-test-current-project)
               ("C-c C-x T" . go-test-current-benchmark)
               ("C-c C-x F" . go-test-current-file-benchmarks)
               ("C-c C-x P" . go-test-current-project-benchmarks)
               ("C-c C-x x" . go-run)))

      (use-package govet
        :ensure t)

      (use-package go-tag
        :ensure t
        :no-require t
        :after (go-mode)
        :bind (:map go-mode-map
               ("C-c t" . go-tag-add)
               ("C-c T" . go-tag-remove))
        :custom
        (go-tag-args '("-transform" "camelcase")))

      (use-package go-fill-struct
        :ensure t
        :disabled t ;;TODO: figure out how to actually use it
        :after (go-mode))

      (use-package go-playground
        :ensure t
        :after (go-mode))

      (use-package gorepl-mode
        :ensure t
        :hook (go-mode-hook . gorepl-mode))
    #+END_SRC
**** BACKLOG try to integrate https://getgb.io/
*** lua
    :PROPERTIES:
    :ID:       6f132b0e-a71f-467c-9dd5-5dad03db781b
    :END:
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package lua-mode
        :ensure t
        :preface
        (defun lua-broken-indentation-fix ()
          (save-excursion
            (lua-forward-line-skip-blanks 'back)
            (let* ((current-indentation (current-indentation))
                   (line (thing-at-point 'line t))
                   (busted-p (s-matches?
                              (rx (+ bol (* space)
                                     (or "context" "describe" "it" "setup" "teardown")
                                     "("))
                              line)))
              (when busted-p
                (+ current-indentation lua-indent-level)))))
        (defun rgc-lua-calculate-indentation-override (old-function &rest arguments)
          (or (lua-broken-indentation-fix)
              (apply old-function arguments)))
        :mode ("\\.lua$" . lua-mode)
        :hook (lua-mode-hook . (lambda ()
                                 (setq flycheck-checker 'lua-luacheck)))
        :config
        (advice-add #'lua-calculate-indentation-override
                    :around #'rgc-lua-calculate-indentation-override))

      (use-package company-lua
        :ensure t
        :after (lua-mode company))
    #+END_SRC
*** NixOS
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package nix-mode
        :ensure t
        :mode ((rx (eval "nix") (zero-or-more anything) eol) . nix-mode))

      (use-package nixos-options
        :ensure t
        :disabled)

      (use-package company-nixos-options
        :ensure t
        :config
        (add-to-list 'company-backends 'company-nixos-options))
    #+END_SRC
*** other
    :PROPERTIES:
    :ID:       14b5a898-7acf-4f43-8d3c-3c86926e5bba
    :END:
    Languages without much extra customization are going precisely here
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package actionscript-mode
        :ensure t
        :mode ("\\.actionscript" . actionscript-mode))

      (use-package json-mode
        :after (json-reformat json-snatcher)
        :mode ("\\.json$" . json-mode))

      (use-package rust-mode
        :ensure t
        :mode ("\\.rs" . rust-mode))
    #+END_SRC
** webdev
*** setup
    :PROPERTIES:
    :ID:       73d9af60-e617-48c7-b5b2-26830d73f6b0
    :END:
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package sgml-mode
        :bind (:map html-mode-map
               ("C-c C-w" . html-wrap-in-tag)))

      (use-package markdown-mode
        :ensure t

        :mode (("\\.markdown$" . markdown-mode)
               ("\\.md$" . markdown-mode)
               ("\\.mkd$" . markdown-mode)
               ("\\.pdc$" . markdown-mode)
               ("\\.README$" . markdown-mode))
        :bind (:map markdown-mode-map
               ("C-c C-v" . markdown-preview)
               ("C-<tab>" . yas/expand)))

      (use-package graphql-mode
        :ensure t
        :mode ("\\.graphql$" . graphql-mode))

      (use-package web-mode
        :ensure t
        :mode (("\\.phtml\\'" . web-mode)
               ("\\.tpl\\.php\\'" . web-mode)
               ("\\.[agj]sp\\'" . web-mode)
               ("\\.as[cp]x\\'" . web-mode)
               ("\\.erb\\'" . web-mode)
               ("\\.mustache\\'" . web-mode)
               ("\\.djhtml\\'" . web-mode)
               ("\\.html?\\'" . web-mode))
        :bind (:map web-mode-map
               ("M-SPC" . company-complete)) ;; manual autocomplete
        :hook (web-mode-hook . (lambda ()
                                 (set (make-local-variable 'company-backends)
                                      '(company-tern company-web-html company-yasnippet company-files))
                                 (company-mode t)))
        :custom
        (web-mode-enable-current-element-highlight t)
        (web-mode-enable-auto-closing t)
        (web-mode-enable-auto-expanding t)
        (web-mode-enable-auto-pairing t)
        (web-mode-enable-auto-quoting t)
        (web-mode-enable-css-colorization t)
        (web-mode-markup-indent-offset 2)
        (web-mode-code-indent-offset 2)
        (web-mode-css-indent-offset 2)
        :config
        (use-package company-web
          :ensure t
          :after (company dash web-completion-data))
        (use-package web-mode-edit-element
          :ensure t
          :hook (web-mode-hook . web-mode-edit-element-minor-mode))
        (use-package web-narrow-mode
          :ensure t
          :hook (web-mode-hook . web-narrow-mode))
        (add-to-list 'web-mode-engines-alist '("django" . "\\.html\\'"))
        ;; Enable JavaScript completion between <script>...</script> etc.
        ;; TODO: check why company and AC are mentioned together (see below)
        (defadvice company-tern (before web-mode-set-up-ac-sources activate)
          "Set `tern-mode' based on current language before running company-tern."
          (message "advice")
          (if (equal major-mode 'web-mode)
              (let ((web-mode-cur-language
                     (web-mode-language-at-pos)))
                (if (or (string= web-mode-cur-language "javascript")
                        (string= web-mode-cur-language "jsx")
                        )
                    (unless tern-mode (tern-mode))
                  (if tern-mode (tern-mode -1)))))))

      (use-package css-mode
        :mode ("\\.scss$" . css-mode))

      (use-package css-eldoc
        :ensure t
        :after (eldoc)
        :hook (css-mode-hook . turn-on-css-eldoc))
    #+END_SRC
*** color helper
    :PROPERTIES:
    :ID:       0d387fc8-4354-42cc-911b-c316221a228e
    :END:
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package rainbow-mode
        :ensure t
        :hook (css-mode-hook . rainbow-mode))
    #+END_SRC
*** emmet mode setup
    :PROPERTIES:
    :ID:       dca077a3-6d96-4286-be6b-49edfec189ca
    :END:
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package emmet-mode
        :ensure t
        :delight emmet-mode
        :commands emmet-mode
        :bind (:map emmet-mode-keymap
               ("C-j" . nil)
               ("<C-return>" . nil)
               ("C-c C-j" . emmet-expand-line))
        :hook ((sgml-mode-hook nxml-mode-hook django-mode sgml-mode-hook css-mode-hook) . emmet-mode)
        :custom
        (emmet-move-cursor-between-quotes t)
        (emmet-indentation 2))
    #+END_SRC
* clients
** restclient
   :PROPERTIES:
   :ID:       628303d1-2a9b-48e9-b2f9-9797d652e2d8
   :END:
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package company-restclient
       :ensure t
       :after (restclient company))

     (use-package ob-restclient
       :ensure org-plus-contrib
       :after (ob restclient)
       :commands (org-babel-execute:restclient))

     (use-package httprepl :ensure t)
   #+END_SRC
** terminal
*** common
    :PROPERTIES:
    :ID:       81643770-7b1b-44f6-b0f3-29dfe82219ee
    :END:
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package ansi-color
        :hook (compilation-filter-hook . (lambda ()
                                           "Colorize from `compilation-filter-start' to `point'."
                                           (let ((inhibit-read-only t))
                                             (ansi-color-apply-on-region
                                              compilation-filter-start (point))))))
    #+END_SRC
*** comint
    :PROPERTIES:
    :ID:       22daa0a4-4d55-4f78-abb1-67bbf1bceebf
    :END:
    #+BEGIN_SRC emacs-lisp :tangle yes
      (define-namespace custom/

      ;;TODO: parametrize shell for terminal
      (defun terminal ()
        "Switch to terminal. Launch if nonexistent."
        (interactive)
        (if (get-buffer "*ansi-term*")
            (switch-to-buffer "*ansi-term*")
          (ansi-term "/bin/zsh"))
        (get-buffer-process "*ansi-term*"))

      (defalias 'tt 'terminal)

      (defun comint-clear-buffer ()
        (interactive)
        (let ((comint-buffer-maximum-size 0))
          (comint-truncate-buffer)))

      (defun term-exec-hook ()
        (let* ((buff (current-buffer))
               (proc (get-buffer-process buff)))
          (set-process-sentinel
           proc
           `(lambda (process event)
              (if (string= event "finished\n")
                  (kill-buffer ,buff))))))

      )

      (use-package term
        :commands term
        :bind (:map term-raw-map
               ("C-c C-y" . term-paste))
        :hook (term-exec-hook . custom/term-exec-hook)
        :custom
        (explicit-shell-file-name "/bin/zsh"))

      (bind-key "\C-c\M-o" 'custom/comint-clear-buffer comint-mode-map)
    #+END_SRC
*** shell/check syntax
    :PROPERTIES:
    :ID:       2637da5b-b7ee-44ac-8fb4-7c3f4120184b
    :END:
    #+BEGIN_SRC emacs-lisp :tangle yes
      (defun custom/sh-check-finish-hook (buf msg)
        "Function, that is executed at the end of sh check"
        (when (not (string-match "finished" msg))
          (next-error 1 t)))

      (define-compilation-mode sh-check-mode "SH"
        "Mode for check sh source code."
        (set (make-local-variable 'compilation-disable-input) t)
        (set (make-local-variable 'compilation-scroll-output) nil)
        (set (make-local-variable 'compilation-finish-functions)
             (list 'custom/sh-check-finish-hook)))

      (use-package shell
        :mode ("\\.sh$" . shell-mode)
        :bind (:map shell-mode-map
                    ("C-c l" . (lambda ()
                                 "Check syntax of current file"
                                 (interactive)
                                 (when (string-match "^\\(ba\\|z\\)sh" (symbol-name sh-shell))
                                   (save-some-buffers t)
                                   (compilation-start (concat (symbol-name sh-shell) " -n " (buffer-file-name))
                                                      'sh-check-mode)))))
        :hook ((shell-mode-hook . ansi-color-for-comint-mode-on)
               (shell-mode-hook . common-hooks/newline-hook)
               (shell-mode-hook . common-hooks/prog-helpers)))

      (use-package company-shell
        :ensure t
        :after (shell company))
    #+END_SRC
**** BACKLOG try to leverage shellcheck util usage
*** tmux
    :PROPERTIES:
    :ID:       dbced8f9-5c3e-4408-854f-99aa26bf3d52
    :END:
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package emamux
        :ensure t
        :bind ("<f12>" . hydra-emamux/body)
        :config
        (defhydra hydra-emamux ()
          "
          _n_ew window
          _s_end region
          _r_un command
          "
          ("n" emamux:new-window)
          ("s" emamux:send-region)
          ("r" emamux:run-command)
          ("q" nil)))
    #+END_SRC
** internal browser (w3m/eww)
   :PROPERTIES:
   :ID:       5b5a4f9f-0802-4b4a-b6c3-55562ac635cf
   :END:
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package w3m
       :ensure t
       :commands w3m
       :hook (w3m-display-hook . (lambda (url)
                                   (rename-buffer
                                    (format "*w3m: %s*" (or w3m-current-title
                                                            w3m-current-url)) t)))
       :custom
       (w3m-coding-system 'utf-8)
       (w3m-file-coding-system 'utf-8)
       (w3m-file-name-coding-system 'utf-8)
       (w3m-input-coding-system 'utf-8)
       (w3m-output-coding-system 'utf-8)
       (w3m-terminal-coding-system 'utf-8)
       (w3m-use-cookies t)
       :config
       ;; special chars
       (standard-display-ascii ?\200 [15])
       (standard-display-ascii ?\201 [21])
       (standard-display-ascii ?\202 [24])
       (standard-display-ascii ?\203 [13])
       (standard-display-ascii ?\204 [22])
       (standard-display-ascii ?\205 [25])
       (standard-display-ascii ?\206 [12])
       (standard-display-ascii ?\210 [23])
       (standard-display-ascii ?\211 [14])
       (standard-display-ascii ?\212 [18])
       (standard-display-ascii ?\214 [11])
       (standard-display-ascii ?\222 [?\'])
       (standard-display-ascii ?\223 [?\"])
       (standard-display-ascii ?\224 [?\"])
       (standard-display-ascii ?\227 " -- "))

     (use-package w3m-search
       :after (w3m)
       :config
       (add-to-list 'w3m-search-engine-alist
                    '("emacs-wiki" "http://www.emacswiki.org/cgi-bin/wiki.pl?search=%s")))

     (use-package eww
       :preface
       (defun eww-more-readable () ;;TODO: add to appropriate hook
         "Makes eww more pleasant to use. Run it after eww buffer is loaded."
         (interactive)
         (setq eww-header-line-format nil) ;; removes page title
         (setq mode-line-format nil) ;; removes mode-line
         (set-window-margins (get-buffer-window) 20 20) ;; increases size of margins
         (redraw-display) ;; apply mode-line changes
         (eww-reload 'local))) ;; apply eww-header changes
   #+END_SRC
** MPD
   :PROPERTIES:
   :ID:       bf28ef56-a90e-42b4-855d-84a6437c77b5
   :END:
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package mingus
       :ensure t
       :bind (("C-c m" . hydra-mingus/body)
              :map mingus-playlist-map
              ("<Backspace>" . mingus-del))
       :config
       (use-package libmpdee :ensure t)
       (defhydra hydra-mingus ()
         "
       Control               Playlist
       ------------------------------
       _<up>_ volume up        _s_ show playlist
       _<down>_ volume down    _/_ search for tracks
       _<right>_ seek forward
       _<left>_ seek backward
       "
         ("s" mingus "open mingus")
         ("/" mingus-search "Search")
         ("<up>" (dotimes (i 5) (mingus-vol-up)) "Louder")
         ("<down>" (dotimes (i 5) (mingus-vol-down)) "Quieter")
         ("<right>" mingus-seek "seek forward")
         ("<left>" mingus-seek-backward "seek backward")
         ("q" nil "cancel")))
   #+END_SRC
** EMMS
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package emms
       :ensure t
       :config
       (use-package emms-setup)
       (use-package emms-player-mpv)
       (emms-standard)
       (emms-default-players)
       ;; (define-emms-simple-player mpv '(file url)
       ;;   (regexp-opt '(".ogg" ".mpg" ".mpeg" ".wmv" ".wma"
       ;;                 ".mov" ".avi" ".divx" ".ogm" ".asf"
       ;;                 ".mkv" ".rm" ".rmvb" ".mp4" ".vob"
       ;;                 ".m4a" ".flv" ".ogv" "http://" "mms://"))
       ;;   "mpv")
       )

     (use-package emms-info-mediainfo
       :ensure t
       :after (emms))

     (use-package emms-mark-ext
       :ensure t
       :after (emms))

     (use-package emms-mode-line-cycle
       :ensure t
       :after (emms))

     (use-package emms-player-simple-mpv
       :ensure t
       :after (emms))

     (use-package emms-soundcloud
       :ensure t
       :after (emms))

     (use-package emms-state
       :ensure t
       :after (emms))
   #+END_SRC
** open ebooks internally
   :PROPERTIES:
   :ID:       27a0775b-b056-4eb1-80e2-086bc44cb8b8
   :END:
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package nov
       :ensure t
       :mode ("\\.epub\\'" . nov-mode))

     (use-package fb2-mode
       :quelpa
       (fb2-mode :repo "spline1986/fb2-mode" :fetcher github :version original)
       :mode ("\\.fb2\\'" . fb2-mode)
       :hook (fb2-mode-hook . (lambda () (smooth-scrolling-mode 1)))
       :custom
       (fb2-replace-hard-space t))

     (use-package pdf-tools
       :pin manual
       :ensure t
       :hook (after-init-hook . pdf-tools-install)
       :config
       (use-package pdf-view
         :ensure nil
         :mode ("\\.pdf$" . pdf-view-mode)
         ;; :magic ("%PDF" . pdf-view-mode)
         :preface
         (defun custom/scroll-other-window (&optional arg)
           (interactive "P")
           (awhen (ignore-errors (other-window-for-scrolling))
             (let* ((buffer (window-buffer it))
                    (mode (with-current-buffer buffer major-mode)))
               (cond
                ((eq mode 'pdf-view-mode)
                 (save-selected-window
                   (select-window it)
                   (with-current-buffer buffer
                     (pdf-view-next-page (cond ((eq arg '-) -1)
                                               ((numberp arg) arg)
                                               (t 1))))))
                (t (scroll-other-window arg))))))
         :bind (("C-M-v" . custom/scroll-other-window)
                :map pdf-view-mode-map
                ("C-s" . isearch-forward)
                ("h" . pdf-annot-add-highlight-markup-annotation)
                ("t" . pdf-annot-add-text-annotation)
                ("y" . pdf-view-kill-ring-save)
                ("D" . pdf-annot-delete))
         :hook ((after-init-hook . pdf-tools-install)
                (pdf-view-mode-hook . pdf-isearch-minor-mode)
                ;; (pdf-tools-enabled-hook . pdf-view-midnight-minor-mode)
                (pdf-view-mode-hook . (lambda () (cua-mode -1)))) ;; turn off cua so copy works
         :custom
         (pdf-view-midnight-colors (quote ("white smoke" . "#002b36"))) ;; more brightness in midnight mode
         (pdf-view-resize-factor 1.1) ;; more fine-grained zooming
         (pdf-view-display-size 'fit-page))
       (use-package pdf-annot
         :ensure nil
         :bind (:map pdf-annot-edit-contents-minor-mode-map
                     ("<return>" . pdf-annot-edit-contents-commit)
                     ("<S-return>" . newline))
         :custom
         (pdf-annot-activate-created-annotations t)
         :config
         (advice-add 'pdf-annot-edit-contents-commit :after 'save-buffer) ;; save after adding comment
         ))
   #+END_SRC
** email
*** common
    :PROPERTIES:
    :ID:       5b4ffaf1-14e1-4ecb-b08f-9bbf3be90413
    :END:
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package footnote)

      (use-package sendmail
        :custom
        (mail-specify-envelope-from t)
        (mail-envelope-from 'header)
        (send-mail-function 'sendmail-send-it))

      (use-package message
        :hook (message-mode-hook . turn-on-orgtbl)
        :custom
        (message-sendmail-envelope-from 'header)
        (message-kill-buffer-on-exit t))
    #+END_SRC
*** notmuch
    :PROPERTIES:
    :ID:       18ebc99a-8bc4-4f0b-9e11-9b388c9170d6
    :END:
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package notmuch
        :ensure t
        :no-require t
        :commands notmuch
        :bind (:map notmuch-search-mode-map
               ("!" . (lambda ()
                        "toggle unread tag for thread"
                        (interactive)
                        (if (member "unread" (notmuch-search-get-tags))
                            (notmuch-search-tag '("-unread" "-spam"))
            (notmuch-search-tag '("+unread")))))
               ("g" . notmuch-refresh-this-buffer)
               :map notmuch-message-mode-map
               ("#" . mml-attach-file))
        :hook ((notmuch-hello-refresh-hook . (lambda ()
                                               (if (and (eq (point) (point-min))
                                                        (search-forward "Saved searches:" nil t))
                                                   (progn
                                                     (forward-line)
                                                     (widget-forward 1))
                                                 (if (eq (widget-type (widget-at)) 'editable-field)
                                                     (beginning-of-line)))))
               (message-setup-hook . mml-secure-message-sign-pgpmime))  ;; Crypto Settings
        :custom
        (mm-text-html-renderer 'w3m)
        (notmuch-mua-compose-in 'current-window)
        (notmuch-identities private/gmail-accounts)
        (notmuch-fcc-dirs private/notmuch-fcc-dirs)
        (notmuch-search-line-faces '(("unread" . (:foreground "white"))
                                     ("deleted" . (:foreground "red" :background "blue"))))
        (notmuch-saved-searches private/notmuch-saved-searches)
        (notmuch-crypto-process-mime t) ; Automatically check signatures
        (notmuch-hello-hide-tags (quote ("killed")))
        (notmuch-address-command "notmuch-addrlookup"))

      (use-package org-notmuch
        :after (org notmuch))

      (use-package counsel-notmuch
        :ensure t
        :after (counsel notmuch)
        :commands counsel-notmuch)
    #+END_SRC
**** BACKLOG try tagging from https://asynchronous.in/2017/04/21/Email-with-notmuch-and-astroid/
** security
*** packages
    :PROPERTIES:
    :ID:       cec54d13-16be-4e61-850f-37f7ba2aeb0e
    :END:
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package pass :ensure t)

      (use-package ivy-pass :ensure t)
    #+END_SRC
*** hydras
    :PROPERTIES:
    :ID:       9f0fcd37-4dc5-4444-b429-dea775bb9b32
    :END:
    #+BEGIN_SRC emacs-lisp :tangle yes
      (defhydra hydra-security (:idle 1.0)
        ("p" pass "pass" :color blue)
        ("!" ivy-pass "Ivy interface to Pass" :color blue)
        ("q" nil "cancel"))
      (global-set-key (kbd "<f6>") 'hydra-security/body)
    #+END_SRC
** various useful packages
   :PROPERTIES:
   :ID:       52e2700e-1695-4382-b0ef-992b1f575976
   :END:
   #+BEGIN_SRC emacs-lisp :tangle yes
     (imagemagick-register-types)

     (use-package google-translate
       :ensure t
       :bind (("C-c C-t" . google-translate-at-point)
              ("C-c C-T" . google-translate-smooth-translate))
       :init
       (use-package google-translate-default-ui))

     (use-package wttrin
       :ensure t
       :after (xterm-color)
       :custom
       (wttrin-default-cities '("Moscow")))

     (use-package webpaste
       :ensure t
       :bind ("M-t" . hydra-transpose/body)
       :config
       ;;TODO: fix keybindings
       (defhydra hydra-webpaste ()
         ("b" webpaste-paste-buffer "paste buffer")
         ("r" webpaste-paste-region "paste region")
         ("q" nil "cancel")))

     (use-package ein :ensure t)

     (use-package atomic-chrome
       :ensure t
       :custom
       (atomic-chrome-buffer-open-style 'frame)
       (atomic-chrome-server-ghost-text-port 4001)
       :config
       ;; TODO: (alex3rd) make use of atomic-chrome-url-major-mode-alist
       (atomic-chrome-start-server))
   #+END_SRC
** Twitter
   :PROPERTIES:
   :ID:       124e9f69-847c-4682-989c-98e42f9a81b5
   :END:
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package twittering-mode
       :ensure t
       :commands twit
       :init
       (setq twittering-use-master-password t)
       (setq twittering-private-info-file (expand-file-name "~/docs/enc/cred/.twittering-mode.gpg")))
   #+END_SRC
** browser editing connectivity
   :PROPERTIES:
   :ID:       e3a36f53-7898-472c-a446-8f6e8496c3df
   :END:
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package edit-server
       :ensure t
       :config
       (edit-server-start))
   #+END_SRC
** hydra
   :PROPERTIES:
   :ID:       681df8be-f272-4b73-8399-935b20414567
   :END:
   #+BEGIN_SRC emacs-lisp :tangle yes
     (defhydra hydra-clients (:exit t :color red :idle 1.0)
       "Access to clients"
       ("n" notmuch nil)
       ("N" counsel-notmuch nil)
       ("t" twit nil))
     (global-set-key (kbd "C-c 4") 'hydra-clients/body)
   #+END_SRC
* pim
** elfeed
   #+BEGIN_SRC emacs-lisp :tangle no
     (use-package elfeed
       :ensure t
       :bind (("C-x w" . elfeed)
              :map elfeed-search-mode-map
              ("!" . elfeed-search-untag-all-unread)
              ("=" . elfeed-search-update--force)
              ("+" . elfeed-search-fetch))
       :config
       (defface elfeed-lisp-tag-face
         '((t :weight bold :foreground "cyan"))
         "Face used in search mode for unread entry titles.")
       (push '(lisp elfeed-lisp-tag-face) elfeed-search-face-alist)
       (defface elfeed-functional-tag-face
         '((t :weight bold :foreground "green"))
         "Face used in search mode for unread entry titles.")
       (push '(functional elfeed-functional-tag-face) elfeed-search-face-alist)
       (setq-default elfeed-search-filter "-junk @1-week-ago +unread"))

     (use-package elfeed-org
       :ensure t
       :after (elfeed)
       :custom
       (rmh-elfeed-org-files `(,(at-org-kb-dir "/feeds.org")))
       :config
       (elfeed-org))

     (use-package elfeed-goodies
       :ensure t
       :after (elfeed)
       :config
       (elfeed-goodies/setup))
   #+END_SRC
** orgmode
*** preface
**** Notes about setting up org-capture
     update-desktop-database

     URL:
     javascript:location.href='org-protocol://capture://l/'+encodeURIComponent(location.href)+'/'+encodeURIComponent(document.title)+'/'+encodeURIComponent(window.getSelection())

     ~/.local/share/applications/mimeapps.list
     [Default Applications]
     x-scheme-handler/org-protocol=org-protocol.desktop

     ~/.local/share/applications/org-protocol.desktop
     [Desktop Entry]
     Name=org-protocol
     Exec=emacsclient %u
     Type=Application
     Terminal=false
     Categories=System;
     MimeType=x-scheme-handler/org-protocol;
**** org-id usage
     org-id usage example for the future:
     "* TODO___ %a\n  :PROPERTIES:\n  :ID: %(org-id-new)\n  :END:\n  %U\n\n  %i"
*** setup
    :PROPERTIES:
    :ID:       1b1592b1-0ffd-46c4-bea7-4b2faba6ea27
    :END:
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package org
        :ensure org-plus-contrib
        :after (f)
        :mode (("\\.org$" . org-mode)
               ("\\.org_archive$" . org-mode))
        :preface
        (defun custom/finally-tangle-literate-config ()
          (when (time-less-p (nth 5 (file-attributes tangled-config-filename))
                             (nth 5 (file-attributes literate-config-filename)))
            (let ((orgfile (concat user-emacs-directory literate-config-filename))
                  (elfile (concat user-emacs-directory tangled-config-filename)))
              (org-babel-tangle-file orgfile elfile))))
        (defadvice custom/browse-url-at-point (before org-position-url activate)
          (when (derived-mode-p 'org-mode)
            (let ((end nil))
              (save-excursion
                (org-back-to-heading t)
                (setq end (save-excursion (outline-next-heading) (point))))
              (org-back-to-heading t)
              (re-search-forward org-plain-link-re end t))))
        ;; show desktop notifications for org-capture
        (defadvice org-protocol-do-capture (around display-notify-after-capture)
          (let ((result ad-do-it))
            (when result
              (notifications-notify
               :title "Link captured"
               :body (concat (caar org-stored-links)
                             "\n"
                             (cadar org-stored-links))
               :app-name "emacs"
               :app-icon (expand-file-name "~/.rc/org.svg")
               :timeout 3000
               :urgency 'low))
            result))
        ;; remove read-only props from yanked text (e.g. from jabber.el chat buffer)
        (defadvice org-yank (after make-yank-writeable disable)
          (let ((inhibit-read-only t))
            (remove-text-properties (region-beginning) (region-end)
                                    '(read-only t))))
        (defvar custom/org-journal-file (at-org-dir "/journal.org"))
        (defvar custom/org-browser-tabs (at-org-dir "/browser-tabs.org"))
        (defun custom/jump-to-org-agenda ()
          (interactive)
          (let ((buf (get-buffer "*Org Agenda*"))
                wind)
            (if buf
                (if (setq wind (get-buffer-window buf))
                    (select-window wind)
                  (if (called-interactively-p)
                      (progn
                        (select-window (display-buffer buf t t))
                        (org-fit-window-to-buffer)
                        (org-agenda-redo))
                    (with-selected-window (display-buffer buf)
                      (org-fit-window-to-buffer)
                      (org-agenda-redo))))
              (call-interactively 'org-agenda-list)))
          (let ((buf (get-buffer "*Calendar*")))
            (unless (get-buffer-window buf)
              (org-agenda-goto-calendar))))
        (defun custom/jump-to-custom-agenda-random ()
          (interactive)
          (let* ((agendas
                  (remove-if
                   (lambda (agenda) (= (length agenda) 1))
                   (mapcar (lambda (x) (car x)) org-agenda-custom-commands)))
                 (agendas-count (length agendas)))
            (org-agenda nil
                        (car (nthcdr (random agendas-count) agendas)))))
        ;;TODO: use prefix arg
        (defun custom/org-update-timestamp-with-time (&optional as-is)
          (interactive)
          (unless as-is
            (insert " "))
          (insert (format-time-string "%H:%M")))
        (defun custom/get-org-timestamp ()
          (with-temp-buffer
            (call-interactively 'org-time-stamp-inactive)
            (buffer-string)))
        (defun custom/strip-org-timestamp (ts)
          (let ((tslen (length ts)))
            (substring ts 1 (- tslen 4))))
        ;; Exclude DONE state tasks from refile targets
        (defun custom/verify-refile-target ()
          "Exclude todo keywords with a done state from refile targets"
          (not (member (nth 2 (org-heading-components)) org-done-keywords)))
        ;;TODO: customize "todo-only" parameter for "org-tags-view"
        (defun custom/follow-tag-link (tag)
          "Display a list of TODO headlines with tag TAG.
               With prefix argument, also display headlines without a TODO keyword."
          (org-tags-view nil tag))              ;nil was (null current-prefix-arg) originally
        ;; http://irreal.org/blog/?p=6166
        (defun custom/org-tags-all ()
          (interactive)
          (with-current-buffer (get-buffer-create "*org-tags*")
            (delete-region (point-min) (point-max))
            (org-mode)
            (let ((tags (sort (delete-dups
                               (cl-loop for buffer in (org-buffer-list 'agenda t)
                                        append (with-current-buffer buffer
                                                 (org-with-wide-buffer
                                                  (goto-char (point-min))
                                                  (cl-loop while (re-search-forward org-complex-heading-regexp nil t)
                                                           when (match-string 5)
                                                           append (split-string (substring-no-properties (match-string 5))
                                                                                ":" t "[[:space:]]+"))))))
                              'string<)))
              (dolist (tag tags)
                (insert (concat "[[elisp:(org-tags-view nil \"" tag "\")][" tag "]]\n"))))
            (beginning-of-buffer)
            (switch-to-buffer (current-buffer))
            (read-only-mode)))
        ;; Remove empty CLOCK drawers on clock out
        (defun custom/remove-empty-drawer-on-clock-out ()
          (interactive)
          (save-excursion
            (beginning-of-line 0)
            (org-remove-empty-drawer-at "CLOCK" (point))))
        (defun custom/org-use-speed-commands-for-headings-and-lists ()
          "Activate speed commands on list items too."
          (or (and (looking-at org-outline-regexp) (looking-back "^\**"))
              (save-excursion (and (looking-at (org-item-re)) (looking-back "^[ \t]*")))))
        ;; TODO: bind somewhere
        (defun custom/org-capture-refile-and-jump ()
          (interactive)
          (org-capture-refile)
          (org-refile-goto-last-stored))
        ;;TODO: investigate usage, seems useful
        (defun custom/org-tags ()
          (get-buffer-create "*org-tags*")
          (set-buffer "*org-tags*")
          (org-mode)
          (let ((tags (sort (delete-dups (apply 'append (delete-dups (org-map-entries (lambda () org-scanner-tags) t 'agenda)))) 'string<)))
            (dolist (tag tags)
              (insert (concat "[[elisp:(org-tags-view nil \"" tag "\")][" tag  "]]\n"))))
          (beginning-of-buffer)
          (switch-to-buffer "*org-tags*"))
        (defun custom/org-link-describe (link desc)
          (cond ((string-match "file:" link)
                 (replace-regexp-in-string "^file:" "File link -> " (org-link-unescape link)))
                (t (or desc link))))
        ;; (SEC-HIGH SEC-LOW MICROSEC PICOSEC) current-idle-time
        (defvar custom/idle-clockout-timeout 1800
          "Perform first attempt to clock-out after this period of emacs
                inactivity. It can decide to postpone the clocking-out if it's
                only emacs that is idle, but not the computer itself.")
        (defvar custom/idle-clockout-recheck-interval 300
          "After a sufficient idle time was achieved by emacs, we'll
                periodically check current idle time of the whole OS to decide
                whether we need to clock out")
        (defvar custom/idle-clockout-repeat-timer nil
          "Timer for repeatedly (during a single idle interval) checking
                whether we need to clock-out")
        (defun custom/clockout-when-idle ()
          (awhen custom/idle-clockout-repeat-timer
            (cancel-timer it))
          (when (org-clocking-p)
            (if (> (org-user-idle-seconds)
                   custom/idle-clockout-timeout)
                (let ((org-clock-out-switch-to-state "WAITING")) ;TODO: introduce variable
                  (org-clock-out nil t))
              (setf custom/idle-clockout-repeat-timer
                    (run-with-idle-timer
                     (time-add (current-idle-time) custom/idle-clockout-recheck-interval)
                     nil
                     'custom/clockout-when-idle)))))
        :config
        (add-hook 'kill-emacs-hook #'custom/finally-tangle-literate-config)
        (setq org-archive-location (concat custom/org-journal-file "::datetree/"))
        (setq org-contrib-base '(org-agenda org-archive org-attach org-bbdb
                                            org-bibtex org-clock org-docview org-habit
                                            org-id org-info org-inlinetask org-irc
                                            org-mouse org-protocol org-timer org-w3m))
        (setq org-contrib-extra '(org-bookmark org-checklist org-collector
                                               org-drill org-expiry org-index org-interactive-query
                                               org-man org-velocity))
        (setq org-modules `(,@org-contrib-base ,@org-contrib-extra))
        (add-to-list 'file-coding-system-alist (cons "\\.\\(org\\|org_archive\\|/TODO\\)$"  'utf-8))
        (setq org-list-demote-modify-bullet '(("+" . "-")
                                              ("*" . "-")
                                              ("1." . "-")
                                              ("1)" . "-")
                                              ("A)" . "-")
                                              ("B)" . "-")
                                              ("a)" . "-")
                                              ("b)" . "-")
                                              ("A." . "-")
                                              ("B." . "-")
                                              ("a." . "-")
                                              ("b." . "-")))
        (setq org-lowest-priority 70) ;; extend priorities set (given ascii code)
        (setq org-use-speed-commands 'custom/org-use-speed-commands-for-headings-and-lists)
        (setq org-use-speed-commands t)
        (add-to-list 'org-speed-commands-user '("x" org-todo "DONE"))
        (add-to-list 'org-speed-commands-user '("y" org-todo-yesterday "DONE"))
        (add-to-list 'org-speed-commands-user '("s" call-interactively 'org-schedule))
        (add-to-list 'org-speed-commands-user '("i" call-interactively 'org-clock-in))
        (add-to-list 'org-speed-commands-user '("o" call-interactively 'org-clock-out))
        (add-to-list 'org-speed-commands-user '("$" call-interactively 'org-archive-subtree))
        (f-entries (at-org-dir)
                   (lambda (entry) (when (and (f-file? entry)
                                              (s-suffix? "org" entry)
                                              (file-exists-p entry))
                                     (push entry org-agenda-files)))
                   t)
        (dolist (orgfile (directory-files (at-org-dir "/journals") t "journal") )
          (setq org-agenda-files
                (delete orgfile org-agenda-files)))
        (add-to-list 'org-agenda-files (at-config-basedir "config.org"))
        ;; agenda customizations
        (setf org-agenda-clockreport-parameter-plist '(:link t :maxlevel 2 :narrow 60))
        (setq org-agenda-dim-blocked-tasks 'invisible)
        (setq org-agenda-include-all-todo t)
        (setq org-agenda-include-diary t)
        (setq org-agenda-inhibit-startup t)
        (setq org-agenda-persistent-filter t)
        (setq org-agenda-repeating-timestamp-show-all nil)
        (setq org-agenda-restore-windows-after-quit t)
        (setq org-agenda-show-all-dates t)
        (setq org-agenda-show-inherited-tags nil)
        (setq org-agenda-show-log t)
        (setq org-agenda-skip-additional-timestamps-same-entry t)
        (setq org-agenda-skip-deadline-if-done t)
        (setq org-agenda-skip-deadline-prewarning-if-scheduled 'pre-scheduled)
        (setq org-agenda-skip-scheduled-if-done t)
        (setq org-agenda-skip-timestamp-if-done t)
        (setq org-agenda-span 'month)
        (setq org-agenda-start-on-weekday 1)
        (setq org-agenda-sticky nil) ;otherwise agenda behaves strangely on non-stuck projects
        (setq org-agenda-tags-todo-honor-ignore-options t)
        (setq org-agenda-todo-ignore-deadlines 'all)
        (setq org-agenda-todo-ignore-scheduled 'all)
        (setq org-agenda-todo-ignore-timestamp 'past)
        (setq org-agenda-todo-ignore-with-date t)
        (setq org-agenda-todo-list-sublevels nil)
        (setq org-agenda-use-tag-inheritance t)
        (setq org-agenda-window-setup 'current-window)
        (setf agenda-opts-all-with-time
              '((org-agenda-todo-ignore-scheduled nil)
                (org-agenda-todo-ignore-deadlines nil)
                (org-agenda-todo-ignore-with-date nil)))
        (setq org-agenda-time-grid
              '((daily today require-timed remove-match)
                "----------------"
                (930 1000 1200 1400 1600 1800 2000 2200 2400 2500)))
        (setq org-agenda-custom-commands
              `(("d" . "some non-straightforward TODO statuses")
                ("db" todo "BACKLOG" nil)
                ("ds" todo "SOON" nil)
                ("dc" todo "CANCELLED" nil)
                ("dw" todo "WAITING|FEEDBACK" nil)
                ("dg" todo "GOING" ,agenda-opts-all-with-time)
                ("da" tags "+actual_p")
                ("c" . "by context")
                ("cp" tags "+@personal/GOING|WAITING|BACKLOG|SOON")
                ("cr" tags "+@project/GOING|WAITING|BACKLOG|SOON")
                ("cj" tags "+@job/GOING|WAITING|FEEDBACK|BACKLOG|SOON")
                ("cw" tags "+@workplace/GOING|WAITING|BACKLOG|SOON")
                ("ct" tags "+@phonecall/WAITING|BACKLOG|SOON")
                ("cs" tags "+@someday")
                ("cq" tags "+@quicknote")
                ("e" . "by essence")
                ;;TODO: find more handy shortcuts
                ("ec" tags "+current")
                ("ef" tags "+reference")
                ("em" tags "+master")
                ("eo" tags "+ordering")
                ("er" tags "+repair")
                ("ed" tags "+develop")
                ("ei" tags "+investigate")
                ("ee" tags "+entertainment")
                ("ey" tags "+family")
                ("eH" tags-todo "+housekeeping")
                ("eC" tags-todo "+current")
                ("eF" tags-todo "+reference")
                ("eM" tags-todo "+master")
                ("eO" tags-todo "+ordering")
                ("eR" tags-todo "+repair")
                ("eD" tags-todo "+develop")
                ("eI" tags-todo "+investigate")
                ("eE" tags-todo "+entertainment")
                ("u" . "unassigned")
                ("up" alltodo "Unprioritized TODO entries"
                 ((org-agenda-skip-function
                   (lambda nil
                     (org-agenda-skip-entry-if 'regexp "\\[#[ABC]]")))
                  (org-tags-match-list-sublevels 'indented)
                  (org-agenda-sorting-strategy
                   '((agenda time-up tag-up) ))
                  ;; '(org-agenda-sorting-strategy '((agenda time-up priority-down tag-up) (todo tag-up)))
                  (org-agenda-overriding-header "Unprioritized TODO entries: ")))
                ("P" . "Prioritized tasks")
                ("Pa" "Prioritized tasks A"
                 ((tags-todo "+PRIORITY=\"A\"") ))
                ("Pb" "Prioritized tasks B"
                 ((tags-todo "+PRIORITY=\"B\"")))
                ("Pc" "Prioritized tasks C"
                 ((tags-todo "+PRIORITY=\"C\"")))
                ("S" "Scheduled tasks" agenda ""
                 ((org-agenda-time-grid nil)
                  (org-deadline-warning-days 32)
                  (org-agenda-entry-types '(:scheduled))
                  ))
                ("p" tags "+purchase")
                ("b" . "tickets")
                ("be" tags "+ticket+emacs")
                ("bs" tags "+ticket+stumpwm")
                ("jc" tags "+@job+current/GOING|FEEDBACK")
                ))
        (setq org-agenda-prefix-format '((agenda . " %i %-12:c%?-12t% s %b")
                                         (timeline . "  % s")
                                         (todo . " %i %-12:c")
                                         (tags . " %i %-12:c")
                                         (search . " %i %-12:c")))
        ;; clocking customizations
        (setq org-clock-history-length 35)
        (setq org-clock-idle-time 3)
        (setq org-clock-in-resume t)
        (setq org-clock-in-switch-to-state "GOING")
        (setq org-clock-out-switch-to-state "HOLD")
        (setq org-clock-into-drawer "CLOCK")
        (setq org-clock-out-remove-zero-time-clocks t)
        (setq org-clock-persist t)
        ;; just clock-out unconditionally - it seems easier to maintain (credits to @binarin)
        (setf org-clock-x11idle-program-name "xprintidle")
        (setf org-x11idle-exists-p t)
        ;; refiling customizations
        (setq org-refile-target-verify-function 'custom/verify-refile-target)
        (setq org-refile-targets '((org-agenda-files :maxlevel . 5) (nil :maxlevel . 5)))
        (setq org-refile-use-outline-path 'file)
        ;; various customizations
        (setf org-catch-invisible-edits nil)
        (setf org-fast-tag-selection-include-todo nil)
        (setf org-id-link-to-org-use-id t)
        (setq appt-display-interval 5)
        (setq appt-message-warning-time 10)
        (setq calendar-date-style 'european)
        (setq org-M-RET-may-split-line '((default . nil)))
        (setq org-align-all-tags t)
        (setq org-attach-directory (at-org-dir "/org-attach-data"))
        (setq org-blank-before-new-entry '((heading) (plain-list-item . auto)))
        (setq org-columns-default-format "%42ITEM %TODO %3Effort(E){:} %3CLOCKSUM_T(R) %SCHEDULED")
        (setq org-confirm-elisp-link-function 'y-or-n-p)
        (setq org-ctrl-k-protect-subtree t)
        (setq org-cycle-include-plain-lists 'integrate)
        (setq org-cycle-separator-lines 0)
        (setq org-deadline-warning-days 30)
        (setq org-default-notes-file (at-org-dir "/refile.org"))
        (setq org-ditaa-jar-path (at-config-basedir "resources/ditaa0_9.jar"))
        (setq org-element-use-cache nil)
        (setq org-enforce-todo-checkbox-dependencies t)
        (setq org-enforce-todo-dependencies t)  ;;TODO: try ORDERED/NOBLOCKING props : org-toggle-ordered-property
        (setq org-export-coding-system 'utf-8)
        (setq org-export-with-drawers t)
        (setq org-extend-today-until 2)
        (setq org-fast-tag-selection-single-key 'expert)
        (setq org-fontify-done-headline t)
        (setq org-global-properties '(("STYLE_ALL" . "habit")))
        (setq org-goto-max-level 10)
        (setq org-hide-leading-stars t)
        (setq org-indirect-buffer-display 'current-window)
        (setq org-insert-mode-line-in-empty-file t)
        (setq org-log-done t)
        (setq org-log-into-drawer t)
        (setq org-log-repeat 'time)
        (setq org-loop-over-headlines-in-active-region t)
        (setq org-outline-path-complete-in-steps nil)
        (setq org-read-date-prefer-future 'time)
        (setq org-return-follows-link t)
        (setq org-special-ctrl-a/e t)
        (setq org-special-ctrl-k t)
        (setq org-src-fontify-natively t)
        (setq org-src-tab-acts-natively t)
        (setq org-startup-folded nil)
        (setq org-stuck-projects '("+LEVEL=1/-DONE" ("TODO" "GOING" "NEXT" "WAITING" "HOLD" "CANCELLED") nil ""))
        (setq org-tags-column -80)
        (setq org-track-ordered-property-with-tag t)
        (setq org-use-effective-time t)
        (setq org-use-property-inheritance t)
        (setq org-use-sub-superscripts nil)
        (setq org-yank-adjusted-subtrees t)
        (setq org-agenda-show-future-repeats 'next)
        (setq org-highlight-latex-and-related '(latex))
        (setq org-confirm-shell-link-function 'y-or-n-p)
        (setq org-confirm-elisp-link-function 'y-or-n-p)
        (setq org-src-window-setup 'current-window)
        (setq org-confirm-babel-evaluate nil)
        (setf org-make-link-description-function #'custom/org-link-describe)
        (when (featurep 'unicode-fonts)
          (setq org-ellipsis "⤵"))
        ;; keywords setup
        (setq kw-seq-common '(sequence "BACKLOG(b)" "SOON(s)" "REPEAT(r)" "GOING(g!)" "NEXT(x)" "WAITING(w@/!)" "FEEDBACK"
                                       "|" "DONE(d!/@)" "CANCELLED(c@/!)" "OUTDATED(o)"))
        (setq org-todo-keywords
              `(,kw-seq-common))
        (setq org-todo-keywords-for-agenda '("BACKLOG(b)" "SOON(s)" "REPEAT(r)" "GOING(g!)" "NEXT(x)" "WAITING(w@/!)" "FEEDBACK"))
        (setq org-done-keywords-for-agenda '("DONE(d)" "CANCELLED(c)" "OUTDATED(o)"))
        ;; faces
        (setq org-todo-keyword-faces
              '(("BACKLOG" . (:foreground "gray" :weight bold))
                ("SOON" . (:foreground "magenta" :weight bold))
                ("REPEAT" . (:foreground "blue" :weight bold))
                ("NEXT" . (:foreground "red" :weight bold))
                ("WAITING" . (:foreground "orange" :weight bold))
                ("FEEDBACK" . (:foreground "yellow" :weight bold))
                ("CANCELLED" . (:foreground "cyan" :weight bold))
                ("DONE" . (:foreground "green" :weight bold))))
        (setq org-priority-faces
              '((?A :foreground "red" :weight bold)
                (?B :foreground "#94bff3" :weight bold)
                (?C :foreground "#6f6f6f")
                (?D :foreground "#c390d4")
                (?E :foreground "#90c3d4")
                (?F :foreground "#a1d490")))
        (set-face-attribute 'org-done nil :foreground "PaleGreen" :weight 'normal :strike-through t)
        (set-face-attribute 'org-headline-done nil :foreground "LightSalmon" :weight 'normal :strike-through t)
        ;; tags
        (setq org-tag-alist '(("current" . ?c)
                              ("reference" . ?f)
                              ("orgmode" . ?g)
                              ("purchase" . ?p)
                              ("master" . ?m)
                              ("ordering" . ?o)
                              ("housekeeping" . ?h)
                              ("entertainment" . ?e)
                              ("interesting" . ?i)
                              ("repair" . ?r)
                              ))
        (setq org-tags-exclude-from-inheritance '("project"))
        (setq org-todo-state-tags-triggers
              '(("GOING" ("current" . t))
                ("DONE" ("current"))))
        (setq org-complete-tags-always-offer-all-agenda-tags t)
        ;; org-habit
        (setq org-habit-graph-column 50)
        (setq org-habit-preceding-days 10)
        (setq org-habit-following-days 4)
        (setq org-habit-show-habits-only-for-today nil)
        ;; org-capture
        (setq org-capture-templates
              `(("w" "workplace")
                ("wt" "workplace try" entry (file+olp ,(at-org-dir "/workplace.org") "workplace" "tools reference") "* %? %U :@workplace:try")
                ("wd" "workplace tasks" entry (file+olp ,(at-org-dir "/workplace.org") "workplace" "tasks") "* BACKLOG [#C] %? %U :@workplace:")
                ("we" "emacs")
                ("wed" "emacs todo" entry (file+olp ,(at-org-dir "/workplace.org") "emacs" "tickets") "* BACKLOG [#C] %? %U :emacs:ticket:")
                ("wet" "emacs try" entry (file+olp ,(at-org-dir "/workplace.org") "emacs" "to try") "* %? %U :emacs:try:")
                ("wef" "emacs foreign configs" entry (file+olp ,(at-org-dir "/workplace.org") "foreign dotfiles") "* %? %U :emacs-config:")
                ("ws" "StumpWM")
                ("wsc" "stumpwm todo" entry (file+olp ,(at-org-dir "/workplace.org") "StumpWM" "tickets") "* BACKLOG [#C] %? %U :stumpwm:ticket:")
                ("wsf" "stumpwm foreign configs" entry (file+olp ,(at-org-dir "/workplace.org") "StumpWM" "foreign configs") "* %? %U :stumpwm-config:")
                ("wa" "awesome config" entry (file+olp ,(at-org-dir "/workplace.org") "AwesomeWM" "foreign configs") "* %? %U :awesome-config:")
                ("w." "dotfiles" entry (file+headline ,(at-org-dir "/workplace.org") "foreign dotfiles") "* %? %U :dotfiles:")
                ("j" "job tasks")
                ("jc" "current" entry (file ,(at-org-dir private/job-tasks-file)) "* SOON %? %U :@job:current:")
                ("jb" "bug" entry (file ,(at-org-dir private/job-tasks-file)) "* SOON %? %U :@job:bug:")
                ("jr" "reference item" entry (file ,(at-org-dir private/job-tasks-file)) "* %? %U :@job:reference:")
                ("jp" "project" entry (file ,(at-org-dir private/job-tasks-file)) "* BACKLOG %? %U :@job:project:")
                ("l" "links")
                ("lb" "bookmarks" entry (file ,(at-org-dir "/bookmarks.org")) "* %? %U :bookmark:")
                ("ld" "deferred tabs" entry (file+olp custom/org-browser-tabs "groups" "deferred tabs") "* %? %U :deferred:")
                ("p" "projects")
                ("pi" "project ideas" entry (file ,(at-org-dir "/projects.org")) "* %? %U :@project:idea:")
                ("pn" "new project" entry (file ,(at-org-dir "/projects.org")) "* %? %U :@project:")
                ("i" "sink")
                ("ic" "code snippet" entry (file ,(at-org-dir "/sink.org"))
                 "* %^{title} %^g :code_snippet:\n :PROPERTIES:\n :CREATED: %U\n :END:\n\n#+BEGIN_SRC %^{lang}\n %i%?\n#+END_SRC\n")
                ("is" "search" entry (file ,(at-org-dir "/sink.org")) "* %? %U :search:")
                ("m" "mastering" entry (file+headline ,(at-org-dir "/mastering.org") "inbox") "* %? %U")
                ))
        ;; holidays
        (setq holiday-orthodox-holidays nil) ; Orthodox holidays to some extent
        (setq holiday-personal-holidays nil) ; personal anniversaries, etc.
        (setq holiday-other-holidays
              (append holiday-orthodox-holidays holiday-personal-holidays))
        (setq calendar-holidays
              (append holiday-other-holidays
                      holiday-solar-holidays))
        (add-hook 'org-mode-hook 'turn-on-font-lock)
        (add-hook 'org-clock-out-hook 'custom/remove-empty-drawer-on-clock-out 'append)
        (add-hook 'org-after-refile-insert-hook 'save-buffer)
        ;; run some commands
        (org-add-link-type "tag" 'custom/follow-tag-link)
        (org-clock-persistence-insinuate) ;; Resume clocking tasks when emacs is restarted
        (run-at-time "06:00" 86400 '(lambda () (setq org-habit-show-habits t)))
        (run-with-idle-timer 1800 t 'custom/jump-to-custom-agenda-random)
        (set-charset-priority 'unicode)
        (turn-on-orgtbl)
        (run-with-idle-timer custom/idle-clockout-timeout t 'custom/clockout-when-idle)
        (font-lock-add-keywords
         'org-mode
         `(("^[ \t]*\\(?:[-+*]\\|[0-9]+[).]\\)[ \t]+\\(\\(?:\\[@\\(?:start:\\)?[0-9]+\\][ \t]*\\)?\\[\\(?:X\\|\\([0-9]+\\)/\\2\\)\\][^\n]*\n\\)" 1 'org-headline-done prepend))
         'append)
        ;; (bind-key "<f7> ." 'org-agenda-clock-in org-agenda-mode-map)
        ;; (bind-key "<f7> ," 'org-agenda-clock-out org-agenda-mode-map)
        ;; (bind-key "<f7> o" 'ace-link-org org-agenda-mode-map)
        (bind-key "M-o" 'ace-link-org org-mode-map)
        (bind-key "C-'" nil org-mode-map)
        (bind-key "C-c [" nil org-mode-map)
        (bind-key "C-c ]" nil org-mode-map)
        (bind-key "C-c C-o" nil org-mode-map)
        (bind-key "s-j" 'org-babel-next-src-block org-mode-map)
        (bind-key "s-k" 'org-babel-previous-src-block org-mode-map)
        (bind-key "s-l" 'org-edit-src-code org-mode-map)
        (bind-key "s-l" 'org-edit-src-exit org-src-mode-map)
        (bind-key "C-c C-'" 'org-edit-src-code org-mode-map)
        (bind-key "C-c C-'" 'org-edit-src-exit org-src-mode-map))

      (use-package org-protocol
        :after (org server))

      (use-package ob-css
        :ensure org-plus-contrib
        :commands (org-babel-execute:css
                   org-babel-prep-session:css))

      (use-package ob-dot
        :ensure org-plus-contrib
        :commands (org-babel-execute:dot
                   org-babel-expand-body:dot))

      (use-package ob-ditaa
        :ensure org-plus-contrib
        :commands (org-babel-execute:ditaa
                   org-babel-prep-session:ditaa))

      (use-package ob-emacs-lisp
        :ensure org-plus-contrib
        :commands (org-babel-execute:emacs-lisp
                   org-babel-expand-body:emacs-lisp))

      (use-package ob-lisp
        :ensure org-plus-contrib
        :commands (org-babel-execute:lisp
                   org-babel-expand-body:lisp))

      (use-package ob-js
        :ensure org-plus-contrib
        :commands (org-babel-execute:js
                   org-babel-prep-session:js
                   org-babel-variable-assignments:js))

      (use-package ob-latex
        :ensure org-plus-contrib
        :commands (org-babel-execute:latex
                   org-babel-expand-body:latex
                   org-babel-prep-session:latex))

      (use-package ob-org
        :ensure org-plus-contrib
        :commands (org-babel-execute:org
                   org-babel-expand-body:org
                   org-babel-prep-session:org))

      (use-package ob-plantuml
        :ensure org-plus-contrib
        :commands (org-babel-execute:plantuml
                   org-babel-prep-session:plantuml
                   org-babel-variable-assignments:plantuml))

      (use-package ob-scheme
        :ensure org-plus-contrib
        :commands (org-babel-execute:scheme
                   org-babel-expand-body:scheme))

      (use-package ob-python
        :ensure org-plus-contrib
        :commands (org-babel-execute:python))

      (use-package ob-shell
        :ensure org-plus-contrib
        :commands (org-babel-execute:sh
                   org-babel-expand-body:sh
                   org-babel-execute:bash
                   org-babel-expand-body:bash))

      (use-package ox-html
        :ensure org-plus-contrib
        :commands (org-html-convert-region-to-html
                   org-html-export-as-html
                   org-html-export-to-html))
    #+END_SRC
*** additional packages / extensions
    :PROPERTIES:
    :ID:       73af33db-8f7b-4a96-a108-b541def2aae4
    :END:
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package ob-async
        :ensure t
        :after (org ob))

      (use-package org-footnote)

      (use-package org-pomodoro
        :ensure t
        :after (alert))

      (use-package org-dashboard
        :ensure t
        :commands org-dashboard-display)

      (use-package orgit
        ;;TODO: automate insertion of links below (yasnippet/whatever)
        ;;    orgit:/path/to/repo/            links to a `magit-status' buffer
        ;;    orgit-rev:/path/to/repo/::REV   links to a `magit-revision' buffer
        ;;    orgit-log:/path/to/repo/::ARGS  links to a `magit-log' buffer
        :ensure t)

      (use-package org-bullets
        :ensure t
        :disabled
        :hook (org-mode-hook . (lambda () (org-bullets-mode 1)))
        :after (org))

      (use-package orglink
        :ensure t
        :delight (orglink-mode " OL")
        :config
        ;; TODO: customize orglink-activate-in-modes
        ;; TODO: automate insertion of link types below
        ;;   [[Code]]
        ;;   [[Code][start of code]]
        ;;   [[define-derived-mode orglink-mode][orglink-mode]]
        ;;   <mailto:jonas@bernoul.li>
        ;;   man:info
        ;;   <info:man>
        ;;   https://github.com/tarsius/orglink
        (global-orglink-mode))

      (use-package org-clock-today
        :ensure t
        :config
        (org-clock-today-mode 1))

      (use-package org-mru-clock :ensure t)

      (use-package org-recent-headings
        :ensure t
        :disabled
        :custom
        (org-recent-headings-save-file (at-user-data-dir "org-recent-headings"))
        :config
        (org-recent-headings-mode 1))

      (use-package org-sticky-header
        :ensure t
        :hook (org-mode-hook . org-sticky-header-mode))

      (use-package org-alert
        :ensure t
        :config
        (setq alert-default-style 'libnotify))

      (use-package org-link-minor-mode
        :ensure t
        :config
        (org-link-minor-mode t))

      (use-package org-super-agenda           ;TODO: investigate options (given initial setup below)
        :ensure t
        :config
        (setq org-super-agenda-groups
              '((:name "Today"
                       :time-grid t
                       :todo "TODAY")
                (:todo "WAITING" :order 7)
                (:todo "SOON"
                       :order 8)
                (:todo ("SOMEDAY" "WAITING" "FEEDBACK" "OUTDATED")
                       :order 9)
                (:priority<= "B" :order 1)
                ))
        (org-super-agenda-mode 1))

      (use-package org-randomnote
        :ensure t
        :bind ("C-c R" . org-randomnote)
        :custom
        (org-randomnote-candidates org-agenda-files)
        (org-randomnote-open-behavior 'indirect-buffer))

      (use-package russian-holidays
        :ensure t
        :after (org)
        :config
        (setq calendar-holidays
         (push russian-holidays calendar-holidays)))

      (use-package org-rich-yank
        :ensure t
        :after (org)
        :bind (:map org-mode-map
                    ("C-M-y" . org-rich-yank)))

      (use-package counsel-org-clock
        :after (org counsel)
        :quelpa
        (counsel-org-clock :repo "akirak/counsel-org-clock" :fetcher github)
        :custom
        (counsel-org-clock-default-action 'counsel-org-clock-clock-dwim-action))
    #+END_SRC
** paperwork
   #+BEGIN_SRC emacs-lisp :tangle no
     (use-package paperless
       :custom
       ;;FIXME: provide real paths
       (paperless-capture-directory "")
       (paperless-root-directory ""))
   #+END_SRC
** hydras
   :PROPERTIES:
   :ID:       1666c146-50ef-4264-bc2d-0fe9e473e157
   :END:
   #+BEGIN_SRC emacs-lisp :tangle yes
     (defhydra hydra-pim ()
       "
       BBDB                        Various
       --------------------------------------------------------
       _b_ as it is                _o_ calendar
       _c_ create                  _k_ show keys frequencies
       _u_ delete current record   _d_ deft
       _D_ quit deft
       "
       ("b" bbdb)
       ("c" bbdb-create)
       ("u" bbdb-delete-current-record)
       ("o" custom/calfw-open-calendar)
       ("k" keyfreq-show)
       ("d" deft)
       ("D" custom/deft/quit-deft)
       ("q" nil))
     (global-set-key (kbd "C-c c") 'hydra-pim/body)

     (defhydra hydra-org-global (:color teal :idle 1.0)
       "
       ^Control^                 ^Editing^            ^Context^               ^Movement^
       ---------------------------------------------------------------------------------------------------------
       _g_oto clock              captur_e_            _a_genda                _<right>_ next visible heading
       _._ clock in              _w_ store link       dash_b_oard             _<left>_  prev visible heading
       _,_ clock out             _y_ank link          re_v_eal                _<down>_  forward same level
       _\^_ recently clocked     _S_et property       _f_ ace-link            _<up>_    backward same level
       _c_ancel clock            _D_elete property    _n_arrow to subtree     heading _u_p
       _d_isplay clocktime       footnote _A_ction    _-_ sparse tree         recent _H_eadings
       _R_eport clocks           _r_efile             agenda _h_eadings       Org _G_oto
       _p_omodoro                create _T_able       _=_ todo tree
       _s_chedule                                     _2_ random agenda
       _|_ deadline
       _i_ add time to TS
       _t_oggle TS type

       _\?_ clocking commands
       "
       ("g" org-clock-goto)
       ("." org-clock-in)
       ("," org-clock-out)
       ("^" org-mru-clock-select-recent-task)
       ("c" org-clock-cancel)
       ("x" counsel-org-clock-context)
       ("h" counsel-org-clock-history)
       ("d" org-clock-display)
       ("R" org-clock-report)
       ("p" org-pomodoro)
       ("s" org-schedule :color blue)
       ("|" org-deadline :color blue)
       ("i" custom/org-update-timestamp-with-time)
       ("t" org-toggle-timestamp-type)
       ("e" org-capture :color blue)
       ("w" org-store-link)
       ("y" org-insert-link-global)
       ("S" org-set-property)
       ("D" org-delete-property)
       ("A" org-footnote-action)
       ("r" org-refile "refile")
       ("T" org-table-create)
       ("a" org-agenda :color blue)
       ("b" org-dashboard-display :color blue)
       ("v" org-reveal "reveal")
       ("f" ace-link-org :color blue)
       ("n" org-narrow-to-subtree)
       ("-" org-sparse-tree)
       ("l" counsel-org-agenda-headlines)
       ("H" org-recent-headings-ivy)
       ("=" org-show-todo-tree)
       ("\\" counsel-org-tag)
       ("2" custom/jump-to-custom-agenda-random "show random custom agenda")
       ("<right>" outline-next-visible-heading "next heading")
       ("<left>" outline-previous-visible-heading "prev heading")
       ("<down>" org-forward-heading-same-level "next heading at same level")
       ("<up>" org-backward-heading-same-level "prev heading at same level")
       ("u" outline-up-heading "up heading")
       ("G" org-goto "goto" :exit t)
       (";" custom/org-tags-all  :exit t)
       ("?" (org-info "Clocking commands") "")
       ("q" nil "cancel"))
     (global-set-key (kbd "<f7>") 'hydra-org-global/body)
   #+END_SRC
* publishing
  :PROPERTIES:
  :ID:       27edca98-b474-41dd-8a12-79b20eb52ede
  :END:
  #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package blockdiag-mode :ensure t)

    (use-package ob-blockdiag
      :ensure t
      :config
      (org-babel-do-load-languages 'org-babel-load-languages
                                   '((blockdiag . t))))

    (use-package plantuml-mode
      :ensure t
      :mode ("\\.plantuml\\'" . plantuml-mode)
      :custom
      (plantuml-jar-path "/usr/share/plantuml/lib/plantuml.jar")
      (org-plantuml-jar-path plantuml-jar-path)
      :config
      (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
      (org-babel-do-load-languages 'org-babel-load-languages
                                   '((plantuml . t))))
  #+END_SRC
* help
  :PROPERTIES:
  :ID:       c49ac158-ba13-49ea-88cc-a85abf12b9e3
  :END:
  #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package info
      :preface
      (defun custom/open-info (topic bname)
        "Open info on TOPIC in BNAME."
        (if (get-buffer bname)
            (progn
              (switch-to-buffer bname)
              (unless (string-match topic Info-current-file)
                (Info-goto-node (format "(%s)" topic))))
          (info topic bname)))
      :config
      (info-initialize)
      (setq Info-additional-directory-list
            (list (concat home-directory "/help/info")))
      (add-to-list 'Info-directory-list "/usr/share/info")
      (add-to-list 'Info-directory-list
                   (format "%selpa/%s"
                           user-emacs-directory
                           (car (directory-files (at-config-basedir "elpa") nil "^use-package-"))))
      (defhydra hydra-info-to (:hint nil :color teal)
        "
      _o_rg _e_lisp e_m_acs _h_yperspec"
        ("o" (custom/open-info "org" "*org info*"))
        ("e" (custom/open-info "elisp" "*elisp info*"))
        ("m" (custom/open-info "emacs" "*emacs info*"))
        ("h" (custom/open-info "gcl" "*hyperspec*")))
      (global-set-key (kbd "C-c C-h") 'hydra-info-to/body))

    (use-package info-buffer
      :ensure t
      :bind (("C-h i" . info-buffer)))

    (use-package info-colors
      :ensure t
      :hook (Info-selection-hook . info-colors-fontify-node))

    (use-package help+
      :ensure t
      :disabled)

    (use-package woman
      :config
      (defalias 'man 'woman) ;'Woman' offers completion better than 'man'.
      (setenv "MANPATH" "/usr/share/man:/usr/local/man"))

    (defhydra hydra-apropos (:color blue)
      "
      Apropos
      ---------------
      _a_s it is =)
      _d_ocumentation
      _v_ariable
      _c_ommand
      _l_ibrary
      _u_ser option
      _i_nfo
      _t_ags
      valu_e_
      "
      ("a" apropos)
      ("d" apropos-documentation)
      ("v" apropos-variable)
      ("c" apropos-command)
      ("l" apropos-library)
      ("u" apropos-user-option)
      ("i" info-apropos "info")
      ("t" tags-apropos "tags")
      ("e" apropos-value))
    (global-set-key (kbd "C-c h") 'hydra-apropos/body)
  #+END_SRC
