#+TITLE: Wiedzmin's literate Emacs configuration
#+OPTIONS: toc:4 h:4

* bootstrapping
** init essential packages
   #+BEGIN_SRC emacs-lisp :tangle yes
     (req-package auto-compile
       :config
       (auto-compile-on-load-mode 1)
       (auto-compile-on-save-mode 1)
       (setq auto-compile-display-buffer nil)
       (setq auto-compile-mode-line-counter t))

     (req-package f
       :force t
       :require s dash)
   #+END_SRC
** working directories
   A bunch of directories for various working datasets
   As the order of loading corresponding extensions,
   is cumbersome to maintain we should customize them ASAP (here)
   #+BEGIN_SRC emacs-lisp :tangle yes
     (req-package no-littering
       :force t
       :require cl-lib
       :init
       (setq no-littering-var-directory
             (expand-file-name "data/" user-emacs-directory)))
   #+END_SRC
** basic utils
   #+BEGIN_SRC emacs-lisp :tangle yes
     (setq home-directory (getenv "HOME"))
     (setq config-basedir
           (file-name-directory
            (or (buffer-file-name) load-file-name)))

     (defun concat-normalize-slashes (prefix suffix)
       (concat "/" (s-join "/"
                           (s-split "/"
                                    (concat prefix "/" suffix) t))))

     (defun at-homedir (&optional suffix)
       (concat-normalize-slashes home-directory suffix))

     (defun at-org-dir (&optional suffix)
       (concat-normalize-slashes (at-homedir "/docs/org")
                                 suffix))

     (defun at-org-kb-dir (&optional suffix)
       (concat-normalize-slashes (at-homedir "/docs/org-kb")
                                 suffix))

     (defun at-config-basedir (&optional suffix)
       (concat-normalize-slashes config-basedir suffix))

     (defun at-user-data-dir (&optional suffix)
       (concat-normalize-slashes no-littering-var-directory suffix))

     (cl-defmacro with-unmanaged-errors (&rest body)
       `(let ((debug-on-error-orig debug-on-error)
              (debug-on-quit-orig debug-on-quit))
          (setq debug-on-error nil)
          (setq debug-on-quit nil)
          ,@body
          (setq debug-on-error debug-on-error-orig)
          (setq debug-on-quit debug-on-quit-orig)))
   #+END_SRC
** input method utils (internal emacs keyboard layouts switching)
*** reverse input method
    it makes Emacs with non-English system keyboard layout
    to behave correctly with keybindings
    It definitely makes sense while using Emacs in such X WMs
    when there is no chance to hook into keyboard layouts switching
    (those are probably all, except StumpWM/XMonad, AFAIK)
    #+BEGIN_SRC emacs-lisp :tangle yes
      (req-package reverse-im
        :config
        (reverse-im-activate "russian-computer"))
    #+END_SRC
*** toggling input method
    This method uses external kbdd utility
    #+BEGIN_SRC emacs-lisp :tangle no
      ;;TODO: maybe implement as advice
      (defun toggle-input-method ()
        "Toggle input method while keeping system keyboard layout in latin.
        Essential for WMs without this functionality built-in."
        (interactive)
        (toggle-input-method)
        (when (executable-find "kbdd")
          (start-process "dbus-send"
                         nil
                         "dbus-send"
                         "--dest=ru.gentoo.KbddService"
                         "/ru/gentoo/KbddService"
                         "ru.gentoo.kbdd.set_layout"
                         "uint32:1")))
    #+END_SRC
** Encryption and security
*** packages
    #+BEGIN_SRC emacs-lisp :tangle yes
      (req-package epa
        :config
        (setq epg-gpg-program "gpg2")
        (epa-file-enable)
        (setq epg-gpg-home-directory "~/.gnupg"))

      (req-package password-cache
        :config
        (setq password-cache-expiry nil)
        (setq password-cache t))

      (req-package keychain-environment
        :config
        (keychain-refresh-environment))
    #+END_SRC
*** load encrypted credentials
    #+BEGIN_SRC emacs-lisp :tangle yes
      (load (at-config-basedir "credentials.el.gpg"))
    #+END_SRC
** set the very basic variable values
   #+BEGIN_SRC emacs-lisp :tangle yes
     (setq message-log-max t) ;; we don't want to lose any startup log info
     (setq shell-file-name "/bin/bash")
     (setq custom-file (at-config-basedir "customizations.el"))

     (setq diredp-hide-details-initially-flag nil) ;; otherwise we'll have very clipped dired info

     (fset 'yes-or-no-p 'y-or-n-p)
   #+END_SRC
** elisp extensions
   #+BEGIN_SRC emacs-lisp :tangle yes
     (req-package names :force t)
     (req-package anaphora)
     (req-package noflet)
   #+END_SRC
** GC tweaks
   #+BEGIN_SRC emacs-lisp :tangle yes
     (setq gc-cons-percentage 0.3)
     (setq gc-cons-threshold 20000000)

     (defun my-minibuffer-setup-hook ()
       (setq gc-cons-threshold most-positive-fixnum))

     (defun my-minibuffer-exit-hook ()
       (setq gc-cons-threshold 800000))

     (add-hook 'minibuffer-setup-hook #'my-minibuffer-setup-hook)
     (add-hook 'minibuffer-exit-hook #'my-minibuffer-exit-hook)
   #+END_SRC
* appearance
** fonts
*** defininitions
    #+BEGIN_SRC emacs-lisp :tangle yes
      (define-namespace custom/

      (defvar fonts-def (make-hash-table :test 'equal)
        "User's font definitions")

      (defun set-x-font (key)
        (set-face-attribute 'default nil :font (gethash key fonts-def)))

      (setf (gethash "consolas-base" fonts-def) "Consolas:size=12")
      (setf (gethash "terminus" fonts-def) "Terminus:size=14")
      (setf (gethash "terminus-bold" fonts-def) "Terminus:style=Bold:size=14")
      (setf (gethash "ptmono" fonts-def) "PTMono:size=12")
      (setf (gethash "bsvera-sans-mono" fonts-def) "Bitstream Vera Sans Mono:size=12")
      (setf (gethash "hack-regular" fonts-def) "Hack:size=12")
      (setf (gethash "iosevka" fonts-def) "IosevkaCC-10:weight=bold")

      )
    #+END_SRC
*** setup
    #+BEGIN_SRC emacs-lisp :tangle yes
      (setq font-lock-maximum-decoration t)
      (setq scalable-fonts-allowed t)

      (custom/set-x-font "iosevka")

      (req-package unicode-fonts
        :require persistent-soft
        :config
        (unicode-fonts-setup))
    #+END_SRC
** setup smart modeline
   #+BEGIN_SRC emacs-lisp :tangle yes
     (req-package powerline
       :config
       (powerline-default-theme))
   #+END_SRC
** load themes and choose one
   Also some other good-looking theme is "material-theme"
   #+BEGIN_SRC emacs-lisp :tangle yes
     (req-package darkburn-theme
       :config
       (load-theme 'darkburn t))

     (req-package nimbus-theme
       :disabled t
       :config
       (load-theme 'nimbus t))

     (req-package nord-theme
       :disabled t
       :config
       (load-theme 'nord t))

     ;; Providing dark enough colors, unless we are using an appropriate theme, Darkburn, for example
     (when (boundp 'zenburn-colors-alist)
       (set-face-attribute 'default nil :background "#1A1A1A")
       (set-face-attribute 'region nil :background (cdr (assoc "zenburn-bg-2" zenburn-colors-alist))))
   #+END_SRC
   #+END_SRC
** frames
   #+BEGIN_SRC emacs-lisp :tangle yes
     (setq frame-title-format "emacs - %b %f")

     (setq inhibit-startup-echo-area-message "octocat")
     (setq inhibit-startup-message t)
     (setq inhibit-startup-screen t)
     (setq initial-scratch-message nil)

     (setq line-number-mode t)

     (setq resize-mini-windows t)
     (setq max-mini-window-height 0.33)

     (setq column-number-mode t)

     (req-package time
       :config
       (display-time)
       (setq display-time-day-and-date t)
       ;; (setq display-time-form-list (list 'time 'load))
       (setq display-time-mail-file t)
       (setq display-time-string-forms '( day " " monthname " (" dayname ") " 24-hours ":" minutes)))

     (setq use-dialog-box nil)
     (setq visible-bell t)
     (setq ring-bell-function 'ignore)
     (setq size-indication-mode t)
     (setq split-width-threshold nil)
     (setq enable-recursive-minibuffers t)
     (setq echo-keystrokes 0.1)
     (setq truncate-partial-width-windows nil)

     (and (fboundp 'scroll-bar-mode) (scroll-bar-mode 0))
     (menu-bar-mode -1)
     (when (= emacs-major-version 25)
       (horizontal-scroll-bar-mode -1))
     (blink-cursor-mode 0)
     (tool-bar-mode 0)
     (tooltip-mode nil)
     (global-font-lock-mode t)
     (display-battery-mode 1)

     (req-package popwin)
     (req-package vline)

     (req-package volatile-highlights
       :config
       (volatile-highlights-mode 1))
   #+END_SRC
** uniquify buffer names
   #+BEGIN_SRC emacs-lisp :tangle yes
     (req-package uniquify
       :config
       (setq uniquify-buffer-name-style 'post-forward)
       (setq uniquify-separator ":")
       (setq uniquify-ignore-buffers-re "^\\*")
       (setq uniquify-strip-common-suffix nil))
   #+END_SRC
** diminish modeline contents
   #+BEGIN_SRC emacs-lisp :tangle yes
     (req-package delight
       :force t
       :config
       (delight 'git-gutter-mode " +-" 'git-gutter)
       (delight 'volatile-highlights-mode nil 'volatile-highlights)
       (delight 'emmet-mode nil 'emmet-mode)
       (delight 'whole-line-or-region-mode " WLR" 'whole-line-or-region)
       (delight 'abbrev-mode " Abv" 'abbrev)
       (delight 'auto-fill-function nil 'simple)
       (delight 'composable-mode " @" 'composable)
       (delight 'wrap-region-mode " wr" 'wrap-region)
       (delight 'elisp-slime-nav-mode nil 'elisp-slime-nav)
       (delight 'projectile-mode " prj" 'projectile)
       (delight 'company-mode " Î³" 'company)
       (delight 'eldoc-mode " ED" 'eldoc)
       (delight 'magit-filenotify-mode " FN" 'magit-filenotify)
       (delight 'editorconfig-mode " EC" 'editorconfig)
       (delight 'orglink-mode " OL" 'orglink))
   #+END_SRC
* persistence
** save history
   #+BEGIN_SRC emacs-lisp :tangle yes
     (req-package savehist
       :force t
       :config
       (setq savehist-save-minibuffer-history t)
       (setq savehist-autosave-interval 60)
       (setq history-length t)
       (setq history-delete-duplicates t)
       (setq savehist-additional-variables
             '(kill-ring
               search-ring
               regexp-search-ring))
       (savehist-mode t))
   #+END_SRC
** maintain recent files
   #+BEGIN_SRC emacs-lisp :tangle yes
     (req-package recentf
       :require recentf-ext
       :config
       (setq recentf-max-saved-items 250)
       (setq recentf-max-menu-items 15)
       (recentf-mode t))
   #+END_SRC
** backups
   #+BEGIN_SRC emacs-lisp :tangle yes
     (setq auto-save-visited-file-name t)
     (setq backup-by-copying t)
     (setq backup-by-copying-when-linked t)
     (setq delete-old-versions -1)
     (setq version-control t)

     (req-package backup-walker) ;TODO: bind to key and other stuff
   #+END_SRC
** lock files
   Simultaneous edits still will be detected when saving is made. But disabling lock files prevents our working
   dirs from being clobbered with.
   #+BEGIN_SRC emacs-lisp :tangle yes
     (setf create-lockfiles nil)
   #+END_SRC
* common
** emacs server
   #+BEGIN_SRC emacs-lisp :tangle yes
     (req-package server
       :config
       (defun custom/server-save-edit ()
         (interactive)
         (save-buffer)
         (server-edit))
       (defun custom/save-buffer-clients-on-exit ()
         (interactive)
         (if (and (boundp 'server-buffer-clients) server-buffer-clients)
             (server-save-edit)
           (save-buffers-kill-emacs t)))
       (unless (and (string-equal "root" (getenv "USER"))
                    (server-running-p))
         (require 'server)
         (server-start))
       (add-hook 'server-visit-hook
                 (lambda () (local-set-key (kbd "C-c C-c") 'custom/server-save-edit))))
   #+END_SRC
** some ubiquitous packages
*** hydra
    #+BEGIN_SRC emacs-lisp :tangle yes
      (req-package hydra
        :force t
        :config
        (set-face-attribute 'hydra-face-blue nil :foreground "#00bfff"))
    #+END_SRC
*** ivy-based
    #+BEGIN_SRC emacs-lisp :tangle yes
      (req-package ivy
        :delight ivy-mode
        :config
        (ivy-mode 1)
        (setq ivy-display-style 'fancy)
        (setq ivy-use-virtual-buffers t) ;; add ârecentf-modeâ and bookmarks to âivy-switch-bufferâ.
        (setq ivy-height 10) ;; number of result lines to display
        ;; (setq ivy-count-format "") ;; does not count candidates
        (setq ivy-initial-inputs-alist nil) ;; no regexp by default
        ;; configure regexp engine.
        (setq ivy-re-builders-alist
              '((t . ivy--regex-ignore-order))) ;; allow input not in order
        (bind-key "C-x b" 'ivy-switch-buffer)
        ;;TODO: bind ivy-resume
        ;;TODO: bind ffip-ivy-resume
        )

      (req-package counsel
        :require swiper
        :config
        (req-package smex) ;; for #'counsel-M-x sorting improvements
        (bind-key "C-x j j" 'counsel-bookmark)
        (bind-key "M-x" 'counsel-M-x)
        (bind-key "C-x C-f" 'counsel-find-file)
        (bind-key "C-h f" 'counsel-describe-function)
        (bind-key "C-h v" 'counsel-describe-variable)
        (bind-key "C-h l" 'counsel-find-library)
        (bind-key "C-x C-r" 'counsel-recentf)
        (bind-key "C-x C-d" 'counsel-descbinds))

      (req-package ivy-hydra
        :require ivy
        :disabled t)

      (req-package ivy-rich
        :require ivy
        :config
        (ivy-set-display-transformer 'ivy-switch-buffer 'ivy-rich-switch-buffer-transformer))

      (defun custom/open-portage-file ()
        "Choose and open Portage file"
        (interactive)
        (ivy-read "Portage files: "
                  (funcall #'(lambda () (f-files "/etc/portage" nil t)))
                  :action #'(lambda (candidate)
                              (find-file (concat "/sudo::" (expand-file-name candidate))))
                  :require-match t
                  :caller 'custom/open-portage-file))

      (defun custom/open-encrypted-document ()
        (interactive)
        (ivy-read "Various documents: "
                  (funcall #'(lambda () (f-files (at-homedir "/docs/enc") nil t)))
                  :action #'(lambda (candidate)
                              (find-file candidate))
                  :require-match t
                  :caller 'custom/open-encrypted-document))

      (defun custom/open-org-file ()
        (interactive)
        (ivy-read "Org files: "
                  (funcall #'(lambda () (f-files (at-org-dir) nil t)))
                  :action #'(lambda (candidate)
                              (find-file candidate))
                  :require-match t
                  :caller 'custom/open-org-file))

      (defun custom/open-org-kb-file ()
        (interactive)
        (ivy-read "Org files: "
                  (funcall #'(lambda () (f-files (at-org-kb-dir) nil t)))
                  :action #'(lambda (candidate)
                              (find-file candidate))
                  :require-match t
                  :caller 'custom/open-org-kb-file))

      ;; CREDITS: https://github.com/nathankot/dotemacs
      (defvar counsel-flycheck-history nil
        "History for `counsel-flycheck'")

      (defun counsel-flycheck ()
        (interactive)
        (if (not (bound-and-true-p flycheck-mode))
            (message "Flycheck mode is not available or enabled")
          (ivy-read "Error: "
                    (let ((source-buffer (current-buffer)))
                      (with-current-buffer (or (get-buffer flycheck-error-list-buffer)
                                               (progn
                                                 (with-current-buffer
                                                     (get-buffer-create flycheck-error-list-buffer)
                                                   (flycheck-error-list-mode)
                                                   (current-buffer))))
                        (flycheck-error-list-set-source source-buffer)
                        (flycheck-error-list-reset-filter)
                        (revert-buffer t t t)
                        (split-string (buffer-string) "\n" t " *")))
                    :action (lambda (s &rest _)
                              (-when-let* ( (error (get-text-property 0 'tabulated-list-id s))
                                            (pos (flycheck-error-pos error)) )
                                (goto-char (flycheck-error-pos error))))
                    :history 'counsel-flycheck-history)))

      (defhydra hydra-custom-counsel ()
        ("p" custom/open-portage-file "open portage file")
        ("e" custom/open-encrypted-document "open encrypted document")
        ("o" custom/open-org-file "open Org file")
        ("k" custom/open-org-kb-file "open Org KB file")
        ("q" nil "cancel"))
      (global-set-key (kbd "C-c r") 'hydra-custom-counsel/body)
    #+END_SRC
*** tramp                                                      :current:orgmode:
    #+BEGIN_SRC emacs-lisp :tangle no
       (req-package tramp
         :init
         (setq tramp-default-method "ssh")
         :config
         ;; Allow to use: /sudo:user@host:/path/to/file
         (setq tramp-ssh-controlmaster-options "")
         (add-to-list 'tramp-default-proxies-alist
                      '(".*" "\\`.+\\'" "/ssh:%h:")))
     #+END_SRC
*** crux
    #+BEGIN_SRC emacs-lisp :tangle yes
      (req-package crux)
    #+END_SRC
*** paradox
    #+BEGIN_SRC emacs-lisp :tangle yes
      (req-package paradox
        :require seq let-alist spinner hydra
        :config
        (setq paradox-execute-asynchronously t)
        (setq paradox-github-token private/paradox-github-token))
    #+END_SRC
** some keyboard related stuff
   #+BEGIN_SRC emacs-lisp :tangle yes
     (defun custom/keys-describe-prefixes ()
       (interactive)
       (with-output-to-temp-buffer "*Bindings*"
         (dolist (letter-group (list
                                (cl-loop for c from ?a to ?z
                                         collect (string c))
                                (cl-loop for c from ?Î± to ?Ï
                                         collect (string c))))
           (dolist (prefix '("" "C-" "M-" "C-M-"))
             (princ (mapconcat
                     (lambda (letter)
                       (let ((key (concat prefix letter)))
                         (format ";; (global-set-key (kbd \"%s\") '%S)"
                                 key
                                 (key-binding (kbd key)))))
                     letter-group
                     "\n"))
             (princ "\n\n")))))
   #+END_SRC
** remove elc after save
   If you're saving an elisp file, likely the .elc is no longer valid.
   #+BEGIN_SRC emacs-lisp :tangle yes
     (add-hook 'after-save-hook
               (lambda ()
               (if (and (equal major-mode 'emacs-lisp-mode)
                        (file-exists-p (concat buffer-file-name "c")))
                     (delete-file (concat buffer-file-name "c")))))
   #+END_SRC
** a handy macro to execute code only in major mode it makes sense in
   #+BEGIN_SRC emacs-lisp :tangle yes
     (defmacro custom/advice-for-major-mode (mode function)
       `(defadvice ,(intern (symbol-name function))
            (around ,(intern (concatenate
                              'string
                              (symbol-name function)
                              "-only-in-"
                              (symbol-name mode)))
                    activate)
          (when (eq major-mode ',mode)
            ad-do-it)))
   #+END_SRC
** Enable functions that are disabled by default
   #+BEGIN_SRC emacs-lisp :tangle yes
     (put 'dired-find-alternate-file 'disabled nil)
     (put 'erase-buffer 'disabled nil)
     (put 'narrow-to-region 'disabled nil)
     (put 'scroll-left 'disabled nil)
     (put 'scroll-right 'disabled nil)
     (put 'set-goal-column 'disabled nil)

     (setq disabled-command-function nil)
   #+END_SRC
** world time
   #+BEGIN_SRC emacs-lisp :tangle yes
     (setq display-time-world-list
           '(("Europe/Moscow" "Moscow")
             ("America/New_York" "New York")))
   #+END_SRC
** local variables processing
   #+BEGIN_SRC emacs-lisp :tangle yes
     (setq enable-local-variables nil)
   #+END_SRC
** warnings processing
   #+BEGIN_SRC emacs-lisp :tangle yes
     (setq warning-suppress-types nil)
   #+END_SRC
** mode lists for common needs
   #+BEGIN_SRC emacs-lisp :tangle yes
     ;; clean trailing whitespaces automatically
     (setq custom/trailing-whitespace-modes
           '(
             c++-mode
             c-mode
             haskell-mode
             emacs-lisp-mode
             lisp-mode
             python-mode
             js-mode
             js2-mode
             html-mode
             lua-mode
             yaml-mode
             ))
     ;; untabify some modes
     (setq custom/untabify-modes
           '(
             haskell-mode
             emacs-lisp-mode
             lisp-mode
             python-mode
             ))
     ;; sexp-based editing modes list
     (setq custom/sexp-editing-modes
           '(
             lisp-mode
             emacs-lisp-mode
             ))

     (defun common-hooks/trailing-whitespace-hook ()
       (when (member major-mode custom/trailing-whitespace-modes)
         (delete-trailing-whitespace)))

     (defun common-hooks/untabify-hook ()
       (when (member major-mode custom/untabify-modes)
         (untabify (point-min) (point-max))))

     (add-hook 'before-save-hook 'common-hooks/trailing-whitespace-hook)
     (add-hook 'before-save-hook 'common-hooks/untabify-hook)
   #+END_SRC
** encodings
   #+BEGIN_SRC emacs-lisp :tangle yes
     (define-coding-system-alias 'UTF-8 'utf-8)
     (define-coding-system-alias 'utf-8-emacs 'utf-8) ; needed by bbdb...
     (setq locale-coding-system 'utf-8)
     (set-default buffer-file-coding-system 'utf-8-unix)
     (prefer-coding-system 'utf-8)
     (set-buffer-file-coding-system 'utf-8 'utf-8-unix)
     (set-default-coding-systems 'utf-8)
     (set-keyboard-coding-system 'utf-8)
     (set-selection-coding-system 'utf-8)
     (set-terminal-coding-system 'utf-8)
   #+END_SRC
** OS-specific stuff
   Besides the common part of the common setup (sic!) there is also
   a little part of customizations being specific to OS Emacs is
   running on. So here they are (conditionally loaded):
*** linux specific
    #+BEGIN_SRC emacs-lisp :tangle (if (eq system-type 'gnu/linux) "yes" "no")
      (setq x-alt-keysym 'meta)

      (setq browse-url-browser-function 'browse-url-generic)
      (setq browse-url-generic-program "xdg-open")
    #+END_SRC
*** darwin specific
    #+BEGIN_SRC emacs-lisp :tangle (if (eq system-type 'darwin) "yes" "no")
      ;; key bindings
      (cua-mode t)
      (setq mac-option-key-is-meta t)
      (setq mac-command-key-is-meta nil)
      (setq process-connection-type nil)
      (setq mac-command-modifier 'hyper)    ;meta|super
      (setq mac-pass-command-to-system nil)   ;;avoid hiding with M-h
      (global-set-key [(hyper x)] 'cua-cut-region)
      (global-set-key [(hyper c)] 'cua-copy-region)
      (global-set-key [(hyper v)] 'cua-paste)
      (global-set-key [kp-delete] 'delete-char) ;; sets fn-delete to be right-delete
      (setq mac-control-modifier 'control)

      ;; Ignore .DS_Store files with ido mode
      (add-to-list 'ido-ignore-files "\\.DS_Store")

      (setq locate-command "mdfind")

      (prefer-coding-system 'utf-8-unix)
      (set-default-coding-systems 'utf-8-unix)
      (if (< emacs-major-version 23)
          (set-keyboard-coding-system 'utf-8))
      (set-clipboard-coding-system 'utf-8)
      (set-terminal-coding-system 'utf-8)
    #+END_SRC
** debug snippets
*** show last command in minibuffer
     #+BEGIN_SRC emacs-lisp :tangle yes
       (defun custom/print-last-command ()
         (message "last command was: %s" last-command))

       (defvar last-command-debug-p nil)

       (let ((last-command-debug-p nil))
         (global-set-key (kbd "C-c C-g")
                         (lambda ()
                           (interactive)
                           (if last-command-debug-p
                               (progn
                                 (add-hook 'post-command-hook 'custom/print-last-command)
                                 (setq last-command-debug-p nil))
                             (progn
                               (remove-hook 'post-command-hook 'custom/print-last-command)
                               (setq last-command-debug-p t))))))

     #+END_SRC
* navigate
** URLs, links and TAPs
*** definitions
    #+BEGIN_SRC emacs-lisp :tangle yes
      (define-namespace custom/

      ;;TODO: make implemetation less straightforward or find "right way" to do it
      (defun process-thing-at-point ()
        (interactive)
        (cond
         ((equal major-mode 'ag-mode) (compile-goto-error))
         ((or (equal major-mode 'org-agenda-mode)
              (equal major-mode 'org-mode)) (org-return))
         ((or (equal major-mode 'jabber-chat-mode)
              (equal major-mode 'erc-mode)) (browse-url (thing-at-point 'url t)))
         (t (browse-url (thing-at-point 'url t)))))

      ;;TODO: find a common way for all url-browsing functionality in config
      ;;to handle special cases like spaces in urls, etc.
      (defun open-urls-in-region (beg end)
        "Open URLs between BEG and END."
        (interactive "r")
        (save-excursion
          (save-restriction
            (let ((urls))
              (narrow-to-region beg end)
              (goto-char (point-min))
              (while (re-search-forward org-plain-link-re nil t)
                (push (thing-at-point 'url) urls))
              (dolist (url (reverse urls))
                (browse-url url))))))

      (defun find-url-backward ()
        (interactive)
        (re-search-backward org-plain-link-re nil t)
        (forward-word))

      (defun find-url-forward ()
        (interactive)
        (re-search-forward org-plain-link-re nil t)
        (re-search-backward org-plain-link-re nil t)
        (forward-word))

      )
    #+END_SRC
**** try
     #+BEGIN_SRC emacs-lisp :tangle no
       (defun org-return-dwim ()
         "Add new list or headline"
         (interactive)
         (cond
          ((org-in-item-p)
           (if (org-element-property :contents-begin (org-element-context))
               (org-insert-heading)
             (beginning-of-line)
             (setf (buffer-substring
                    (line-beginning-position) (line-end-position)) "")
             (org-return)))
          ((org-at-heading-p)
           (if (not (string= "" (org-element-property :title (org-element-context))))
               (progn (org-end-of-meta-data)
                      (org-insert-heading))
             (beginning-of-line)
             (setf (buffer-substring
                    (line-beginning-position) (line-end-position)) "")))
          ((org-at-table-p)
           (if (-any?
                (lambda (x) (not (string= "" x)))
                (nth
                 (- (org-table-current-dline) 1)
                 (org-table-to-lisp)))
               (org-return)
             ;; empty row
             (beginning-of-line)
             (setf (buffer-substring
                    (line-beginning-position) (line-end-position)) "")
             (org-return)))
          (t
           (org-return))))

     #+END_SRC

*** setup
    #+BEGIN_SRC emacs-lisp :tangle yes
      (req-package ace-link
        :config
        (ace-link-setup-default))

      (req-package link-hint)
    #+END_SRC
** cursor positioning
   #+BEGIN_SRC emacs-lisp :tangle yes
     (define-namespace custom/

     ;;Make cursor stay in the same column when scrolling using pgup/dn.
     ;;Previously pgup/dn clobbers column position, moving it to the
     ;;beginning of the line.
     ;;<http://www.dotemacs.de/dotfiles/ElijahDaniel.emacs.html>
     (defadvice scroll-up (around ewd-scroll-up first act)
       "Keep cursor in the same column."
       (let ((col (current-column)))
         ad-do-it
         (move-to-column col)))
     (defadvice scroll-down (around ewd-scroll-down first act)
       "Keep cursor in the same column."
       (let ((col (current-column)))
         ad-do-it
         (move-to-column col)))

     (defun skip-to-next-blank-line ()
       (interactive)
       (let ((inhibit-changing-match-data t))
         (forward-char 1)
         (unless (search-forward-regexp "^\\s *$" nil t)
           (forward-char -1))))

     (defun skip-to-previous-blank-line ()
       (interactive)
       (let ((inhibit-changing-match-data t))
         (forward-char -1)
         (unless (search-backward-regexp "^\\s *$" nil t)
           (forward-char 1))))

     ;; When popping the mark, continue popping until the cursor actually moves
     ;; Also, if the last command was a copy - skip past all the expand-region cruft.
     (defadvice pop-to-mark-command (around ensure-new-position activate)
       (let ((p (point)))
         (when (eq last-command 'save-region-or-current-line)
           ad-do-it
           ad-do-it
           ad-do-it)
         (dotimes (i 10)
           (when (= p (point)) ad-do-it))))

     )

     (setq scroll-preserve-screen-position 'always)

     (req-package saveplace
       :config
       (save-place-mode 1))
   #+END_SRC
** frames spawning
    #+BEGIN_SRC emacs-lisp :tangle yes
      (defun custom/update-frames (heads-count)
        (let* ((frames-count (length (frame-list)))
               (diff-count (- heads-count frames-count))
               (diff-count-abs (abs diff-count)))
          (cond
           ((plusp diff-count)
            (dotimes (i diff-count-abs)
              (make-frame-command)))
           ((minusp diff-count)
            (let ((frame (selected-frame)))
              (dolist (fr (frame-list))
                (unless (eq fr frame) (condition-case nil (delete-frame fr) (error nil))))))
           (t t))))
    #+END_SRC
** projectile
   #+BEGIN_SRC emacs-lisp :tangle yes
     (req-package projectile
       :require dash pkg-info
       :config
       (projectile-global-mode t)
       (setq projectile-enable-caching t)
       (setq projectile-require-project-root nil)
       (setq projectile-switch-project-action 'counsel-projectile)
       (def-projectile-commander-method ?d
         "Open project root in dired."
         (projectile-dired))
       (setq projectile-completion-system 'ivy)
       (setq projectile-tags-command
             "find %s -type f -print | egrep -v \"/[.][a-zA-Z]\" | etags -")
       (add-to-list 'projectile-other-file-alist '("html" "js"))
       (add-to-list 'projectile-other-file-alist '("js" "html")))

     (req-package counsel-projectile
       :require swiper projectile
       :config
       (counsel-projectile-on))
   #+END_SRC
** dired
   #+BEGIN_SRC emacs-lisp :tangle yes
     (defvar *directory-separator* '?/)
     (define-obsolete-function-alias 'make-local-hook 'ignore "21.1")
     (define-obsolete-variable-alias 'directory-sep-char '*directory-separator*)

     (req-package dired
       :init
       :config
       ;; navigate to margins
       ;; C-a is nicer in dired if it moves back to start of files
       (defun custom/dired-back-to-start-of-files ()
         (interactive)
         (backward-char (- (current-column) 2)))
       ;; M-up is nicer in dired if it moves to the third line - straight to the ".."
       (defun custom/dired-back-to-top ()
         (interactive)
         (beginning-of-buffer)
         (next-line 2)
         (custom/dired-back-to-start-of-files))
       ;; M-down is nicer in dired if it moves to the last file
       (defun custom/dired-jump-to-bottom ()
         (interactive)
         (end-of-buffer)
         (next-line -1)
         (custom/dired-back-to-start-of-files))
       (setq dired-recursive-deletes 'top) ;; Allows recursive deletes
       (setq dired-dwim-target t)
       (setq dired-listing-switches "-lah1v --group-directories-first")
       (add-hook 'dired-mode-hook 'auto-revert-mode)
       (global-set-key (kbd "C-c x") 'direx:jump-to-directory)
       ;; (global-set-key (kbd "C-c C-j") 'dired-jump)
       (bind-key "C-c C-m" 'custom/get-file-md5 dired-mode-map)
       (bind-key "C-a" 'custom/dired-back-to-start-of-files dired-mode-map)
       (bind-key "C-x C-k" 'dired-do-delete dired-mode-map) ;; Delete with C-x C-k to match file buffers and magit
       (bind-key "e" (lambda () (interactive) (eww-open-file (dired-get-file-for-visit))) dired-mode-map)
       (bind-key (vector 'remap 'beginning-of-buffer) 'custom/dired-back-to-top dired-mode-map)
       (bind-key (vector 'remap 'end-of-buffer) 'custom/dired-jump-to-bottom dired-mode-map))

     ;; Reload dired after making changes
     (--each '(dired-do-rename
               dired-create-directory
               wdired-abort-changes)
       (eval `(defadvice ,it (after revert-buffer activate)
                (revert-buffer))))

     (req-package dired-filetype-face)
   #+END_SRC
** dired extension packs
   #+BEGIN_SRC emacs-lisp :tangle yes
     (req-package dired+
       :config
       (setq diredp-ignored-file-name 'green-face)
       (setq diredp-other-priv 'white-face)
       (setq diredp-rare-priv 'white-red-face)
       (setq diredp-compressed-file-suffix 'darkyellow-face))

     (req-package dired-x)
   #+END_SRC
** dired standalone extensions
   #+BEGIN_SRC emacs-lisp :tangle yes
     (req-package wdired
       :defer t
       :config
       (setq wdired-allow-to-change-permissions 'advanced)
       (bind-key "C-a" 'custom/dired-back-to-start-of-files wdired-mode-map)
       (bind-key (vector 'remap 'beginning-of-buffer) 'custom/dired-back-to-top wdired-mode-map)
       (bind-key (vector 'remap 'end-of-buffer) 'custom/dired-jump-to-bottom wdired-mode-map)
       (bind-key "r" 'wdired-change-to-wdired-mode dired-mode-map))

     (req-package dired-toggle-sudo
       :config
       (bind-key "!" 'dired-toggle-sudo dired-mode-map))

     (req-package dired-narrow
       :config
       (bind-key "/" 'dired-narrow dired-mode-map))

     (req-package dired-quick-sort
       :config
       (dired-quick-sort-setup))
   #+END_SRC
** bookmark+
   #+BEGIN_SRC emacs-lisp :tangle yes
     (req-package bookmark+)

     (req-package crosshairs :require hl-line+ col-highlight vline)
   #+END_SRC
** search
   #+BEGIN_SRC emacs-lisp :tangle yes
     (req-package occur-context-resize)

     (req-package phi-search)

     (req-package sift
       :config
       (defadvice sift-regexp (around escape-search-term activate)
         (ad-set-arg 0 (replace-regexp-in-string "\\*" "\\\\*" (ad-get-arg 0)))
         ad-do-it))

     (req-package socyl
       :config
       (setq socyl-backend 'ripgrep))

     (req-package phi-search-mc
       :require phi-search multiple-cursors
       :config
       (phi-search-mc/setup-keys)
       (add-hook 'isearch-mode-hook 'phi-search-from-isearch-mc/setup-keys))

     (req-package fuzzy
       :config
       (turn-on-fuzzy-isearch))

     (req-package wgrep
       :config
       (bind-key "C-x C-q" 'wgrep-change-to-wgrep-mode grep-mode-map)
       (bind-key "C-c C-c" 'wgrep-finish-edit grep-mode-map))

     ;;TODO: sync and maybe slurp something from rc-cc
     (req-package counsel-gtags
       :require counsel gtags
       :config
       (setq counsel-gtags-path-style 'relative)
       (setq counsel-gtags-ignore-case t)
       (setq counsel-gtags-auto-update t)
       (setq counsel-gtags-suggested-key-mapping t)
       (bind-key "C-M-s" 'counsel-gtags-find-symbol counsel-gtags-mode-map)
       (bind-key "M-." 'counsel-gtags-dwim counsel-gtags-mode-map)
       (bind-key "M-r" 'counsel-gtags-find-reference counsel-gtags-mode-map)
       (bind-key "M-," 'counsel-gtags-go-backward counsel-gtags-mode-map)
       (add-hook 'dired-mode-hook 'counsel-gtags-mode)
       (add-hook 'c-mode-hook 'counsel-gtags-mode)
       (add-hook 'c++-mode-hook 'counsel-gtags-mode))

     (defadvice occur-mode-goto-occurrence (after close-occur activate)
       (delete-other-windows))
   #+END_SRC
** operations with windows
   #+BEGIN_SRC emacs-lisp :tangle yes
     (req-package windmove
       :bind
       (("C-s-<up>" . windmove-up)
        ("C-s-<down>" . windmove-down)
        ("C-s-<left>" . windmove-left)
        ("C-s-<right>" . windmove-right)
        ))

     (req-package winner
       :config
       (winner-mode 1))

     (req-package golden-ratio
       :delight golden-ratio-mode
       :init
       (golden-ratio-mode 1))

     (req-package framemove
       :config
       (setq framemove-hook-into-windmove t))
     (req-package windsize
       :disabled t ; have no sense with golden-ratio enabled
       :bind
       (("C-s-k" . windsize-up)
        ("C-s-j" . windsize-down)
        ("C-s-h" . windsize-left)
        ("C-s-l" . windsize-right)
        ))

     (req-package ace-window
       :require avy
       :init
       (setq aw-background nil)
       (setq aw-leading-char-style 'char)
       :config
       (set-face-attribute 'aw-mode-line-face nil :foreground "white")
       (custom-set-faces
        '(aw-leading-char-face
          ((t (:inherit ace-jump-face-foreground :height 3.0))))))

     (req-package tile)
     (req-package transpose-frame)
   #+END_SRC
** scope
   #+BEGIN_SRC emacs-lisp :tangle yes
      (req-package ibuffer
       :defer t
       :config
       (defun custom/ibuffer-filter-by-extname (qualifier)
         (interactive "sFilter by extname: ")
         (ibuffer-filter-by-filename (concat "\\." qualifier "$")))
       (setq ibuffer-default-sorting-mode 'major-mode) ;recency
       (setq ibuffer-always-show-last-buffer :nomini)
       (setq ibuffer-default-shrink-to-minimum-size t)
       (setq ibuffer-jump-offer-only-visible-buffers t)
       (setq ibuffer-saved-filters
             '(("dired" ((mode . dired-mode)))
               ("foss" ((filename . "foss")))
               ("pets" ((filename . "pets")))
               ("jabberchat" ((mode . jabber-chat-mode)))
               ("orgmode" ((mode . org-mode)))
               ("elisp" ((mode . emacs-lisp-mode)))
               ("fundamental" ((mode . fundamental-mode)))
               ("haskell" ((mode . haskell-mode)))))
       (setq ibuffer-saved-filter-groups custom/ibuffer-saved-filter-groups)
       (add-hook 'ibuffer-mode-hook
                 (lambda () (ibuffer-switch-to-saved-filter-groups "default"))) ;; Make sure we're always using our buffer groups
       (add-hook 'ibuffer-mode-hook
                 (lambda () (bind-key "M-o" 'other-window ibuffer-mode-map))) ; was ibuffer-visit-buffer-1-window
       (bind-key "/ ." 'custom/ibuffer-filter-by-extname ibuffer-mode-map))

     (req-package ibuffer-vc
       :config
       (add-hook 'ibuffer-hook
                 (lambda ()
                   (ibuffer-vc-set-filter-groups-by-vc-root)
                   (unless (eq ibuffer-sorting-mode 'alphabetic)
                     (ibuffer-do-sort-by-alphabetic)))))

     ;;TODO: merge to hydra or create a new one + maybe expand with other useful bindings
     (bind-key "nd" 'ni-narrow-to-defun-indirect-other-window ctl-x-4-map)
     (bind-key "nn" 'ni-narrow-to-region-indirect-other-window ctl-x-4-map)
     (bind-key "np" 'ni-narrow-to-page-indirect-other-window ctl-x-4-map)

     (req-package recursive-narrow)
   #+END_SRC
** warping
   #+BEGIN_SRC emacs-lisp :tangle yes
     (req-package swoop
       :require ht pcre2el async
       :config
       (bind-key "<down>" 'swoop-action-goto-line-next swoop-map)
       (bind-key "<up>" 'swoop-action-goto-line-prev swoop-map))

     (req-package swiper
       :config
       (setq swiper-include-line-number-in-search t)
       (custom-set-faces
        '(swiper-minibuffer-match-face-1
          ((t :background "#dddddd")))
        '(swiper-minibuffer-match-face-2
          ((t :background "#bbbbbb" :weight bold)))
        '(swiper-minibuffer-match-face-3
          ((t :background "#bbbbff" :weight bold)))
        '(swiper-minibuffer-match-face-4
          ((t :background "#ffbbff" :weight bold)))))

     (req-package avy
       :require cl-lib
       :config
       (setq avy-timeout-seconds 0.5)
       (set-face-attribute 'avy-goto-char-timer-face nil :foreground "green" :weight 'bold))

     (req-package filecache)

     (req-package hyperbole
       :require zoom-frm)

     (req-package beacon
       :config
       (setq beacon-color "#fce94f")
       (beacon-mode 1))
   #+END_SRC
** hydras and keybindings
   #+BEGIN_SRC emacs-lisp :tangle yes
     ;;TODO: plan docstring
     (defhydra hydra-window ()
       "window"
       ("<left>" windmove-left "left")
       ("<down>" windmove-down "down")
       ("<up>" windmove-up "up")
       ("<right>" windmove-right "right")
       ("w" ace-window "ace" :color blue)
       ("s" (lambda () (interactive) (ace-window 4)) "swap")
       ("d" (lambda () (interactive) (ace-window 16)) "delete")
       ("m" ace-maximize-window "a1" :color blue)
       ("=" text-scale-increase)
       ("-" text-scale-decrease)
       ("f" make-frame-command)
       ("F" delete-other-frames)              ;; TODO: maybe provide current frame deletion also
       ("t" tile :color blue)
       ("T" transpose-frame "transpose")
       ("i" flip-frame "flip")
       ("o" flop-frame "flop")
       ("r" rotate-frame "rotate")
       ("a" counsel-load-theme :color blue)
       ("q" nil "cancel"))
     (global-set-key (kbd "<f2>") 'hydra-window/body)

     (defhydra hydra-errors ()
       ("!" flycheck-first-error "ace" :color blue)
       ("?" flycheck-list-errors "list errors" :color blue)
       ("@" flycheck-buffer "check buffer" :color blue)
       ("c" counsel-flycheck :color blue)
       ("<up>" flycheck-previous-error "previous error")
       ("<down>" flycheck-next-error "next error")
       ("<left>" previous-error "previous error")
       ("<right>" next-error "next error")
       ("q" nil "cancel"))
     (global-set-key (kbd "C-q") 'hydra-errors/body)

     (defhydra hydra-history ()
       ("y" counsel-yank-pop)
       ("m" counsel-mark-ring)
       ("c" counsel-command-history)
       ("e" counsel-expression-history)
       ("p" counsel-package)
       ("b" backup-walker-start)
       ("q" nil "cancel"))
     (global-set-key (kbd "<f9>") 'hydra-history/body)

     (defhydra hydra-projects (:color teal)
       "
       PROJECT: %(projectile-project-root)
       Project               More                              Search
       --------------------------------------------------------------------------------
       _i_buffer             _c_ommander                       _r_egexp
       _I_nfo                _d_ired                           a_g_
       run _t_ests           recent_f_                         _m_ulti-swoop
       _C_ompile             _s_witch project
       in_v_alidate cache    _R_un command in rootdir
       _k_ill buffers        run _A_sync command in rootdir
                             _h_elm-projectile
       "
       ("i" ibuffer)
       ("I" projectile-project-info)
       ("t" projectile-test-project)
       ("C" projectile-compile-project)
       ("v" projectile-invalidate-cache)
       ("k" projectile-kill-buffers)
       ("c" projectile-commander)
       ("d" projectile-dired)
       ("f" projectile-recentf)
       ("s" counsel-projectile-switch-project)
       ("R" projectile-run-command-in-root)
       ("A" projectile-run-async-shell-command-in-root)
       ("h" counsel-projectile)
       ("r" socyl-search-regexp)
       ("g" counsel-ag)
       ("l" counsel-git-log)
       ("m" swiper-multi))
     (global-set-key (kbd "<f8>") 'hydra-projects/body)

     (defhydra hydra-navigate ()
       "
       Locate                  Narrow/widen               Links
       -----------------------------------------------------------------------
       _i_ search TAP          _r_egion                   _f_ hint & open
       _o_ search query        _d_efun                    _y_ hint & copy
       <prior> URL backward    defun + _C_omments         select w_3_m buffer
       <next>  URL forward     _w_iden                    open _u_rls in region
       _=_ next blank line     recursive _N_arrow DWIM
       _-_ prev blank line     recursive wi_D_en DWIM
       _>_ reposition buffer

       _<return>_ Execute TAP
       "
       ("i" (lambda () (interactive) (swiper (thing-at-point 'symbol))) :color blue)
       ("o" (lambda () (interactive) (swiper "")) :color blue)
       ("<prior>" custom/find-url-backward "previous url")
       ("<next>" custom/find-url-forward "next url")
       ("=" custom/skip-to-next-blank-line)
       ("-" custom/skip-to-previous-blank-line)
       (">" reposition-window :color blue)
       ("r" narrow-to-region :color blue)
       ("d" narrow-to-defun :color blue)
       ("C" narrow-to-defun+comments-above :color blue)
       ("w" widen :color blue)
       ("N" recursive-narrow-or-widen-dwim)
       ("D" recursive-widen-dwim)
       ("f" link-hint-open-link :color blue)
       ("y" link-hint-copy-link :color blue)
       ("3" w3m-select-buffer :color blue)
       ("u" custom/open-urls-in-region :color blue)
       ("<return>" custom/process-thing-at-point "execute ;)" :color blue))
     (global-set-key (kbd "<f3>") 'hydra-navigate/body)

     (global-unset-key (kbd "C-s"))
     (global-unset-key (kbd "C-r"))
     (global-unset-key (kbd "C-M-s"))
     (global-unset-key (kbd "C-M-r"))
     (global-unset-key (kbd "C-x C-b"))
     (global-set-key (kbd "C-s") 'phi-search)
     (global-set-key (kbd "C-r") 'phi-search-backward)
     (global-set-key (kbd "C-x k") 'kill-buffer)
   #+END_SRC
* editing
** utils for files and buffers
   #+BEGIN_SRC emacs-lisp :tangle yes
     (define-namespace custom/

     ;; TODO implement variant with path for some VCS-controlled tree
     (defun copy-file-name-to-clipboard ()
       "Copy the current buffer file name to the clipboard."
       (interactive)
       (let ((filename (if (equal major-mode 'dired-mode)
                           default-directory
                         (buffer-file-name))))
         (when filename
           (kill-new filename)
           (message "Copied buffer file name '%s' to the clipboard." filename))))

     (defun get-file-md5 ()
       (interactive)
       (when (derived-mode-p 'dired-mode)
         (let ((abs-file-name (dired-get-filename)))
           (unless (file-directory-p abs-file-name)
             (with-temp-buffer
               (let ((prefix-arg t))
                 (shell-command (format "md5sum %s" abs-file-name))
                 (buffer-string)))))))

     )

     (req-package scratch)

     ;; https://github.com/Fanael/persistent-scratch
   #+END_SRC
** case switching
   #+BEGIN_SRC emacs-lisp :tangle no
     (put 'upcase-region 'disabled nil)
     (put 'downcase-region 'disabled nil)

     (defvar custom/transform-whole-words nil)

     (defun ensure-region-active (oldfun &rest args)
       (when (region-active-p)
         (apply oldfun args)))

     (defun maybe-backward-word (oldfun &rest args)
       (when (and (not (looking-back "\\b")) custom/transform-whole-words)
         (backward-word)))

     (advice-add 'upcase-region :around 'ensure-region-active)
     (advice-add 'downcase-region :around 'ensure-region-active)
     (advice-add 'capitalize-region :around 'ensure-region-active)

     (advice-add 'upcase-region :before 'maybe-backward-word)
     (advice-add 'downcase-region :before 'maybe-backward-word)
     (advice-add 'capitalize-region :before 'maybe-backward-word)
   #+END_SRC
** move and bend text around
*** definitions
    This override for transpose-words fixes what I consider to be a flaw with the default implementation in simple.el. To transpose chars or lines, you always put the point on the second char or line
    to transpose with the previous char or line. The default transpose-words implementation does the opposite by flipping the current word with the next word instead of the previous word. The new
    implementation below instead makes transpose-words more consistent with how transpose-chars and trasponse-lines behave.
    #+BEGIN_SRC emacs-lisp :tangle yes
      (defun custom/transpose-words (arg)
        "[Override for default transpose-words in simple.el]
        Interchange words around point, leaving point at end of
        them. With prefix arg ARG, effect is to take word before or
        around point and drag it backward past ARG other words (forward
        if ARG negative). If ARG is zero, the words around or after
        point and around or after mark are interchanged."
        (interactive "*p")
        (if (eolp) (forward-char -1))
        (transpose-subr 'backward-word arg)
        (forward-word (+ arg 1)))

      (defun fix-screwed-up-paragraphs(beg end)
        (interactive "r")
        (shell-command-on-region beg end "fmt -w2000" nil t))
    #+END_SRC
*** setup
    #+BEGIN_SRC emacs-lisp :tangle yes
      (req-package anchored-transpose)

      (req-package drag-stuff
        :config
        (setq drag-stuff-modifier '(meta shift))
        (turn-off-drag-stuff-mode))

      (req-package snakehump)
      (req-package adaptive-wrap)
      (req-package hungry-delete)
      (req-package replace+)

      (req-package multiple-cursors)

      (req-package mc-extras
        ;;TODO: explore and bind functions
        :require multiple-cursors
        :defer t)

      (req-package ace-mc
        :require ace-jump-mode multiple-cursors dash
        :config
        (global-set-key (kbd "C-)") 'ace-mc-add-multiple-cursors))

      ;; Transpose stuff with M-t
      (global-unset-key (kbd "M-t")) ;; which used to be transpose-words
      ;;TODO: plan docstring
      (defhydra hydra-transpose ()
        ("_" undo-tree-undo "undo last")
        ("w" custom/transpose-words "on words")
        ("s" transpose-sexps "on sexps")
        ("p" transpose-params "on params")
        ("a" anchored-transpose "anchored")
        ("q" nil "cancel"))
      (global-set-key (kbd "M-t") 'hydra-transpose/body)
    #+END_SRC
*** BACKLOG make MC setup work correctly in all needed modes, review and setup additional modes
**** check and collect these modes
**** reference links
***** https://github.com/magnars/multiple-cursors.el
***** https://github.com/knu/mc-extras.el
** regions and rectangles
*** definitions
    #+BEGIN_SRC emacs-lisp :tangle yes
      (define-namespace custom/

      (defadvice whole-line-or-region-kill-region
          (before whole-line-or-region-kill-read-only-ok activate)
        (interactive "p")
        (unless kill-read-only-ok (barf-if-buffer-read-only)))

      (defun cite-region (arg)
        (clipboard-kill-ring-save (region-beginning) (region-end))
        (with-temp-buffer
          (let ((comment-start "> "))
            (yank)
            (comment-region (point-min) (point-max))
            (when (> arg 1)
              (beginning-of-buffer)
              (insert "\n"))
            (clipboard-kill-region (point-min) (point-max)))))

      (defun append-cited-region (arg)
        (interactive "P")
        (custom/cite-region (prefix-numeric-value arg))
        (end-of-buffer)
        (yank))

      ;; Compliment to kill-rectangle (just like kill-ring-save compliments
      ;; kill-region)
      ;; http://www.emacsblog.org/2007/03/17/quick-tip-set-goal-column/#comment-183
      (defun kill-save-rectangle (start end &optional fill)
        "Save the rectangle as if killed, but don't kill it. See
        `kill-rectangle' for more information."
        (interactive "r\nP")
        (kill-rectangle start end fill)
        (goto-char start)
        (yank-rectangle))

      (defun compact-spaces-in-region (beg end)
        "replace all whitespace in the region with single spaces"
        (interactive "r")
        (save-excursion
          (save-restriction
            (narrow-to-region beg end)
            (goto-char (point-min))
            (while (re-search-forward "\\s-+" nil t)
              (replace-match "")))))

      )
    #+END_SRC
*** setup
    #+BEGIN_SRC emacs-lisp :tangle yes
      (req-package expand-region
        :defer t
        :bind ("C-=" . er/expand-region))

      (req-package region-bindings-mode
        :config
        (region-bindings-mode-enable)
        (setq region-bindings-mode-disable-predicates '((lambda () buffer-read-only)))
        (bind-key "C->" 'mc/mark-next-like-this region-bindings-mode-map)
        (bind-key "C-<" 'mc/mark-previous-like-this region-bindings-mode-map)
        (bind-key "C-c C-o" 'mc/mark-all-like-this region-bindings-mode-map)
        (bind-key "C-{" 'mc/edit-beginnings-of-lines region-bindings-mode-map)
        (bind-key "C-}" 'mc/edit-ends-of-lines region-bindings-mode-map)
        (bind-key "M-+" 'mc/mark-more-like-this-extended region-bindings-mode-map)
        (bind-key "C-c a" 'mc/mark-all-in-region region-bindings-mode-map)
        (bind-key "C-c d" 'mc/mark-all-like-this-in-defun region-bindings-mode-map)
        (bind-key "C-c D" 'mc/mark-all-like-this-dwim region-bindings-mode-map)
        (bind-key "`" 'mc/sort-regions region-bindings-mode-map)
        (bind-key "C-+" 'mc/insert-numbers region-bindings-mode-map))

      (req-package rectangular-region-mode
        :config
        (bind-key "H-SPC" 'set-rectangular-region-anchor))

      (req-package selected
        :init
        (setq selected-org-mode-map (make-sparse-keymap))
        :config
        (selected-global-mode)
        :bind (:map selected-keymap
               ("q" . selected-off)
               ("u" . upcase-region)
               ("d" . downcase-region)
               ("c" . upcase-initials-region)
               ("w" . count-words-region)
               ("m" . apply-macro-to-region-lines)
               :map selected-org-mode-map
               ("t" . org-table-convert-region)))

      (req-package whole-line-or-region ;; if no region is active, act on current line
        :defer t
        :config
        (whole-line-or-region-mode 1)
        (setq whole-line-or-region-extensions-alist
              '((comment-dwim whole-line-or-region-comment-dwim-2 nil)
                (copy-region-as-kill whole-line-or-region-copy-region-as-kill nil)
                (kill-region whole-line-or-region-kill-region nil)
                (kill-ring-save whole-line-or-region-kill-ring-save nil)
                (yank whole-line-or-region-yank nil))))

      (req-package wrap-region
        :require dash
        :config
        (wrap-region-global-mode 1)
        (wrap-region-add-wrapper "*" "*")
        (wrap-region-add-wrapper "(" ")")
        (wrap-region-add-wrapper "{-" "-}" "#")
        (wrap-region-add-wrapper "/* " " */" "#" '(javascript-mode css-mode)))
    #+END_SRC

** commenting
   #+BEGIN_SRC emacs-lisp :tangle yes
     (req-package comment-dwim-2
       :config
       (global-set-key (kbd "M-]") 'comment-dwim-2))

     (req-package rebox2) ;;TODO: bind commands

     (setq comment-style 'indent)
   #+END_SRC
** clipboard and killring
   #+BEGIN_SRC emacs-lisp :tangle yes
     (req-package savekill)

     (setq save-interprogram-paste-before-kill t)
   #+END_SRC
** undo/redo
   #+BEGIN_SRC emacs-lisp :tangle yes
     (setq undo-limit 1000000)

     (req-package undo-tree
       :defer t
       :config
       (global-undo-tree-mode t)
       (setq undo-tree-mode-lighter "")
       (setq undo-tree-visualizer-timestamps t)
       (setq undo-tree-visualizer-diff t))
   #+END_SRC
** utils
*** definitions
    #+BEGIN_SRC emacs-lisp :tangle yes
      (define-namespace custom/

      ;; current date and time.
      (defun insert-current-date-time()
        "Insert the current date and time at point."
        (interactive "*")
        (insert (format-time-string "[%d.%m.%Y - %H:%M]" (current-time))))

      (defun strip-prefix (prefix lines)
        (s-join "\n"
                (mapcar (lambda (s) (s-chop-prefix prefix s))
                        (s-lines lines))))

      )
    #+END_SRC
*** setup
    #+BEGIN_SRC emacs-lisp :tangle yes
      (req-package table) ;; table
      (req-package epoch-view :disabled t)

      (req-package yatemplate
        :require yasnippet
        :init
        (auto-insert-mode)
        :config
        (setq yatemplate-dir (at-config-basedir "resources/auto-insert"))
        (yatemplate-fill-alist))

      (req-package whitespace
        :defer t)

      (req-package mark
        :disabled t
        :require fm)

      (req-package page-break-lines
        :config
        (turn-on-page-break-lines-mode))

      (req-package macro-math
        :disabled t
        :config
        (global-set-key "\C-x~" 'macro-math-eval-and-round-region)
        (global-set-key "\C-x=" 'macro-math-eval-region))

      ;;TODO: consolidate all whitespaces utils
      (req-package ws-butler :commands ws-buttler-mode)

      (req-package composable
        :config
        (composable-mode)
        (composable-mark-mode))

      (req-package mwim
        :config
        (global-set-key [remap move-beginning-of-line] 'mwim-beginning-of-code-or-line)
        (global-set-key [remap move-end-of-line] 'mwim-end-of-code-or-line))
    #+END_SRC
** major modes
   #+BEGIN_SRC emacs-lisp :tangle yes
     (req-package rst)

     (req-package generic
       :disabled t
       :init
       (req-package generic-x)
       :config
       (define-generic-mode 'keymap-mode
         '("#")
         '("control" "meta" "shift" "alt" "altgr" "compose" "keycode")
         nil
         '(".keymap\\'" ".map\\'")
         nil)
       (setq generic-default-modes (delete 'javascript-generic-mode
                                           generic-default-modes)))

     (req-package vimrc-mode
       :defer t
       :mode ".vim\\(rc\\)?$")

     (req-package sh-script
       :mode (("bashrc$" . sh-mode)
              ("bash_profile$" . sh-mode)
              ("bash_aliases$" . sh-mode)
              ("bash_local$" . sh-mode)
              ("bash_completion$" . sh-mode)
              (".powenv$" . sh-mode)))

     (req-package nginx-mode
       :mode ("nginx" . nginx-mode))

     (req-package crontab-mode
       :mode (("cron" . crontab-mode)
              ("crontab" . crontab-mode)))

     (req-package csv-mode)
     (req-package fic-mode)
     (req-package dockerfile-mode)
     (req-package graphql-mode)
   #+END_SRC
** sexps
   #+BEGIN_SRC emacs-lisp :tangle yes
     (req-package highlight-sexp)

     ;; TODO compare with paredit and finally choose one (sane non-lisp modes setup intended)
     (req-package smartparens
       :disabled t
       :require cl-lib dash
       :config
       (req-package smartparens-config)
       (smartparens-global-strict-mode t)
       (show-smartparens-global-mode t)
       (sp-use-smartparens-bindings)
       (bind-key "C-M-t" 'sp-transpose-sexp smartparens-mode-map)
       (bind-key "M-F" nil smartparens-mode-map)
       (bind-key "M-B" nil smartparens-mode-map)
       (bind-key "M-<backspace>" nil smartparens-mode-map)
       (bind-key "C-S-a" 'sp-beginning-of-sexp sp-keymap)
       (bind-key "C-S-d" 'sp-end-of-sexp sp-keymap)
       (bind-key ")" 'sp-up-sexp emacs-lisp-mode-map)
       (bind-key "C-<left_bracket>" 'sp-select-previous-thing sp-keymap)
       (bind-key "C-c s r n" 'sp-narrow-to-sexp sp-keymap)
       (bind-key "C-c s t" 'sp-prefix-tag-object sp-keymap)
       (bind-key "C-c s p" 'sp-prefix-pair-object sp-keymap)
       (bind-key "C-c s y" 'sp-prefix-symbol-object sp-keymap)
       (bind-key "C-c s c" 'sp-convolute-sexp sp-keymap)
       (bind-key "C-c s a" 'sp-absorb-sexp sp-keymap)
       (bind-key "C-c s w" 'sp-rewrap-sexp sp-keymap)
       (bind-key "C-c s e" 'sp-emit-sexp sp-keymap)
       (bind-key "C-c s p" 'sp-add-to-previous-sexp sp-keymap)
       (bind-key "C-c s n" 'sp-add-to-next-sexp sp-keymap)
       (bind-key "C-c s j" 'sp-join-sexp sp-keymap)
       (bind-key "C-c s s" 'sp-split-sexp sp-keymap))

     (req-package paredit
       :config
       (defun common-hooks/sexp-editing-hook ()
         (when (member major-mode custom/sexp-editing-modes)
           (paredit-mode 1)))
       (add-hook 'prog-mode-hook 'common-hooks/sexp-editing-hook))
   #+END_SRC
** some fancy editing methods
   #+BEGIN_SRC emacs-lisp :tangle yes
     (req-package edit-indirect)
     (req-package narrow-indirect)

     (req-package miniedit
       :defer t
       :commands minibuffer-edit
       :init (miniedit-install))
   #+END_SRC
** indentation
   #+BEGIN_SRC emacs-lisp :tangle yes
     (setq indent-tabs-mode nil)

     (req-package dtrt-indent
       :config
       (dtrt-indent-mode))

     (setq-default tab-width 4)

     ;;TODO: ensure python part is installed
     (req-package indent-tools
       :config
       (global-set-key (kbd "C-c 3") 'indent-tools-hydra/body))
   #+END_SRC
** Using settings from .editorconfig
    #+BEGIN_SRC emacs-lisp :tangle yes
      (req-package editorconfig
        :config
        (add-hook 'prog-mode-hook #'(lambda () (editorconfig-mode 1)))
        (add-hook 'text-mode-hook #'(lambda () (editorconfig-mode 1))))
    #+END_SRC
** setup basic minor modes
   #+BEGIN_SRC emacs-lisp :tangle yes
     (auto-compression-mode t)
     (delete-selection-mode t)
     (electric-indent-mode -1)
     (global-auto-revert-mode 1);; Auto refresh buffers
     (show-paren-mode t)
     (transient-mark-mode 1)
   #+END_SRC
** set variables
   #+BEGIN_SRC emacs-lisp :tangle yes
     (setq auto-revert-verbose nil)
     (setq global-auto-revert-non-file-buffers t)
     (setq default-input-method 'russian-computer)
     (setq delete-by-moving-to-trash t);; Move files to trash when deleting
     (setq kill-whole-line t)
     (setq kmacro-ring-max 16)
     (setq mark-even-if-inactive t)
     (setq next-line-add-newlines nil)
     (setq sentence-end-double-space nil)
     (setq tab-always-indent t)
     (setq user-full-name (capitalize private/real-name))
     (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
     ;; don't let the cursor go into minibuffer prompt
     (setq minibuffer-prompt-properties
           '(read-only t point-entered minibuffer-avoid-prompt face minibuffer-prompt))

     (set-default 'indent-tabs-mode nil);; Never insert tabs
     (setq-default fill-column 200)
     (setq-default indicate-empty-lines t)
     (setq-default truncate-lines t);; Don't break lines for me, please

     (setq x-stretch-cursor t)
     (setq blink-matching-paren nil)
     (setq show-paren-delay 0)
     (setq mouse-wheel-scroll-amount '(1 ((shift) . 1)))
     (setq mouse-wheel-progressive-speed nil)
     (setq set-mark-command-repeat-pop t)

     (put 'transient-mark-mode 'permanent-local t)

     (setq whitespace-style '(indentation::space
                              space-after-tab
                              space-before-tab
                              trailing
                              lines-tail
                              tab-mark
                              face
                              tabs))
   #+END_SRC
** add hooks
   #+BEGIN_SRC emacs-lisp :tangle yes
     (add-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p)
     (add-hook 'text-mode-hook 'turn-on-auto-fill)
     (add-hook 'text-mode-hook 'text-mode-hook-identify)
   #+END_SRC
** hydras and keys
   #+BEGIN_SRC emacs-lisp :tangle yes
     (defhydra hydra-edit (:color blue)
       "
       Editing                         Kill/yank                 Buffers
       -------------------------------------------------------------------------------------
       _0_ compact spaces              _y_ank to register        _`_ redraw display
       just _o_ne space between        _p_ut from register       create _S_cratch
       _2_ duplicate + comment         _f_ilename -> clipboard   _d_iff buffer <-> file
       _/_ make comment box            _k_ yank rectangle        re_n_ame buffer+file
       _SPC_ untabify                  append next _K_ill        query/replace rege_x_p
       _TAB_ tabify                    _a_ppend cited region     _=_ edit region indirect
       delete trailing _w_hitespaces
       _s_ort lines
       keep _u_nique lines
       _4_ snakehump TAP

       Custom:
       _i_nsert current date+time
       _t_ranslate TAP with Google
       _T_ranslate query with Google
       "
       ("0" custom/compact-spaces-in-region)
       ("o" just-one-space)
       ("2" crux-duplicate-and-comment-current-line-or-region)
       ("/" comment-box)
       ("SPC" untabify)
       ("TAB" tabify)
       ("w" delete-trailing-whitespace)
       ("s" sort-lines)
       ("u" delete-duplicate-lines)
       ("4" snakehump-next-at-point)
       ("y" copy-to-register)
       ("p" insert-register)
       ("f" custom/copy-file-name-to-clipboard)
       ("k" custom/kill-save-rectangle)
       ("K" append-next-kill)
       ("a" custom/append-cited-region)
       ("`" redraw-display)
       ("S" scratch)
       ("d" diff-buffer-with-file)
       ("n" crux-rename-file-and-buffer)
       ("x" query-replace-regexp)
       ("=" edit-indirect-region)
       ("i" custom/insert-current-date-time)
       ("t" google-translate-at-point)
       ("T" google-translate-query-translate)
       ("q" nil "cancel"))
     (global-set-key (kbd "C-z") 'hydra-edit/body)

     (defhydra hydra-toggle (:color blue)
       "
       TOGGLE: de_b_ug on error (%(format \"%S\" debug-on-error))
       _d_ / _D_ toggle drag-stuff mode on/off (%(format \"%S\" drag-stuff-mode))
       _w_hitespace mode
       "
       ("b" toggle-debug-on-error "debug on error")
       ("w" whitespace-mode "whitespace mode")
       ("W" global-whitespace-mode "*global* whitespace mode")
       ("b" subword-mode)
       ("v" view-mode)
       ("d" turn-on-drag-stuff-mode "enable drag-stuff mode")
       ("D" turn-off-drag-stuff-mode "disable drag-stuff mode")
       ("h" highlight-sexp-mode "toggle highlight-sexp mode")
       ("q" toggle-debug-on-quit "toggle debug-on-quit mode")
       ("p" toggle-projectile-global-mode "toggle projectile-global-mode"))
     (global-set-key (kbd "<f11>") 'hydra-toggle/body)


     (global-set-key (kbd "M-g") 'goto-line) ;;TODO: bind goto-char
     (global-set-key (kbd "M-\"") 'eval-region)
     (global-set-key (kbd "C-x f") 'find-file) ; I never use set-fill-column and I hate hitting it by accident.
     (global-set-key (kbd "M-SPC") 'cycle-spacing) ;; TODO: maybe place into some hydra
   #+END_SRC
** try
*** unicode and indentation
    #+BEGIN_SRC emacs-lisp :tangle no
      (defmacro my/insert-unicode (unicode-name)
        `(lambda () (interactive)
           (insert-char (cdr (assoc-string ,unicode-name (ucs-names))))))
      (bind-key "C-x 8 s" (my/insert-unicode "ZERO WIDTH SPACE"))
      (bind-key "C-x 8 S" (my/insert-unicode "SNOWMAN"))

      (defun sanityinc/kill-back-to-indentation ()
        "Kill from point back to the first non-whitespace character on the line."
        (interactive)
        (let ((prev-pos (point)))
          (back-to-indentation)
          (kill-region (point) prev-pos)))

      (bind-key "C-M-<backspace>" 'sanityinc/kill-back-to-indentation)
    #+END_SRC
*** narrow and widen
    #+BEGIN_SRC emacs-lisp :tangle no
      (defun narrow-or-widen-dwim (p)
        "Widen if buffer is narrowed, narrow-dwim otherwise.
      Dwim means: region, org-src-block, org-subtree, or defun,
      whichever applies first. Narrowing to org-src-block actually
      calls `org-edit-src-code'.

      With prefix P, don't widen, just narrow even if buffer is
      already narrowed."
        (interactive "P")
        (declare (interactive-only))
        (cond ((and (buffer-narrowed-p) (not p)) (widen))
              ((region-active-p)
               (narrow-to-region (region-beginning) (region-end)))
              ((derived-mode-p 'org-mode)
               ;; `org-edit-src-code' is not a real narrowing
               ;; command. Remove this first conditional if you
               ;; don't want it.
               (cond ((ignore-errors (org-edit-src-code))
                      (delete-other-windows))
                     ((ignore-errors (org-narrow-to-block) t))
                     (t (org-narrow-to-subtree))))
              ((derived-mode-p 'latex-mode)
               (LaTeX-narrow-to-environment))
              (t (narrow-to-defun))))

      (bind-key "n" 'narrow-or-widen-dwim endless/toggle-map)
      ;; This line actually replaces Emacs' entire narrowing
      ;; keymap, that's how much I like this command. Only copy it
      ;; if that's what you want.
      (bind-key "n" 'narrow-or-widen-dwim ctl-x-map)
      (eval-after-load 'latex
        '(bind-key "\C-xn" nil LaTeX-mode-map))
    #+END_SRC
**** TODO consolidate all narrow/widen functionality
*** fix spelling
    credits to amalabarba
    #+BEGIN_SRC emacs-lisp :tangle yes
      (bind-key "\C-i" 'crux-ispell-word-then-abbrev ctl-x-map)

      (setq save-abbrevs 'silently)
      (setq-default abbrev-mode t)
    #+END_SRC
*** fill/unfill paragraph
    #+BEGIN_SRC emacs-lisp :tangle no
      (defun endless/fill-or-unfill ()
        "Like `fill-paragraph', but unfill if used twice."
        (interactive)
        (let ((fill-column
               (if (eq last-command 'endless/fill-or-unfill)
                   (progn (setq this-command nil)
                          (point-max))
                 fill-column)))
          (call-interactively #'fill-paragraph)))

      (global-set-key [remap fill-paragraph]
                      #'endless/fill-or-unfill)
    #+END_SRC
* completion
** snippets
*** yasnippet
**** definitions
     #+BEGIN_SRC emacs-lisp :tangle yes
       (define-namespace custom/

       ;; Inter-field navigation
       (defun yas-goto-end-of-active-field ()
         (interactive)
         (let* ((snippet (car (yas--snippets-at-point)))
                (position (yas--field-end (yas--snippet-active-field snippet))))
           (if (= (point) position)
               (move-end-of-line)
             (goto-char position))))

       (defun yas-goto-start-of-active-field ()
         (interactive)
         (let* ((snippet (car (yas--snippets-at-point)))
                (position (yas--field-start (yas--snippet-active-field snippet))))
           (if (= (point) position)
               (move-beginning-of-line)
             (goto-char position))))

       (defun do-yas-expand ()
         (let ((yas/fallback-behavior 'return-nil))
           (yas/expand)))

       (defun tab-indent-or-complete ()
         (interactive)
         (if (minibufferp)
             (minibuffer-complete)
           (if (or (not yas/minor-mode)
                   (null (custom/do-yas-expand)))
               (if (check-expansion)
                   (company-complete-common)
                 (indent-for-tab-command)))))

       )
     #+END_SRC
**** setup
     #+BEGIN_SRC emacs-lisp :tangle yes
       (req-package yasnippet
         :delight yas-minor-mode
         :mode (("yasnippet/snippets" . snippet-mode)
                ("\\.yasnippet$" . snippet-mode))
         :config
         ;; hook for automatic reloading of changed snippets
         (defun custom/update-yasnippets-on-save ()
           (when (string-match "/resources/yasnippet" buffer-file-name)
             (yas-load-directory (at-config-basedir "resources/"))))
         (setq yas-snippet-dirs nil)
         (push yas-installed-snippets-dir yas-snippet-dirs)
         (push (at-config-basedir "resources/yasnippet/") yas-snippet-dirs)
         (push (at-config-basedir "resources/yasnippet-private/") yas-snippet-dirs)
         (setq yas-key-syntaxes '("w" "w_" "w_." "^ " "w_.()" yas-try-key-from-whitespace))
         (setq yas-expand-only-for-last-commands '(self-insert-command))
         (setq yas-prompt-functions
               '(yas-completing-prompt
                 yas-x-prompt
                 yas-no-prompt))
         ;; Wrap around region
         (setq yas-wrap-around-region t)
         (yas-global-mode 1)
         (add-hook 'hippie-expand-try-functions-list 'yas-hippie-try-expand)
         (add-hook 'after-save-hook 'custom/update-yasnippets-on-save)
         ;; unsetting Tab, removing ALL translations
         (with-unmanaged-errors
          (unbind-key [(tab)] yas-minor-mode-map)
          (unbind-key [(tab)] yas-keymap)
          (unbind-key [(shift tab)] yas-keymap)
          (unbind-key [backtab] yas-keymap)
          (unbind-key (kbd "<tab>") yas-minor-mode-map)
          (unbind-key (kbd "TAB") yas-minor-mode-map)
          (unbind-key (kbd "TAB") yas-keymap))
         (bind-key (kbd "<return>") 'yas-exit-all-snippets yas-keymap)
         (bind-key (kbd "C-e") 'custom/yas-goto-end-of-active-field yas-keymap)
         (bind-key (kbd "C-a") 'custom/yas-goto-start-of-active-field yas-keymap)
         (bind-key (kbd "C-n") 'yas-next-field-or-maybe-expand yas-keymap)
         (bind-key (kbd "C-p") 'yas-prev-field yas-keymap))
     #+END_SRC
**** additional packages
     #+BEGIN_SRC emacs-lisp :tangle yes
       (req-package auto-yasnippet :require yasnippet)
     #+END_SRC
**** BACKLOG try https://github.com/abrochard/org-sync-snippets
*** yankpad
    #+BEGIN_SRC emacs-lisp :tangle yes
      (req-package yankpad
        :config
        (setq yankpad-file (at-org-kb-dir "/yankpad.org")))
    #+END_SRC
**** BACKLOG hydra for yankpad operation
     :PROPERTIES:
     :ID:       07449205-a322-4ba5-9427-6b519c911abe
     :END:
***** BACKLOG bind special tags insertion, see https://kungsgeten.github.io/yankpad13.html + https://github.com/Kungsgeten/yankpad/blob/master/README.org
*** hydra
    #+BEGIN_SRC emacs-lisp :tangle yes
      (defhydra hydra-yasnippet (:color teal)
        "
        _c_reate auto snippet
        _e_xpand auto snippet
        _p_ersist auto snippet
        _v_isit snippets file
        _i_nsert snippet
        "
        ("c" aya-create)
        ("e" aya-expand)
        ("p" aya-persist-snippet)
        ("v" yas-visit-snippet-file)
        ("i" yas-insert-snippet)
        ;;TODO: maybe bind 'yankpad-map
        ;;TODO: bind 'yankpad-expand
        ;; bind special tags insertion, see https://kungsgeten.github.io/yankpad13.html + https://github.com/Kungsgeten/yankpad/blob/master/README.org
        ("q" nil))
      (global-set-key (kbd "<f5>") 'hydra-yasnippet/body)
    #+END_SRC
** company
   #+BEGIN_SRC emacs-lisp :tangle yes
     (req-package company
       :init
       :config
       (setq company-idle-delay t)
       (setq company-tooltip-align-annotations t)
       (setq company-show-numbers t)
       (global-company-mode)
       (bind-key (kbd "\C-n") 'company-select-next company-active-map)
       (bind-key (kbd "\C-p") 'company-select-previous company-active-map)
       (bind-key (kbd "\C-d") 'company-show-doc-buffer company-active-map)
       (bind-key (kbd "M-.") 'company-show-location company-active-map))

     (req-package company-flx
       :require company
       :config
       (company-flx-mode +1))

     (req-package company-quickhelp
       :require company)

     (req-package company-statistics
       :require company
       :config
       (company-statistics-mode))
   #+END_SRC
*** try 3rdparty packages
**** https://github.com/nsf/gocode
**** https://github.com/sebastiw/distel-completion
**** https://github.com/iquiw/company-ghc
**** https://github.com/iquiw/company-cabal
**** https://github.com/iquiw/company-restclient
**** https://github.com/Valloric/ycmd + https://github.com/abingham/emacs-ycmd
** hippie-expand
   #+BEGIN_SRC emacs-lisp :tangle yes
     (req-package hippie-exp
       :config
       (setq hippie-expand-try-functions-list
             '(yas-hippie-try-expand
               try-expand-all-abbrevs
               try-complete-file-name-partially
               try-complete-file-name
               try-expand-dabbrev
               try-expand-dabbrev-from-kill
               try-expand-dabbrev-all-buffers
               try-expand-list
               try-expand-line
               try-complete-lisp-symbol-partially
               try-complete-lisp-symbol))
       (global-set-key (kbd "C-S-<iso-lefttab>") 'hippie-expand))
   #+END_SRC
* programming
** common
*** flake8 utils
    #+BEGIN_SRC emacs-lisp :tangle no
      (define-namespace custom/

      (defvar flake8-conf-alist nil
        "Alist of flake8 configuration files for various projects")

      ;;FIXME: try to use flycheck's builtin functionality
      (defun find-project-flake8-config ()
        (let* ((project-root (file-truename (custom/project-root default-directory)))
               (config-path (cdr (assoc (file-name-base (directory-file-name project-root)) flake8-conf-alist))))
          (if (file-name-absolute-p config-path)
              (when (file-exists-p config-path)
                config-path)
            (concat project-root config-path))))

      (defun project-root (file-path)
        "Guess the project root of the given FILE-PATH."
        (or (vc-git-root file-path)
            (vc-svn-root file-path)
            (vc-hg-root file-path)
            file-path))

      )
    #+END_SRC
**** BACKLOG review flake8 known problems and OBV search for solutions
*** flycheck
    #+BEGIN_SRC emacs-lisp :tangle yes
      (req-package flycheck
        :require dash pkg-info let-alist seq
        :config
        (set-face-attribute 'flycheck-warning nil
                         :foreground "yellow"
                          :background "red")
        ;; TODO: try to setup some of http://www.flycheck.org/en/latest/languages.html
        (add-hook 'flycheck-mode-hook 'flycheck-color-mode-line-mode)
        (setq flycheck-check-syntax-automatically '(idle-change)))

      (req-package flycheck-color-mode-line :require flycheck dash)
    #+END_SRC
**** BACKLOG review concrete checkers functionality and usage
*** gdb
    #+BEGIN_SRC emacs-lisp :tangle yes
      (req-package gud
        :init
        (req-package gdb-mi)
        :config
        (setq gdb-many-windows t)
        (setq gdb-show-main t)
        (setq gdb-use-separate-io-buffer t)
        (setq gud-chdir-before-run nil)
        (setq gud-tooltip-mode t))
    #+END_SRC
**** BACKLOG [#B] check setup
*** docker
    #+BEGIN_SRC emacs-lisp :tangle yes
      (req-package docker
        :require dash docker-tramp magit-popup s tablist)
      (req-package docker-tramp)
      ;; TODO: think of some automation of opening files with docker (and other TRAMP backends as well)
    #+END_SRC
*** eldoc
    #+BEGIN_SRC emacs-lisp :tangle yes
      (req-package c-eldoc)
      (req-package eldoc-eval)

      (req-package eldoc
        :defer t
        :init
        (setq eldoc-idle-delay 0) ;; eldoc mode for showing function calls in mode line
        (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
        (add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
        (add-hook 'ielm-mode-hook 'turn-on-eldoc-mode)
        (add-hook 'c-mode-hook 'c-turn-on-eldoc-mode)
        (add-hook 'c++-mode-hook 'c-turn-on-eldoc-mode)
        (add-hook 'css-mode-hook 'turn-on-css-eldoc))

      (req-package css-eldoc
        :ensure t
        :config
        (turn-on-css-eldoc))
    #+END_SRC
**** try
     #+BEGIN_SRC emacs-lisp :tangle no
       (req-package "eldoc"
         :delight eldoc-mode
         :commands turn-on-eldoc-mode
         :defer t
         :init
         (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
         (add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
         (add-hook 'ielm-mode-hook 'turn-on-eldoc-mode))
     #+END_SRC
*** print path within json
    #+BEGIN_SRC emacs-lisp :tangle yes
      (defun custom/js2-print-json-path ()
        "Print the path to the JSON value under point, and save it in the kill ring."
        (interactive)
        (let (next-node node-type rlt key-name)
          (setq next-node (js2-node-at-point))
          ;; scanning from AST, no way to optimise `js2-node-at-point'
          (while (and next-node (arrayp next-node) (> (length next-node) 5))
            (setq node-type (aref next-node 0))
            (cond
             ;; json property node
             ((eq node-type 'cl-struct-js2-object-prop-node)
              (setq key-name (js2-prop-node-name (js2-object-prop-node-left next-node)))
              (if rlt (setq rlt (concat "." key-name rlt))
                (setq rlt (concat "." key-name))))
             ;; array node
             ((or (eq node-type 'cl-struct-js2-array-node)
                  (eq node-type 'cl-struct-js2-infix-node))
              (if rlt (setq rlt (concat "[0]" rlt))
                (setq rlt "[0]")))
             (t)) ; do nothing
            ;; get parent node
            (setq next-node (aref next-node 5)))
          ;; clean final result
          (setq rlt (replace-regexp-in-string "^\\." "" rlt))
          (when rlt
            (kill-new rlt)
            (message "%s => kill-ring" rlt))
          rlt))
    #+END_SRC
*** common hooks
    #+BEGIN_SRC emacs-lisp :tangle yes
      (defun common-hooks/newline-hook ()
        (local-set-key (kbd "C-m") 'newline-and-indent)
        (local-set-key (kbd "<return>") 'newline-and-indent))

      ;; show FIXME/TODO/BUG keywords
      (defun common-hooks/prog-helpers ()
          ;; highlight additional keywords
          (font-lock-add-keywords nil '(("\\<\\(FIXME\\|FIX_ME\\|FIX ME\\):" 1 font-lock-warning-face t)))
          (font-lock-add-keywords nil '(("\\<\\(BUG\\|BUGS\\):" 1 font-lock-warning-face t)))
          (font-lock-add-keywords nil '(("\\<\\(TODO\\|TO DO\\NOTE\\|TBD\\):" 1 font-lock-warning-face t)))
          (font-lock-add-keywords nil '(("\\<\\(DONE\\|HACK\\):" 1 font-lock-doc-face t)))
          ;; highlight too long lines
          (font-lock-add-keywords nil '(("^[^\n]\\{120\\}\\(.*\\)$" 1 font-lock-warning-face t))))
    #+END_SRC
*** handy packages
    #+BEGIN_SRC emacs-lisp :tangle yes
      (req-package compile)
      (req-package gtags)
      (req-package hide-comnt)
      (req-package regex-tool)
    #+END_SRC
*** related major modes
    #+BEGIN_SRC emacs-lisp :tangle yes
      (add-to-list 'auto-mode-alist '("\\.spec$" . rpm-spec-mode))
      (add-to-list 'auto-mode-alist '("\\.po$\\|\\.po\\." . po-mode))
      (add-to-list 'auto-mode-alist '("\\.log$" . auto-revert-mode))
      (add-to-list 'auto-mode-alist '("\\.gdb$" . gdb-script-mode))
      (add-to-list 'auto-mode-alist '("diff" . diff-mode))
      (add-to-list 'auto-mode-alist '("\\.scss$" . css-mode))
      (add-to-list 'auto-mode-alist '("[Mm]akefile" . makefile-mode))
    #+END_SRC
** vcs
*** git
    #+BEGIN_SRC emacs-lisp :tangle yes
      (req-package magit
        :require async dash with-editor git-commit magit-popup
        :config
        (bind-key "E" 'magit-rebase-interactive magit-status-mode-map)
        (setq magit-blame-heading-format "%H %-20a %C %s")
        (setq magit-diff-refine-hunk t)
        (setq magit-display-buffer-function 'magit-display-buffer-fullframe-status-topleft-v1)
        (add-to-list 'auto-mode-alist '("COMMIT_EDITMSG" . conf-javaprop-mode))
        (add-to-list 'auto-mode-alist '("COMMIT" . git-commit-mode)))

      (req-package magit-filenotify
        :require magit
        :config
        (add-hook 'magit-status-mode-hook 'magit-filenotify-mode))

      (req-package git-gutter
        :require cl-lib
        :config
        (setq git-gutter:modified-sign "?")
        (set-face-attribute 'git-gutter:modified nil :foreground "yellow" :inverse-video nil)
        (set-face-attribute 'git-gutter:added nil :inverse-video nil)
        (set-face-attribute 'git-gutter:deleted nil :inverse-video nil)
        (set-face-attribute 'git-gutter:unchanged nil :inverse-video nil)
        (global-git-gutter-mode +1))

      (req-package git-gutter+)

      (req-package git-timemachine)
      (req-package gitignore-mode)
    #+END_SRC
*** smerge mode
    #+BEGIN_SRC emacs-lisp :tangle yes
      (req-package smerge-mode
        :config
        (defun sm-try-smerge ()
          (save-excursion
            (goto-char (point-min))
            (when (re-search-forward "^<<<<<<< " nil t)
              (smerge-mode 1))))
        (add-hook 'find-file-hooks 'sm-try-smerge t))
    #+END_SRC
*** common
    #+BEGIN_SRC emacs-lisp :tangle yes
      ;; FIXME code duplication, think of finding the widely used util or something similar
      (autoload 'vc-git-root "vc-git")
      (autoload 'vc-svn-root "vc-svn")
      (autoload 'vc-hg-root "vc-hg")

      (remove-hook 'find-file-hooks 'vc-find-file-hook)
    #+END_SRC
*** hydra
    #+BEGIN_SRC emacs-lisp :tangle yes
      (defhydra hydra-vcs ()
        "
        PROJECT: %(projectile-project-root)

        Magit               Additional
        -----------------------------------------
        _s_: status         _k_ smerge / goto prev conflict
        _l_: log            _j_ smerge / goto next conflict
        _f_: file log       _h_ git-gutter / prev-hunk
        _r_: reflog         _l_ git-gutter / next-hunk
        _w_: diff worktree
        _t_: time machine
        _b_: blame
        _c_: checkout
        _B_: branch mgr
        "
        ("s" magit-status :color blue)
        ("f" magit-log-buffer-file :color blue)
        ("c" magit-checkout :color blue)
        ("w" magit-diff-working-tree :color blue)
        ("r" magit-reflog :color blue)
        ("b" magit-blame :color blue)
        ("B" magit-branch-manager :color blue)
        ("l" magit-log :color blue)
        ("t" git-timemachine :color blue)
        ("k" smerge-prev "previous conflict")
        ("j" smerge-next "next conflict")
        ("h" git-gutter:previous-hunk)
        ("l" git-gutter:next-hunk))
      (global-set-key (kbd "C-'") 'hydra-vcs/body)
    #+END_SRC
** languages
*** common
    #+BEGIN_SRC emacs-lisp :tangle yes
      (req-package info-look :force t)
    #+END_SRC
*** elisp
**** setup
     #+BEGIN_SRC emacs-lisp :tangle yes
       (req-package el-spice :require thingatpt+)
       (req-package edebug-x)

       (req-package elisp-slime-nav
         :require cl-lib
         :config
         (dolist (hook '(emacs-lisp-mode-hook ielm-mode-hook))
           (add-hook hook 'elisp-slime-nav-mode)))

       (setq print-circle t)
       (setq print-gensym t)
       (setq eval-expression-print-length nil)
       (setq eval-expression-print-level nil)

       (defun custom/elisp-mode-hook ()
         (auto-fill-mode 1)
         (setq indent-tabs-mode nil)
         (setq comment-start ";;")
         (turn-on-eldoc-mode))

       (req-package lisp-mode
         :init
         (req-package company-elisp)
         :config
         (add-hook 'emacs-lisp-mode-hook 'custom/elisp-mode-hook)
         (add-hook 'emacs-lisp-mode-hook 'common-hooks/prog-helpers)
         (add-hook 'emacs-lisp-mode-hook 'common-hooks/newline-hook)
         )

       (add-hook 'eval-expression-minibuffer-setup-hook #'eldoc-mode)       (add-hook 'eval-expression-minibuffer-setup-hook #'eldoc-mode)
       (dolist (mode '(paredit-mode smartparens-mode))
         (when (fboundp mode)
           (add-hook 'eval-expression-minibuffer-setup-hook mode)))
     #+END_SRC
**** try
***** 1
      #+BEGIN_SRC emacs-lisp :tangle no
        ;; C-c C-v l : elint current buffer in clean environment.
        ;; C-c C-v L : elint current buffer by multiple emacs binaries.
        ;;             See `erefactor-lint-emacsen'
        ;; C-c C-v r : Rename symbol in current buffer.
        ;;             Resolve `let' binding as long as i can.
        ;; C-c C-v R : Rename symbol in requiring modules and current buffer.
        ;; C-c C-v h : Highlight current symbol in this buffer
        ;;             and suppress `erefacthr-highlight-mode'.
        ;; C-c C-v d : Dehighlight all by above command.
        ;; C-c C-v c : Switch prefix bunch of symbols.
        ;;             ex: '(hoge-var hoge-func) -> '(foo-var foo-func)
        ;; C-c C-v ? : Display flymake elint warnings/errors
      #+END_SRC
*** javascript
    #+BEGIN_SRC emacs-lisp :tangle no
      (req-package js2-mode
        :require cl-lib
        :mode ("\\.js$" . js2-mode)
        :init
        (req-package js2-imenu-extras)
        :config
        (js2-imenu-extras-setup)
        (setq js2-use-font-lock-faces t)
        (setq js2-allow-keywords-as-property-names nil)
        (setq js2-bounce-indent-flag nil)
        (setq js2-cleanup-whitespace t)
        (setq js2-enter-indents-newline nil)
        (setq js2-highlight-level 3)
        (setq js2-indent-on-enter-key nil)
        (setq js2-skip-preprocessor-directives t)
        (setq js2-basic-offset 4)
        (setq js2-bounce-indent-p t)
        ;; Special improvements using the mooz fork
        ;; https://github.com/mooz/js2-mode
        (setq js2-consistent-level-indent-inner-bracket-p t)
        (setq js2-use-ast-for-indentation-p t)
        (add-to-list 'interpreter-mode-alist (cons "node" 'js2-mode))
        (setq-default js2-global-externs
                      '("module" "require" "jQuery" "$" "_" "buster"
                        "sinon" "assert" "refute" "setTimeout" "clearTimeout"
                        "setInterval" "clearInterval" "location" "__dirname" "console" "JSON"))
        (setq-default js2-idle-timer-delay 0.1)
        (setq-default js2-mirror-mode t)
        (setq-default js2-auto-indent-p t)
        (setq-default js2-concat-multiline-strings 'eol)
        ;; After js2 has parsed a js file, we look for jslint globals decl comment ("/* global Fred, _, Harry */") and
        ;; add any symbols to a buffer-local var of acceptable global vars
        ;; Note that we also support the "symbol: true" way of specifying names via a hack (remove any ":true"
        ;; to make it look like a plain decl, and any ':false' are left behind so they'll effectively be ignored as
        ;; you can;t have a symbol called "someName:false"
        (add-hook 'js2-post-parse-callbacks
                  (lambda ()
                    (when (> (buffer-size) 0)
                      (let ((btext (replace-regexp-in-string
                                    ": *true" " "
                                    (replace-regexp-in-string "[\n\t ]+" " " (buffer-substring-no-properties 1 (buffer-size)) t t))))
                        (mapc (apply-partially 'add-to-list 'js2-additional-externs)
                              (split-string
                               (if (string-match "/\\* *global *\\(.*?\\) *\\*/" btext) (match-string-no-properties 1 btext) "")
                               " *, *" t))
                        ))))
        (add-hook 'js2-mode-hook '(lambda ()
                                    (setq flycheck-checker 'javascript-jshint)
                                    (tern-mode t)))
        ;;TODO: maybe make hydra
        (bind-key "C-x C-e" 'js-send-last-sexp js2-mode-map)
        (bind-key "C-M-x" 'js-send-last-sexp-and-go js2-mode-map)
        (bind-key "C-c b" 'js-send-buffer js2-mode-map)
        (bind-key "C-c C-b" 'js-send-buffer-and-go js2-mode-map)
        (bind-key "C-c l" 'js-load-file-and-go js2-mode-map))

      ;; TODO: play with js2-refactor
      (req-package js2-refactor
        :require js2-mode s multiple-cursors dash s yasnippet
        :config
        (js2r-add-keybindings-with-prefix "C-c C-j"))

      (req-package tern
        :require json cl-lib
        :commands tern-mode
        :config
        (req-package company-tern))

      (req-package xref-js2
        :require js2-mode
        :config
        (bind-key "M-." nil js2-mode-map)
        (add-hook 'js2-mode-hook
                  (lambda ()
                    (add-hook 'xref-backend-functions #'xref-js2-xref-backend nil t))))

      (setenv "CLASSPATH"
              (concat
               "/usr/share/rhino-1.6/lib/js.jar:"
               (getenv "CLASSPATH")))
    #+END_SRC
*** lisp
**** definitions
     This code represents almost original slime-helper functions definitions (except hooks, of course).
     The reason to not use slime-helper itself is that it provides its own slime setup thus
     omitting my own one completely.
     #+BEGIN_SRC emacs-lisp :tangle yes
       (unless (boundp 'quicklisp-slime-helper-dist)
         (setq quicklisp-slime-helper-dist "quicklisp"))

       (setq quicklisp-slime-helper-base (expand-file-name "~/quicklisp/"))

       (defun quicklisp-slime-helper-file-contents (file)
         (with-temp-buffer
           (insert-file-contents file)
           (buffer-string)))

       (defun quicklisp-slime-helper-system-directory (system)
         (let ((location-file (concat quicklisp-slime-helper-base
                                      "dists/"
                                      quicklisp-slime-helper-dist
                                      "/installed/systems/"
                                      system
                                      ".txt")))
           (when (file-exists-p location-file)
             (let ((relative (quicklisp-slime-helper-file-contents location-file)))
               (file-name-directory (concat quicklisp-slime-helper-base
                                            relative))))))

       (defun quicklisp-slime-helper-slime-directory ()
         (quicklisp-slime-helper-system-directory "swank"))

       (defun custom/lisp-mode-hook ()
         (auto-fill-mode 1)
         (setq indent-tabs-mode t)
         (setq tab-width 2)
         (turn-on-eldoc-mode))

       (defun custom/slime-hook ()
         (slime-mode t)
         (set (make-local-variable 'slime-lisp-implementations)
              (list (assoc 'sbcl slime-lisp-implementations))))

       (defadvice slime-documentation-lookup
           (around change-browse-url-browser-function activate)
         "Use w3m for slime documentation lookup."
         (let ((browse-url-browser-function 'w3m-browse-url))
           ad-do-it))
     #+END_SRC
**** slime setup
     Here follow slime customizations using version from quicklisp (which is slime-helper designed for)
     Let clause is borrowed from slime-helper source and its contents are superseded by my own setup.
     #+BEGIN_SRC emacs-lisp :tangle yes
       (let* ((quicklisp-slime-directory (quicklisp-slime-helper-slime-directory)))
         (add-to-list 'load-path quicklisp-slime-directory)
         (require 'cl-lib)
         (require 'slime-autoloads)
         (setq slime-backend (expand-file-name "swank-loader.lisp"
                                               quicklisp-slime-directory))
         (setq slime-path quicklisp-slime-directory)
         (slime-setup
          '(slime-fancy-inspector slime-fancy-trace slime-fontifying-fu
            slime-hyperdoc slime-package-fu slime-references slime-trace-dialog
            slime-xref-browser slime-asdf slime-autodoc slime-banner slime-fancy
            slime-fuzzy slime-repl slime-sbcl-exts))
         (add-to-list 'slime-lisp-implementations '(sbcl ("sbcl")  :coding-system utf-8-unix))
         (setq slime-complete-symbol*-fancy t)
         (setq slime-complete-symbol-function 'slime-fuzzy-complete-symbol)
         (setq slime-net-coding-system 'utf-8-unix)
         (setq slime-use-autodoc-mode nil)
         (add-hook 'lisp-mode-hook 'custom/slime-hook)
         (add-hook 'inferior-lisp-mode-hook (lambda () (inferior-slime-mode t)))
         (add-hook 'slime-mode-hook (lambda () (slime-autodoc-mode t)))
         (add-hook 'lisp-mode-hook 'custom/lisp-mode-hook)
         (add-hook 'lisp-mode-hook 'common-hooks/newline-hook)
         (add-hook 'lisp-mode-hook 'common-hooks/prog-helpers))

       (req-package slime-company
         :force t
         :require slime company)
     #+END_SRC
***** BACKLOG investigate and fix the issue with not found slime extensions within remote lisp image
      example: Can't locate module: SWANK-IO-PACKAGE::SWANK-SBCL-EXTS
**** additional setup
     #+BEGIN_SRC emacs-lisp :tangle yes
       (setq custom/hyperspec-root "~/help/HyperSpec/")

       (req-package inf-lisp
         :config
         (setq inferior-lisp-program "sbcl"))
       (req-package common-lisp-snippets :require yasnippet)

       ;; lookup information in hyperspec
       (info-lookup-add-help
        :mode 'lisp-mode
        :regexp "[^][()'\" \t\n]+"
        :ignore-case t
        :doc-spec '(("(ansicl)Symbol Index" nil nil nil)))

       (defhydra hydra-slime ()
         "
       Slime
       -----------
       _s_ run
       _l_ selector
       _;_ insert balanced comments
       _M-;_ remove balanced comments
       _h_ documentation lookup
       "
         ("s" slime "run slime" :color blue)
         ("l" slime-selector "slime selector" :color blue)
         (";" slime-insert-balanced-comments)
         ("M-;" slime-remove-balanced-comments)
         ("h" slime-documentation-lookup)
         ("q" nil "cancel"))
       (global-set-key (kbd "M-p") 'hydra-slime/body)
     #+END_SRC
*** haskell
    #+BEGIN_SRC emacs-lisp :tangle no
      (req-package haskell-mode
        :require cl-lib
        :mode (("\\.hs\\'" . haskell-mode)
               ("\\.hsc$" . haskell-mode)
               ("\\.[hg]s$"  . haskell-mode)
               ("\\.hi$"     . haskell-mode)
               ("\\.l[hg]s$" . literate-haskell-mode))
        :init
        (req-package haskell-indent)
        (req-package haskell-align-imports)
        (req-package haskell-navigate-imports)
        (req-package haskell-sort-imports)
        (req-package inf-haskell)
        (req-package haskell-ghci)
        (req-package company-ghc)
        (req-package company-ghci)
        :config
        (setq inferior-haskell-wait-and-jump t)
        (setf haskell-process-path-ghci "ghci-ng")
        (setf haskell-process-type 'cabal-repl)
        (setf haskell-process-args-cabal-repl '("--ghc-option=-ferror-spans" "--with-ghc=ghci-ng"))
        (bind-key "C-," 'haskell-move-nested-left haskell-mode-map)
        (bind-key "C-." 'haskell-move-nested-right haskell-mode-map)
        (bind-key "<tab>" 'haskell-indent-cycle haskell-mode-map)
        (bind-key "C-c h" 'haskell-hoogle haskell-mode-map)
        (bind-key "C-c C-h" 'haskell-hayoo haskell-mode-map)
        (add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)
        (add-hook 'haskell-mode-hook 'turn-on-haskell-indent)
        (add-hook 'haskell-mode-hook 'turn-on-eldoc-mode)
        (add-hook 'haskell-mode-hook 'common-hooks/newline-hook)
        (add-hook 'haskell-mode-hook 'common-hooks/prog-helpers)
        (add-hook 'haskell-mode-hook 'turn-on-haskell-ghci)
        (add-hook 'haskell-mode-hook #'interactive-haskell-mode)
        (add-hook 'haskell-mode-hook #'haskell-simple-indent-mode))

      (req-package hindent
        :commands hindent-mode
        :init
        (add-hook 'haskell-mode-hook #'hindent-mode))

      (req-package shm
        :commands (structured-haskell-mode structured-haskell-repl-mode)
        :init
        (add-hook 'haskell-mode-hook 'structured-haskell-mode)
        (add-hook 'haskell-interactive-mode-hook 'structured-haskell-repl-mode))

      ;;TODO: setup flycheck
      ;;TODO: bind in haskell-mode-map: haskell-{goto-imports, {return-from, navigate, sort, align}-imports}
      ;;TODO: investigate the difference between builtin and el-get versions of haskell-mode
    #+END_SRC
*** python
**** linux traits
     #+BEGIN_SRC emacs-lisp :tangle (if (eq system-type 'gnu/linux) "yes" "no")
       (setq custom/python-libs-path "/usr/lib64/python2.7:")
     #+END_SRC
**** darwin traits
     #+BEGIN_SRC emacs-lisp :tangle (if (eq system-type 'darwin) "yes" "no")
       (setq custom/python-libs-path "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7:")
     #+END_SRC
**** setup
     #+BEGIN_SRC emacs-lisp :tangle yes
       (req-package pep8)
       (req-package python-pep8)

       (req-package jedi-core
         :init
         (setq jedi:complete-on-dot t)
         (setq jedi:goto-definition-marker-ring-length 32)
         :config
         (add-hook 'python-mode-hook 'jedi:setup)
         ;; (add-hook 'python-mode-hook 'jedi:ac-setup)
         )

       (req-package company-jedi
         :require company jedi-core
         :config
         (add-to-list 'company-backends 'company-jedi))

       (req-package python-mode
         :require region-bindings-mode
         :config
         (defun custom/python-mode-hook ()
           (setq flycheck-checker 'python-flake8)
           (setq indent-tabs-mode nil)
           (setq tab-width 4)
           (setq imenu-create-index-function 'imenu-default-create-index-function)
           (auto-fill-mode 1)
           (flycheck-mode)
           (tooltip-mode -1)
           (highlight-indentation-mode -1)
           (add-function :before-until (local 'eldoc-documentation-function)
                         #'(lambda () "")))
         ;; Highlight the call to ipdb
         ;; src http://pedrokroger.com/2010/07/configuring-emacs-as-a-python-ide-2/
         (defun annotate-debugger-calls ()
           (highlight-lines-matching-regexp "import ipdb")
           (highlight-lines-matching-regexp "ipdb.set_trace()")
           (highlight-lines-matching-regexp "import wdb")
           (highlight-lines-matching-regexp "wdb.set_trace()"))
         (add-hook 'python-mode-hook 'custom/python-mode-hook)
         (add-hook 'python-mode-hook 'common-hooks/prog-helpers)
         (add-hook 'python-mode-hook 'common-hooks/newline-hook)
         (add-hook 'python-mode-hook 'yas/minor-mode-on)
         (add-hook 'python-mode-hook 'annotate-debugger-calls)
         (bind-key "M-." 'jedi:goto-definition python-mode-map)
         (bind-key "M-," 'jedi:goto-definition-pop-marker python-mode-map)
         (bind-key "C-c >" 'indent-tools-hydra/body python-mode-map))

       (req-package elpy
         :init
         (req-package py-autopep8)
         :config
         (elpy-enable)
         (when (executable-find "ipython")
           (elpy-use-ipython))
         (setq elpy-modules
               (delete 'elpy-module-highlight-indentation elpy-modules))
         (setq elpy-modules
               (delete 'elpy-module-flymake elpy-modules))
         (add-hook 'elpy-mode-hook 'flycheck-mode)
         (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save)
         (setq elpy-rpc-backend "jedi")
         (bind-key "M-," 'pop-tag-mark elpy-mode-map))

       (req-package pyvenv
         :require jedi-core
         :config
         (defalias 'workon 'pyvenv-workon)
         (add-hook 'pyvenv-post-activate-hooks 'jedi:stop-server)
         (add-hook 'pyvenv-post-deactivate-hooks 'jedi:stop-server))

       (req-package pip-requirements
         :mode ("requirements\\." . pip-requirements-mode))

       (req-package py-isort
         :config
         (add-hook 'before-save-hook 'py-isort-before-save)
         (setq py-isort-options '("-sl")))

       (defhydra hydra-python ()
         "
         ^Checks:^       ^Nav^
         ------------------------------------
         py_l_int        _p_ylookup at point
         pep_8_
         _m_ulti flake8
         "
         ("l" pylint)
         ("8" pep8)
         ("m" flake8-multi)
         ("p" pylookup-lookup-at-point)
         ("q" nil))
       (global-set-key (kbd "C-c C-p") 'hydra-python/body)

       (setq mumamo-background-colors nil)

       (setenv "PYTHONPATH"
               (concat
                custom/python-libs-path
                (mapconcat 'identity private/python-path-job-projects "")
                (getenv "PYTHONPATH")))
       (setenv "PYLINTRC"
               (at-config-basedir
                "contrib/.pylintrc"))
     #+END_SRC
*** cc
**** specialization for PostgreSQL development
     #+BEGIN_SRC emacs-lisp :tangle yes
       (defun pgsql-c-mode ()
         ;; sets up formatting for PostgreSQL C code
         (interactive)
         (c-mode)
         (setq-default tab-width 4)
         (c-set-style "bsd")             ; set c-basic-offset to 4, plus other stuff
         (c-set-offset 'case-label '+)   ; tweak case indent to match PG custom
         (setq fill-column 79)           ; matches what pgindent does
         (setq indent-tabs-mode t))      ; make sure we keep tabs when indenting
     #+END_SRC
**** packages
     #+BEGIN_SRC emacs-lisp :tangle yes
       (req-package cc-mode
         :require counsel-gtags
         :mode (("\\.ipp?$" . c++-mode)
                ("\\.h$" . c++-mode)
                ("CMakeLists\\.txt\\'" . cmake-mode)
                ("\\.cmake\\'" . cmake-mode)
                ("\\(postgres\\|pgsql\\).*\\.[ch]\\'" . pgsql-c-mode)
                ("\\(postgres\\|pgsql\\).*\\.cc\\'" . pgsql-c-mode))
         :config
         (bind-key "C-M-s" 'counsel-gtags-find-symbol c-mode-map)
         (bind-key "M-." 'counsel-gtags-dwim c-mode-map)
         (bind-key "M-r" 'counsel-gtags-find-reference c-mode-map)
         (bind-key "M-," 'counsel-gtags-go-backward c-mode-map)
         (bind-key "C-c u" 'counsel-gtags-update-tags c-mode-map)
         (bind-key "C-M-s" 'counsel-gtags-find-symbol c++-mode-map)
         (bind-key "M-." 'counsel-gtags-dwim c++-mode-map)
         (bind-key "M-r" 'counsel-gtags-find-reference c++-mode-map)
         (bind-key "M-," 'counsel-gtags-go-backward c++-mode-map)
         (bind-key "C-c u" 'counsel-gtags-update-tags c++-mode-map))

       (req-package company-c-headers)

       (req-package function-args
         :require swiper cc-mode
         :config
         (bind-key "C-c C-<tab>" 'moo-complete c-mode-map)
         (bind-key "C-c j" 'moo-jump-local c-mode-map)
         (bind-key "C-c C-<tab>" 'moo-complete c++-mode-map)
         (bind-key "C-c j" 'moo-jump-local c++-mode-map))

       (req-package rtags
         :require cc-mode
         :config
         (defun use-rtags (&optional useFileManager)
           (and (rtags-executable-find "rc")
                (cond ((not (gtags-get-rootpath)) t)
                      ((and (not (eq major-mode 'c++-mode))
                            (not (eq major-mode 'c-mode))) (rtags-has-filemanager))
                      (useFileManager (rtags-has-filemanager))
                      (t (rtags-is-indexed)))))
         (defun tags-find-symbol-at-point (&optional prefix)
           (interactive "P")
           (if (and (not (rtags-find-symbol-at-point prefix)) rtags-last-request-not-indexed)
               (gtags-find-tag)))
         (defun tags-find-references-at-point (&optional prefix)
           (interactive "P")
           (if (and (not (rtags-find-references-at-point prefix)) rtags-last-request-not-indexed)
               (gtags-find-rtag)))
         (defun tags-find-symbol ()
           (interactive)
           (call-interactively (if (use-rtags) 'rtags-find-symbol 'gtags-find-symbol)))
         (defun tags-find-references ()
           (interactive)
           (call-interactively (if (use-rtags) 'rtags-find-references 'gtags-find-rtag)))
         (defun tags-find-file ()
           (interactive)
           (call-interactively (if (use-rtags t) 'rtags-find-file 'gtags-find-file)))
         (setq rtags-completions-enabled t)
         (setq rtags-autostart-diagnostics t)
         (bind-key "M-." 'tags-find-symbol-at-point c-mode-base-map)
         (bind-key "M-," 'tags-find-references-at-point c-mode-base-map)
         (bind-key "M-;" 'tags-find-file c-mode-base-map)
         (bind-key "C-." 'tags-find-symbol c-mode-base-map)
         (bind-key "C-," 'tags-find-references c-mode-base-map)
         (bind-key "C-<" 'rtags-find-virtuals-at-point c-mode-base-map)
         (bind-key "M-." 'tags-find-symbol-at-point global-map)
         (bind-key "M-," 'tags-find-references-at-point global-map)
         (bind-key "M-;" 'tags-find-file global-map)
         (bind-key "C-." 'tags-find-symbol global-map)
         (bind-key "C-," 'tags-find-references global-map)
         (bind-key "C-<" 'rtags-find-virtuals-at-point global-map))

       (req-package company-rtags
         :require company rtags)

       (add-hook 'c++-mode-hook 'flycheck-mode)
       (add-hook 'c-mode-hook 'flycheck-mode)

       (req-package flycheck-rtags
         :require rtags
         :config
         (defun my-flycheck-rtags-setup ()
           (flycheck-select-checker 'rtags)
           (setq-local flycheck-highlighting-mode nil) ;; RTags creates more accurate overlays.
           (setq-local flycheck-check-syntax-automatically nil))
         (add-hook 'c-mode-common-hook #'my-flycheck-rtags-setup))

       (info-lookup-add-help
        :mode 'c-mode
        :regexp "[^][()'\" \t\n]+"
        :ignore-case t
        :doc-spec '(("(libc)Symbol Index" nil nil nil)))
     #+END_SRC
**** hooks
     #+BEGIN_SRC emacs-lisp :tangle yes
       (add-hook 'c++-mode-hook 'common-hooks/newline-hook)
       (add-hook 'c-mode-common-hook 'common-hooks/prog-helpers)
       (add-hook 'c-mode-hook 'common-hooks/newline-hook)
     #+END_SRC
**** TBD
***** BACKLOG review and maybe rebind keys
**** semanticdb
     #+BEGIN_SRC emacs-lisp :tangle no
       (when (cedet-gnu-global-version-check t)
         (semanticdb-enable-gnu-global-databases 'c-mode)
         (semanticdb-enable-gnu-global-databases 'c++-mode))
     #+END_SRC
*** perl
    #+BEGIN_SRC emacs-lisp :tangle no
      (fset 'perl-mode 'cperl-mode)

      (req-package cperl
        :defer t
        :command perl-mode
        :config
        (setq cperl-hairy t)
        (setq cperl-auto-newline-after-colon t)
        (setq cperl-autoindent-on-semi t)
        (setq cperl-extra-newline-before-brace nil)
        (setq cperl-indent-parens-as-block t)
        (setq cperl-auto-newline t)
        (setq cperl-brace-offset 0)
        (setq cperl-close-paren-offset -4)
        (setq cperl-continued-brace-offset 0)
        (setq cperl-continued-statement-offset 4)
        (setq cperl-extra-newline-before-brace-multiline nil)
        (setq cperl-indent-level 4)
        (setq cperl-label-offset -4)
        (setq cperl-merge-trailing-else nil)
        (setq cperl-tab-always-indent t))

      (defun custom/perl-mode-hook ()
        (cperl-mode 1)
        (setq compile-command (concat "perl -cw " buffer-file-name))
        (setq indent-tabs-mode nil)
        (setq tab-width 4)
        (turn-on-eldoc-mode)
        (yas-minor-mode t)
        (setf prettify-symbols-alist '(("->" . ?â)
                                       (">=" . ?â¥)
                                       ("<=" . ?â¤)))
        ;; ("<>" . ?â )  ("=>" . ?â)
        (prettify-symbols-mode t))

      (add-hook 'cperl-mode-hook 'custom/perl-mode-hook)
      (add-hook 'cperl-mode-hook 'common-hooks/prog-helpers)
      (add-hook 'cperl-mode-hook 'common-hooks/newline-hook)
      (add-hook 'cperl-mode-hook 'ws-butler-mode)
    #+END_SRC
*** php
    #+BEGIN_SRC emacs-lisp :tangle no
      (req-package php-mode
        :require cl-lib
        :mode ("\\.php" . php-mode)
        :config
        (setq php-manual-path "/home/octocat/documentation/php-chunked-xhtml/")
        (defun custom/php-mode-hook ()
          ;; style customization
          (setq tab-width 4) ;; was 4
          (setq indent-tabs-mode nil)
          (setq c-basic-offset 4)
          (setq show-trailing-whitespace t) ;; show trailing whitespace
          )
        (add-hook 'php-mode-hook 'custom/php-mode-hook)
        (add-hook 'php-mode-hook 'set-up-php-ac)
        (add-hook 'php-mode-hook 'common-hooks/prog-helpers))

      (req-package php-electric
        :require php-mode
        :disabled t) ;; autocompletion, not present in xLPA

      (req-package company-php)
    #+END_SRC
*** other
    Languages without much extra customization are going precisely here
    #+BEGIN_SRC emacs-lisp :tangle yes
      (req-package actionscript-mode :defer t)

      (req-package go-mode :defer t
        :init
        (req-package company-go))

      (req-package json-mode
        :require json-reformat json-snatcher
        :mode ("\\.json$" . json-mode))

      (req-package lua-mode :defer t
        :init
        (req-package company-lua))

      (req-package rust-mode :defer t)
    #+END_SRC
** webdev
*** major modes
    #+BEGIN_SRC emacs-lisp :tangle yes
      (req-package sgml-mode
        :defer t
        :config
        (bind-key "C-c C-w" 'html-wrap-in-tag html-mode-map))

      (req-package markdown-mode
        :require cl-lib
        :mode (("\\.markdown$" . markdown-mode)
               ("\\.md$" . markdown-mode)
               ("\\.mkd$" . markdown-mode)
               ("\\.pdc$" . markdown-mode)
               ("\\bREADME$" . markdown-mode))
        :config
        (bind-key "C-c C-v" 'markdown-preview markdown-mode-map)
        (bind-key "C-<tab>" 'yas/expand markdown-mode-map))

      (req-package yaml-mode)
    #+END_SRC
*** xml
    #+BEGIN_SRC emacs-lisp :tangle yes
      (defun custom/nxml-mode-hook ()
        (auto-fill-mode)
        (hs-minor-mode 1)
        (rng-validate-mode)
        (setq ispell-skip-html t)
        (unify-8859-on-decoding-mode)
        )

      (setq nxml-auto-insert-xml-declaration-flag t)
      (setq nxml-bind-meta-tab-to-complete-flag t)
      (setq nxml-slash-auto-complete-flag t)

      (push '("<\\?xml" . nxml-mode) magic-mode-alist)

      (add-to-list 'hs-special-modes-alist
                   '(nxml-mode
                     "\\|<[^/>]&>\\|<[^/][^>]*[^/]>"
                     ""
                     nil))

      (add-hook 'nxml-mode-hook 'common-hooks/newline-hook)
      (add-hook 'nxml-mode-hook 'custom/nxml-mode-hook)

      (add-to-list 'auto-mode-alist
                   (cons (concat "\\."
                                 (regexp-opt '("xml" "xsd" "sch" "rng" "xslt" "svg" "rss" "rdf") t) "\\'")
                         'nxml-mode))

      (push '("<\\?xml" . nxml-mode) magic-mode-alist)

      ;; TODO: integrate docbook-menu into el-get, probable relevant links below
      ;; http://www.emacswiki.org/emacs/UsingNxmlModeWithDocBook
      ;; http://www.emacswiki.org/emacs/DocbookXmlMode
    #+END_SRC
*** multiple major modes
    #+BEGIN_SRC emacs-lisp :tangle yes
      (req-package web-mode
        :mode (("\\.phtml\\'" . web-mode)
               ("\\.tpl\\.php\\'" . web-mode)
               ("\\.[agj]sp\\'" . web-mode)
               ("\\.as[cp]x\\'" . web-mode)
               ("\\.erb\\'" . web-mode)
               ("\\.mustache\\'" . web-mode)
               ("\\.djhtml\\'" . web-mode)
               ("\\.html?\\'" . web-mode))
        :init
        (req-package company-web-html)
        :config
        (setq web-mode-enable-current-element-highlight t)
        (setq web-mode-enable-auto-closing t)
        (setq web-mode-enable-auto-expanding t)
        (setq web-mode-enable-auto-pairing t)
        (setq web-mode-enable-auto-quoting t)
        (setq web-mode-enable-css-colorization t)
        (setq web-mode-markup-indent-offset 2)
        (setq web-mode-code-indent-offset 2)
        (setq web-mode-css-indent-offset 2)
        (add-to-list 'web-mode-engines-alist '("django" . "\\.html\\'"))
        (add-hook 'web-mode-hook
                  (lambda ()
                    (set (make-local-variable 'company-backends)
                         '(company-tern company-web-html company-yasnippet company-files))
                    (company-mode t)))
        ;; Enable JavaScript completion between <script>...</script> etc.
        (defadvice company-tern (before web-mode-set-up-ac-sources activate)
          "Set `tern-mode' based on current language before running company-tern."
          (message "advice")
          (if (equal major-mode 'web-mode)
              (let ((web-mode-cur-language
                     (web-mode-language-at-pos)))
                (if (or (string= web-mode-cur-language "javascript")
                        (string= web-mode-cur-language "jsx")
                        )
                    (unless tern-mode (tern-mode))
                  (if tern-mode (tern-mode -1))))))
        ;; manual autocomplete
        (bind-key "M-SPC" 'company-complete web-mode-map))

      (req-package web-mode-edit-element
        :config
        (add-hook 'web-mode-hook 'web-mode-edit-element-minor-mode))

      (req-package web-narrow-mode
        :config
        (add-hook 'web-mode-hook 'web-narrow-mode))

      (setq mumamo-background-colors nil)
      (setq mumamo-submode-indent-offset 4)

      (add-hook 'css-mode-hook (lambda () (rainbow-mode)))
      (add-hook 'django-html-mumamo-mode-hook
                (lambda ()
                  (setq django-indent-width 4)
                  (setq sgml-basic-offset 4)))
    #+END_SRC
*** color helper
    #+BEGIN_SRC emacs-lisp :tangle yes
      (req-package rainbow-mode :defer t)
    #+END_SRC
*** emmet mode setup
    #+BEGIN_SRC emacs-lisp :tangle yes
      (req-package emmet-mode
        :defer t
        :config
        (bind-key "C-j" nil emmet-mode-keymap)
        (bind-key "<C-return>" nil emmet-mode-keymap)
        (bind-key "C-c C-j" 'emmet-expand-line emmet-mode-keymap)
        (setq emmet-move-cursor-between-quotes t)
        (add-hook 'sgml-mode-hook 'emmet-mode)
        (add-hook 'nxml-mode-hook 'emmet-mode)
        (add-hook 'django-mode 'emmet-mode)
        (add-hook 'sgml-mode-hook 'emmet-mode)
        (add-hook 'css-mode-hook 'emmet-mode)
        (add-hook 'emmet-mode-hook
                  (lambda () (setq emmet-indentation 2))))
    #+END_SRC
*** web client
    #+BEGIN_SRC emacs-lisp :tangle yes
      (req-package web
        :require dash s
        :defer t)
    #+END_SRC
*** try
    #+BEGIN_SRC emacs-lisp :tangle no
      ;; from FAQ at http://web-mode.org/ for smartparens
      (defun my/web-mode-hook ()
        (setq web-mode-enable-auto-pairing nil))

      (defun my/sp-web-mode-is-code-context (id action context)
        (when (and (eq action 'insert)
                   (not (or (get-text-property (point) 'part-side)
                            (get-text-property (point) 'block-side))))
          t))
    #+END_SRC
* clients
** restclient
   #+BEGIN_SRC emacs-lisp :tangle yes
     (req-package restclient
       :defer t
       :bind ("C-c C-r C-s" . custom/create-restclient-sandbox)
       :init
       (req-package company-restclient)
       :config
       (defun custom/create-restclient-sandbox ()
         (interactive)
         (let ((restbuffer (generate-new-buffer "*restclient-sandbox*")))
           (switch-to-buffer restbuffer)
           (restclient-mode))))

     (req-package ob-restclient
       :config
       (org-babel-do-load-languages
        'org-babel-load-languages
        '((restclient . t))))
   #+END_SRC
** terminal
*** common
    #+BEGIN_SRC emacs-lisp :tangle yes
      (req-package ansi-color
        :config
        (defun custom/colorize-compilation ()
          "Colorize from `compilation-filter-start' to `point'."
          (let ((inhibit-read-only t))
            (ansi-color-apply-on-region
             compilation-filter-start (point))))
        (add-hook 'compilation-filter-hook
                  #'custom/colorize-compilation))
    #+END_SRC
*** comint
    #+BEGIN_SRC emacs-lisp :tangle yes
      (define-namespace custom/

      ;;TODO: parametrize shell for terminal
      (defun terminal ()
        "Switch to terminal. Launch if nonexistent."
        (interactive)
        (if (get-buffer "*ansi-term*")
            (switch-to-buffer "*ansi-term*")
          (ansi-term "/bin/zsh"))
        (get-buffer-process "*ansi-term*"))

      (defalias 'tt 'terminal)

      (defun comint-clear-buffer ()
        (interactive)
        (let ((comint-buffer-maximum-size 0))
          (comint-truncate-buffer)))

      (defun term-exec-hook ()
        (let* ((buff (current-buffer))
               (proc (get-buffer-process buff)))
          (set-process-sentinel
           proc
           `(lambda (process event)
              (if (string= event "finished\n")
                  (kill-buffer ,buff))))))

      )

      (req-package term
        :defer t
        :config
        (add-hook 'term-exec-hook 'custom/term-exec-hook)
        (bind-key "C-c C-y" 'term-paste term-raw-map)
        (setq explicit-shell-file-name "/bin/zsh"))

      (bind-key "\C-c\M-o" 'custom/comint-clear-buffer comint-mode-map)
    #+END_SRC
*** shell/check syntax
    #+BEGIN_SRC emacs-lisp :tangle yes
      (define-namespace custom/

      (defun sh-check-finish-hook (buf msg)
        "Function, that is executed at the end of sh check"
        (when (not (string-match "finished" msg))
          (next-error 1 t)))

      (defun sh-check-syntax ()
        "Check syntax of current file"
        (interactive)
        (when (string-match "^\\(ba\\|z\\)sh" (symbol-name sh-shell))
          (save-some-buffers t)
          (compilation-start (concat (symbol-name sh-shell) " -n " (buffer-file-name))
                             'sh-check-mode)))

      )

      (define-compilation-mode sh-check-mode "SH"
        "Mode for check sh source code."
        (set (make-local-variable 'compilation-disable-input) t)
        (set (make-local-variable 'compilation-scroll-output) nil)
        (set (make-local-variable 'compilation-finish-functions)
             (list 'custom/sh-check-finish-hook)))

      (req-package shell
        :init
        (req-package company-shell)
        :config
        (bind-key "C-c l" 'custom/sh-check-syntax shell-mode-map)
        (add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
        (add-hook 'shell-mode-hook 'common-hooks/newline-hook)
        (add-hook 'shell-mode-hook 'common-hooks/prog-helpers))
    #+END_SRC
**** BACKLOG try to leverage shellcheck util usage
*** eshell
    #+BEGIN_SRC emacs-lisp :tangle yes
      (req-package eshell
        :defer t
        :config
        (defun eshell-handle-ansi-color ()
          (ansi-color-apply-on-region eshell-last-output-start
                                      eshell-last-output-end))
        (add-to-list 'eshell-output-filter-functions 'eshell-handle-ansi-color))
    #+END_SRC
** Twitter
   #+BEGIN_SRC emacs-lisp :tangle yes
     (req-package twittering-mode
       :defer t
       :commands twit
       :init
       (setq twittering-use-master-password t)
       (setq twittering-private-info-file (expand-file-name "~/docs/enc/cred/.twittering-mode.gpg")))
   #+END_SRC
** internal browser (w3m/eww)
   #+BEGIN_SRC emacs-lisp :tangle yes
     (req-package w3m
       :defer t
       :commands w3m
       :init
       (req-package w3m-search
         :config
         (add-to-list 'w3m-search-engine-alist
                      '("emacs-wiki" "http://www.emacswiki.org/cgi-bin/wiki.pl?search=%s")))
       (add-hook 'w3m-display-hook
                 (lambda (url)
                   (rename-buffer
                    (format "*w3m: %s*" (or w3m-current-title
                                            w3m-current-url)) t)))
       :config
       (setq w3m-coding-system 'utf-8)
       (setq w3m-file-coding-system 'utf-8)
       (setq w3m-file-name-coding-system 'utf-8)
       (setq w3m-input-coding-system 'utf-8)
       (setq w3m-output-coding-system 'utf-8)
       (setq w3m-terminal-coding-system 'utf-8)
       (setq w3m-use-cookies t)
       ;; special chars
       (standard-display-ascii ?\200 [15])
       (standard-display-ascii ?\201 [21])
       (standard-display-ascii ?\202 [24])
       (standard-display-ascii ?\203 [13])
       (standard-display-ascii ?\204 [22])
       (standard-display-ascii ?\205 [25])
       (standard-display-ascii ?\206 [12])
       (standard-display-ascii ?\210 [23])
       (standard-display-ascii ?\211 [14])
       (standard-display-ascii ?\212 [18])
       (standard-display-ascii ?\214 [11])
       (standard-display-ascii ?\222 [?\'])
       (standard-display-ascii ?\223 [?\"])
       (standard-display-ascii ?\224 [?\"])
       (standard-display-ascii ?\227 " -- "))
   #+END_SRC
** MPD
   #+BEGIN_SRC emacs-lisp :tangle yes
     (req-package mingus
       :commands mingus
       :require libmpdee
       :config
       (bind-key "<Backspace>" 'mingus-del mingus-playlist-map)
       (defhydra hydra-mingus ()
         "
       Control               Playlist
       ------------------------------
       _<up>_ volume up        _s_ show playlist
       _<down>_ volume down    _/_ search for tracks
       _<right>_ seek forward
       _<left>_ seek backward
       "
         ("s" mingus "open mingus")
         ("/" mingus-search "Search")
         ("<up>" (dotimes (i 5) (mingus-vol-up)) "Louder")
         ("<down>" (dotimes (i 5) (mingus-vol-down)) "Quieter")
         ("<right>" mingus-seek "seek forward")
         ("<left>" mingus-seek-backward "seek backward")
         ("q" nil "cancel"))
       (global-set-key (kbd "C-c m") 'hydra-mingus/body))
   #+END_SRC
** open files in external apps
   #+BEGIN_SRC emacs-lisp :tangle yes
     (bind-key "C-!" 'crux-open-with dired-mode-map)
   #+END_SRC
** email
*** common
    #+BEGIN_SRC emacs-lisp :tangle yes
      (defvar custom/gmail-accounts '("aaermolov@gmail.com" "aermolov@mirantis.com"))

      (req-package footnote)

      ;; use org structures and tables in message mode
      (add-hook 'message-mode-hook 'turn-on-orgtbl)
      (add-hook 'message-mode-hook 'turn-on-orgstruct++)
    #+END_SRC
*** send mail
    #+BEGIN_SRC emacs-lisp :tangle yes
      (setq mail-specify-envelope-from t)
      (setq message-sendmail-envelope-from 'header)
      (setq mail-envelope-from 'header)
      (setq send-mail-function 'sendmail-send-it)
      (setq message-kill-buffer-on-exit t)
    #+END_SRC
*** notmuch
    #+BEGIN_SRC emacs-lisp :tangle yes
      (req-package notmuch
        :config
        (setq mm-text-html-renderer 'w3m)
        (setq notmuch-mua-compose-in 'current-window)
        (setq notmuch-identities custom/gmail-accounts)
        (setq notmuch-fcc-dirs
              '(("aaermolov@gmail.com" . "aaermolov@gmail.com/Sent")
                ("aermolov@mirantis.com" . "aermolov@mirantis.com/Sent")))
        (setq notmuch-search-line-faces '(("unread" . (:foreground "white"))
                                          ("deleted" . (:foreground "red"
                                                        :background "blue"))))
        (bind-key "!"
          (lambda ()
            "toggle unread tag for thread"
            (interactive)
            (if (member "unread" (notmuch-search-get-tags))
                (notmuch-search-tag '("-unread" "-spam"))
              (notmuch-search-tag '("+unread")))) notmuch-search-mode-map)
        (bind-key "g"
          (lambda ()
            "Refresh search results"
            (interactive)
            (notmuch-refresh-this-buffer)) notmuch-search-mode-map)
        (bind-key "#" 'mml-attach-file notmuch-message-mode-map)
        (setq notmuch-saved-searches private/notmuch-saved-searches)
        (add-hook 'notmuch-hello-refresh-hook
                  (lambda ()
                    (if (and (eq (point) (point-min))
                             (search-forward "Saved searches:" nil t))
                        (progn
                          (forward-line)
                          (widget-forward 1))
                      (if (eq (widget-type (widget-at)) 'editable-field)
                          (beginning-of-line)))))
        ;; Reading mail settings:
        (setq notmuch-crypto-process-mime t) ; Automatically check signatures
        ;; Crypto Settings
        (add-hook 'message-setup-hook 'mml-secure-message-sign-pgpmime)
        ;;Settings for main screen
        (setq notmuch-hello-hide-tags (quote ("killed")))
        (require 'org-notmuch))
    #+END_SRC
*** hydra
    #+BEGIN_SRC emacs-lisp :tangle yes
      (defhydra hydra-email (:exit t :color red)
        "Read mail"
        ("n" notmuch nil))
      (global-set-key (kbd "C-c 4") 'hydra-email/body)
    #+END_SRC
** security
*** packages
    #+BEGIN_SRC emacs-lisp :tangle yes
      (req-package pass)

      (req-package auth-password-store
        :config
        (auth-pass-enable))

      (eval-after-load 'ivy
        ;;TODO: relocate more appropriately
        '(progn
           (defun counsel-pass ()
    	 (interactive)
    	 (ivy-read "Counsel interface for Pass: "
    		   (funcall #'password-store-list)
    		   :action #'password-store-copy)
    	 :require-match t
    	 :caller 'counsel-pass)
           (ivy-set-actions
    	'counsel-pass
    	'(("c" password-store-copy "Copy password to clipboard")
              ("e" password-store-edit "Edit entry")
              ("b" password-store-url "Browse url of entry")))))
    #+END_SRC
*** hydras
    #+BEGIN_SRC emacs-lisp :tangle yes
      (defhydra hydra-security ()
        ("p" pass "pass" :color blue)
        ("!" counsel-pass "Counsel interface to Pass" :color blue)
        ("q" nil "cancel"))
      (global-set-key (kbd "<f6>") 'hydra-security/body)
    #+END_SRC
** various useful packages
   #+BEGIN_SRC emacs-lisp :tangle yes
     (req-package google-translate
       :defer t
       :init
       (req-package google-translate-default-ui))

     (imagemagick-register-types)

     (req-package notify)

     (req-package wttrin
       :require xterm-color
       :config
       (setq wttrin-default-cities '("Moscow")))

     (req-package webpaste
       :disabled t
       :config
       ;;TODO: fix keybindings
       (defhydra hydra-webpaste ()
         ("b" webpaste-paste-buffer "paste buffer")
         ("r" webpaste-paste-region "paste region")
         ("q" nil "cancel"))
       (global-set-key (kbd "M-t") 'hydra-transpose/body))

     (req-package ein)
   #+END_SRC
* pim
** elfeed
   #+BEGIN_SRC emacs-lisp :tangle no
     (req-package elfeed
       :config
       (defface elfeed-lisp-tag-face
         '((t :weight bold :foreground "cyan"))
         "Face used in search mode for unread entry titles.")
       (push '(lisp elfeed-lisp-tag-face) elfeed-search-face-alist)
       (defface elfeed-functional-tag-face
         '((t :weight bold :foreground "green"))
         "Face used in search mode for unread entry titles.")
       (push '(functional elfeed-functional-tag-face) elfeed-search-face-alist)
       (bind-key "C-x w" 'elfeed)
       (bind-key "!" 'elfeed-search-untag-all-unread elfeed-search-mode-map)
       (bind-key "=" 'elfeed-search-update--force elfeed-search-mode-map)
       (bind-key "+" 'elfeed-search-fetch elfeed-search-mode-map)
       (setq-default elfeed-search-filter "-junk @1-week-ago +unread"))

     (req-package elfeed-org
       :require elfeed
       :config
       (elfeed-org)
       (setq rmh-elfeed-org-files `(,(at-org-kb-dir "/feeds.org"))))

     (req-package elfeed-goodies
       :require elfeed
       :config
       (elfeed-goodies/setup))
   #+END_SRC
** bbdb
   the code below need to be reorganized, it seems to not work
   req-package is not usable before it
   #+BEGIN_SRC emacs-lisp :tangle no
     (req-package bbdb-loaddefs
       :defer t
       :commands bbdb
       :init
       (req-package bbdb)
       :config
       (setq bbdb-change-hook 'bbdb-timestamp-hook)
       (setq bbdb-complete-name-allow-cycling t)
       (setq bbdb-completion-display-record nil)
       (setq bbdb-dwim-net-address-allow-redundancy t)
       (setq bbdb-file '"~/.database.bbdb")
       (setq bbdb-north-american-phone-numbers-p nil)
       (setq bbdb-notice-hook 'bbdb-auto-notes-hook)
       (setq bbdb-offer-save 'savenoprompt) ;'automatic
       (setq bbdb-phone-style 'nil)
       (setq bbdb-quiet-about-name-mismatches t)
       (setq bbdb-readonly-p nil)
       (setq bbdb-sounds-directory nil)
       (setq bbdb-use-alternate-names nil)
       (setq bbdb-use-pop-up nil)
       (setq bbdb/mail-auto-create-p 'bbdb-ignore-most-messages-hook)
       (setq news-reply-header-hook nil)
       (add-to-list 'file-coding-system-alist (cons "\\.bbdb"  'utf-8))
       (bind-key "<tab>" 'custom/my-bbdb-tab-complete message-mode-map)
       (bind-key "C-c C-e" 'bbdb-edit-current-field bbdb-mode-map)
       (bind-key "C-c C-f d" 'bbdb-delete-current-field-or-record bbdb-mode-map)
       (bind-key "C-c C-f i" 'bbdb-insert-new-field bbdb-mode-map))

     ;;TODO: setup
     (req-package counsel-bbdb
       :require counsel bbdb
       :disabled t)
   #+END_SRC
** calendars
   #+BEGIN_SRC emacs-lisp :tangle yes
     (req-package calfw
       :require google-maps
       :defer t
       :init
       (req-package calfw-ical)
       (req-package calfw-org)
       :config
       (setq calendar-week-start-day 1) ; 0:Sunday, 1:Monday
       ;; Unicode characters
       (setq cfw:fchar-junction ?â¬
             cfw:fchar-vertical-line ?â
             cfw:fchar-horizontal-line ?â
             cfw:fchar-left-junction ?â 
             cfw:fchar-right-junction ?â£
             cfw:fchar-top-junction ?â¦
             cfw:fchar-top-left-corner ?â
             cfw:fchar-top-right-corner ?â)
       ;; Week days
       (setq calendar-day-name-array
             ["ÐÐ¾ÑÐºÑÐµÑÐµÐ½ÑÐµ" "ÐÐ¾Ð½ÐµÐ´ÐµÐ»ÑÐ½Ð¸Ðº" "ÐÑÐ¾ÑÐ½Ð¸Ðº" "Ð¡ÑÐµÐ´Ð°" "Ð§ÐµÑÐ²ÐµÑÐ³" "ÐÑÑÐ½Ð¸ÑÐ°" "Ð¡ÑÐ±Ð±Ð¾ÑÐ°"])
       ;; Month
       (setq calendar-month-name-array
             ["Ð¯Ð½Ð²Ð°ÑÑ" "Ð¤ÐµÐ²ÑÐ°Ð»Ñ" "ÐÐ°ÑÑ" "ÐÐ¿ÑÐµÐ»Ñ" "ÐÐ°Ð¹" "ÐÑÐ½Ñ" "ÐÑÐ»Ñ" "ÐÐ²Ð³ÑÑÑ" "Ð¡ÐµÐ½ÑÑÐ±ÑÑ"
              "ÐÐºÑÑÐ±ÑÑ" "ÐÐ¾ÑÐ±ÑÑ" "ÐÐµÐºÐ°Ð±ÑÑ"])
       (custom-set-faces
        '(cfw:face-title ((t (:foreground "#f0dfaf" :weight bold :height 2.0 :inherit variable-pitch))))
        '(cfw:face-header ((t (:foreground "#d0bf8f" :weight bold))))
        '(cfw:face-sunday ((t :foreground "#cc9393" :background "grey10" :weight bold)))
        '(cfw:face-saturday ((t :foreground "#8cd0d3" :background "grey10" :weight bold)))
        '(cfw:face-holiday ((t :background "grey10" :foreground "#8c5353" :weight bold)))
        '(cfw:face-grid ((t :foreground "DarkGrey")))
        '(cfw:face-default-content ((t :foreground "#bfebbf")))
        '(cfw:face-periods ((t :foreground "cyan")))
        '(cfw:face-day-title ((t :background "grey10")))
        '(cfw:face-default-day ((t :weight bold :inherit cfw:face-day-title)))
        '(cfw:face-annotation ((t :foreground "RosyBrown" :inherit cfw:face-day-title)))
        '(cfw:face-disable ((t :foreground "DarkGray" :inherit cfw:face-day-title)))
        '(cfw:face-today-title ((t :background "#7f9f7f" :weight bold)))
        '(cfw:face-today ((t :background: "grey10" :weight bold)))
        '(cfw:face-select ((t :background "#2f2f2f")))
        '(cfw:face-toolbar ((t :foreground "Steelblue4" :background "Steelblue4")))
        '(cfw:face-toolbar-button-off ((t :foreground "Gray10" :weight bold)))
        '(cfw:face-toolbar-button-on ((t :foreground "Gray50" :weight bold))))
       (defun custom/calfw-open-calendar ()
         (interactive)
         (cfw:open-calendar-buffer
          :contents-sources
          (list
           (cfw:org-create-source "Green")  ; orgmode source
           (cfw:ical-create-source "gcal" private/google-calendar-url "IndianRed") ; google calendar ICS
           (cfw:ical-create-source "gcal" private/google-family-calendar-url "IndianRed")))))

     (req-package calfw-gcal
       :defer t
       :require calfw)

     (req-package org-gcal
       :require request-deferred alert cl-lib org
       :defer t
       :config
       (setq org-gcal-client-id private/org-gcal-client-id)
       (setq org-gcal-client-secret private/org-gcal-client-secret)
       (setq org-gcal-file-alist private/org-gcal-file-alist))
   #+END_SRC
** deft
*** definitions
    #+BEGIN_SRC emacs-lisp :tangle no
      (define-namespace custom/deft/

      ;;advise deft to save window config
      (defun save-windows (orig-fun &rest args)
        (setq custom/pre-deft-window-config (current-window-configuration))
        (apply orig-fun args))

      ;;function to quit a deft edit cleanly back to pre deft window
      (defun quit-deft ()
        "Save buffer, kill buffer, kill deft buffer, and restore
        window config to the way it was before deft was invoked"
        (interactive)
        (save-buffer)
        (kill-this-buffer)
        (switch-to-buffer "*Deft*")
        (kill-this-buffer)
        (when (window-configuration-p custom/pre-deft-window-config)
          (set-window-configuration custom/pre-deft-window-config)))
      )
    #+END_SRC
*** setup
    #+BEGIN_SRC emacs-lisp :tangle no
      (req-package deft
        :defer t
        :config
        (setq deft-directory (at-homedir "/deft"))
        (setq deft-extension "org")
        (setq deft-text-mode 'org-mode)
        (setq deft-use-filename-as-title t)
        (advice-add 'deft :around #'custom/deft/save-windows))
    #+END_SRC
** orgmode
*** preface
    org-mode is already loaded because we needed to tangle
    emacs-config.org, so no need to use use-package.
**** Notes about setting up org-capture
     update-desktop-database

     URL:
     javascript:location.href='org-protocol://capture://l/'+encodeURIComponent(location.href)+'/'+encodeURIComponent(document.title)+'/'+encodeURIComponent(window.getSelection())

     ~/.local/share/applications/mimeapps.list
     [Default Applications]
     x-scheme-handler/org-protocol=org-protocol.desktop

     ~/.local/share/applications/org-protocol.desktop
     [Desktop Entry]
     Name=org-protocol
     Exec=emacsclient %u
     Type=Application
     Terminal=false
     Categories=System;
     MimeType=x-scheme-handler/org-protocol;
*** definitions
**** process thing at point
     #+BEGIN_SRC emacs-lisp :tangle yes
       (defadvice custom/browse-url-at-point (before org-position-url activate)
         (when (derived-mode-p 'org-mode)
           (let ((end nil))
             (save-excursion
               (org-back-to-heading t)
               (setq end (save-excursion (outline-next-heading) (point))))
             (org-back-to-heading t)
             (re-search-forward org-plain-link-re end t))))
     #+END_SRC
**** Org locations
     :PROPERTIES:
     :ID:       ac9bd4a6-f167-4408-aa97-c58843003584
     :END:
     #+BEGIN_SRC emacs-lisp :tangle yes
       (defvar custom/org-journal-file (at-org-dir "/journal.org"))
       (defvar custom/org-browser-tabs (at-org-dir "/browser-tabs.org"))

       (setq org-archive-location (concat custom/org-journal-file "::datetree/"))
     #+END_SRC
**** open org agenda when we need it
     #+BEGIN_SRC emacs-lisp :tangle yes
       (define-namespace custom/

       (defun jump-to-org-agenda ()
         (interactive)
         (let ((buf (get-buffer "*Org Agenda*"))
               wind)
           (if buf
               (if (setq wind (get-buffer-window buf))
                   (select-window wind)
                 (if (called-interactively-p)
                     (progn
                       (select-window (display-buffer buf t t))
                       (org-fit-window-to-buffer)
                       ;; (org-agenda-redo)
                       )
                   (with-selected-window (display-buffer buf)
                     (org-fit-window-to-buffer)
                     ;; (org-agenda-redo)
                     )))
             (call-interactively 'org-agenda-list)))
         ;;(let ((buf (get-buffer "*Calendar*")))
         ;;  (unless (get-buffer-window buf)
         ;;    (org-agenda-goto-calendar)))
         )

       (defun jump-to-custom-agenda-random ()
         (interactive)
         (let* ((agendas
                 (remove-if
                  (lambda (agenda) (= (length agenda) 1))
                  (mapcar (lambda (x) (car x)) org-agenda-custom-commands)))
                (agendas-count (length agendas)))
           (org-agenda nil
                       (car (nthcdr (random agendas-count) agendas)))))

       )
     #+END_SRC
**** timestamps utils
     #+BEGIN_SRC emacs-lisp :tangle yes
       (define-namespace custom/

       ;;TODO: use prefix arg
       (defun org-update-timestamp-with-time (&optional as-is)
         (interactive)
         (unless as-is
           (insert " "))
         (insert (format-time-string "%H:%M")))

       (defun get-org-timestamp ()
         (with-temp-buffer
           (call-interactively 'org-time-stamp-inactive)
           (buffer-string)))

       (defun strip-org-timestamp (ts)
         (let ((tslen (length ts)))
           (substring ts 1 (- tslen 4))))

       )
     #+END_SRC
**** navigation
     #+BEGIN_SRC emacs-lisp :tangle yes
       (define-namespace custom/

       ;; Exclude DONE state tasks from refile targets
       (defun verify-refile-target ()
         "Exclude todo keywords with a done state from refile targets"
         (not (member (nth 2 (org-heading-components)) org-done-keywords)))

       ;;TODO: customize "todo-only" parameter for "org-tags-view"
       (defun follow-tag-link (tag)
         "Display a list of TODO headlines with tag TAG.
         With prefix argument, also display headlines without a TODO keyword."
         (org-tags-view nil tag))              ;nil was (null current-prefix-arg) originally

       )
     #+END_SRC
**** utils
     #+BEGIN_SRC emacs-lisp :tangle yes
       (define-namespace custom/

       ;; Remove empty CLOCK drawers on clock out
       (defun remove-empty-drawer-on-clock-out ()
           (interactive)
           (save-excursion
               (beginning-of-line 0)
           (org-remove-empty-drawer-at "CLOCK" (point))))

       (defun org-use-speed-commands-for-headings-and-lists ()
         "Activate speed commands on list items too."
         (or (and (looking-at org-outline-regexp) (looking-back "^\**"))
             (save-excursion (and (looking-at (org-item-re)) (looking-back "^[ \t]*")))))

       (defun org-capture-refile-and-jump ()
         (interactive)
         (org-capture-refile)
         (org-refile-goto-last-stored))

       )
     #+END_SRC
**** custom sorting
     #+BEGIN_SRC emacs-lisp :tangle no
       (define-namespace custom/

       (defvar custom/priority-todos-for-sorting '("STARTED"))

       (defun custom/todo-to-started-first-int ()
         "Default todo order is modified by giving more priority to
       todo's from custom/priority-todos-for-sorting and entries
       without any todo keywords at all."
         (let* ((props (org-entry-properties))
                (item-todo (cdr (assoc "TODO" props)))
                (item-prio (- (aif (cdr (assoc "PRIORITY" props))
                                  (aref it 0)
                                org-default-priority)
                              org-highest-priority))
                (modified-todo-order
                 (append custom/priority-todos-for-sorting
                         (-remove #'(lambda (todo) (member todo custom/priority-todos-for-sorting)) org-todo-keywords-1)))
                (todo-idx (if item-todo (1+ (-elem-index item-todo modified-todo-order)) 0))
                (prio-range (1+ (- org-default-priority org-highest-priority))))
           (+ (* prio-range todo-idx) item-prio)))

       (defun org-sort-entries ()
         (interactive)
         (org-sort-entries nil ?f #'custom/todo-to-started-first-int))

       )
     #+END_SRC
**** pick up random Org task
     #+BEGIN_SRC emacs-lisp :tangle yes
       (defun org-random-entry (&optional arg)
         "Select and goto a random todo item from the global agenda"
         (interactive "P")
         (if org-agenda-overriding-arguments
             (setq arg org-agenda-overriding-arguments))
         (if (and (stringp arg) (not (string-match "\\S-" arg))) (setq arg nil))
         (let* ((today (org-today))
                (date (calendar-gregorian-from-absolute today))
                (kwds org-todo-keywords-for-agenda)
                (lucky-entry nil)
                (completion-ignore-case t)
                (org-agenda-buffer (when (buffer-live-p org-agenda-buffer)
                                     org-agenda-buffer))
                (org-select-this-todo-keyword
                 (if (stringp arg) arg
                   (and arg (integerp arg) (> arg 0)
                        (nth (1- arg) kwds))))
                rtn rtnall files file pos marker buffer)
           (when (equal arg '(4))
             (setq org-select-this-todo-keyword
                   (org-icompleting-read "Keyword (or KWD1|K2D2|...): "
                                         (mapcar 'list kwds) nil nil)))
           (and (equal 0 arg) (setq org-select-this-todo-keyword nil))
           (catch 'exit
             (org-compile-prefix-format 'todo)
             (org-set-sorting-strategy 'todo)
             (setq files (org-agenda-files nil 'ifmode)
                   rtnall nil)
             (while (setq file (pop files))
               (catch 'nextfile
                 (org-check-agenda-file file)
                 (setq rtn (org-agenda-get-day-entries file date :todo))
                 (setq rtnall (append rtnall rtn))))
             (when rtnall
               (setq lucky-entry
                     (nth (random
                           (safe-length
                            (setq entries rtnall)))
                          entries))
               (setq marker (or (get-text-property 0 'org-marker lucky-entry)
                                (org-agenda-error)))
               (setq buffer (marker-buffer marker))
               (setq pos (marker-position marker))
               (org-pop-to-buffer-same-window buffer)
               (widen)
               (goto-char pos)
               (when (derived-mode-p 'org-mode)
                 (org-show-context 'agenda)
                 (save-excursion
                   (and (outline-next-heading)
                        (org-flag-heading nil))) ; show the next heading
                 (when (outline-invisible-p)
                   (show-entry))                 ; display invisible text
                 (run-hooks 'org-agenda-after-show-hook))))))
     #+END_SRC
**** to be done
***** TODO some handle for getting 'done' tasks within particular time range
***** TODO some tag for those tasks not directly needed for job tasks (e.g. my own setups, ssh, etc)
***** TODO save done.org after refiling finisheda
***** TODO auto change status TODO --> DONE before refiling
*** setup
**** advices
     show desktop notifications for org-capture
     #+BEGIN_SRC emacs-lisp :tangle no
       (defadvice org-protocol-do-capture (around display-notify-after-capture)
         (let ((result ad-do-it))
           (if (and result
                    (file-executable-p "/usr/bin/notify-send"))
               (call-process "/usr/bin/notify-send" nil 0 nil
                             "--expire-time" "3000" "-u" "low"
                             "-i" (expand-file-name "~/.emacs.d/org.svg")
                             "Link captured"
                             (concat (caar org-stored-links)
                                     "\n"
                                     (cadar org-stored-links))))
           result))
     #+END_SRC
     and remove read-only props from yanked text (e.g. from jabber.el chat buffer)
     #+BEGIN_SRC emacs-lisp :tangle no
       (defadvice org-yank (after make-yank-writeable activate)
         (let ((inhibit-read-only t))
           (remove-text-properties (region-beginning) (region-end)
                                   '(read-only t))))
     #+END_SRC
**** additional packages
     #+BEGIN_SRC emacs-lisp :tangle yes
       (req-package icalendar :defer t)
       (req-package org-footnote :defer t)
       (req-package org-magit :require magit org)
       (req-package org-pomodoro :require alert cl-lib)

       (req-package ox-html)
       (req-package org-dashboard
         :require cl-lib
         :defer t)
       (req-package orgit :requires dash magit org)
       (req-package org-bullets)

       (req-package org-context
         :defer t
         :config
         ;;TODO: leverage real contexts
         (org-context-activate))

       (req-package orglink
         :require dash org
         :defer t
         :config
         ;; TODO: customize orglink-activate-in-modes
         (global-orglink-mode))

       (req-package org-linkany
         :require log4e yaxception
         :defer t)

       (req-package org-bookmark-heading)

       (req-package org-random-todo)

       (req-package org-clock-today
         :config
         (org-clock-today-mode 1))

       (req-package secretaria)

       (req-package org-mru-clock)

       (req-package org-vcard)

       (req-package ob-async
         :config
         (add-to-list 'org-ctrl-c-ctrl-c-hook 'ob-async-org-babel-execute-src-block))

       (req-package org-recent-headings
         :config
         (setq org-recent-headings-save-file (at-user-data-dir "org-recent-headings"))
         (org-recent-headings-mode 1))

       (req-package org-sticky-header
         :config
         (add-hook 'org-mode-hook 'org-sticky-header-mode))
     #+END_SRC
**** common
     #+BEGIN_SRC emacs-lisp :tangle yes
       (add-to-list 'file-coding-system-alist (cons "\\.\\(org\\|org_archive\\|/TODO\\)$"  'utf-8))

       (setq org-list-demote-modify-bullet '(("+" . "-")
                                             ("*" . "-")
                                             ("1." . "-")
                                             ("1)" . "-")
                                             ("A)" . "-")
                                             ("B)" . "-")
                                             ("a)" . "-")
                                             ("b)" . "-")
                                             ("A." . "-")
                                             ("B." . "-")
                                             ("a." . "-")
                                             ("b." . "-")))

       ;; extend priorities set
       (setq org-lowest-priority 70)

       (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
       (add-to-list 'auto-mode-alist '("\\.org_archive$" . org-mode))
     #+END_SRC
**** user speed commands
     #+BEGIN_SRC emacs-lisp :tangle yes
       (setq org-use-speed-commands 'custom/org-use-speed-commands-for-headings-and-lists)
       (setq org-use-speed-commands t)

       (add-to-list 'org-speed-commands-user '("x" org-todo "DONE"))
       (add-to-list 'org-speed-commands-user '("y" org-todo-yesterday "DONE"))
       (add-to-list 'org-speed-commands-user '("s" call-interactively 'org-schedule))
       (add-to-list 'org-speed-commands-user '("i" call-interactively 'org-clock-in))
       (add-to-list 'org-speed-commands-user '("o" call-interactively 'org-clock-out))
       (add-to-list 'org-speed-commands-user '("$" call-interactively 'org-archive-subtree))
     #+END_SRC
**** collect files for agenda
     #+BEGIN_SRC emacs-lisp :tangle yes
       (f-entries (at-org-dir)
                  (lambda (entry) (when (and (f-file? entry)
                                             (s-suffix? "org" entry)
                                             (file-exists-p entry))
                                    (push entry org-agenda-files)))
                  t)

       (dolist (orgfile (directory-files (at-org-dir "/journals") t "journal") )
         (setq org-agenda-files
               (delete orgfile org-agenda-files)))

       (add-to-list 'org-agenda-files (at-config-basedir "config.org"))
     #+END_SRC
**** agenda customizations
     #+BEGIN_SRC emacs-lisp :tangle yes
       (setf org-agenda-clockreport-parameter-plist '(:link t :maxlevel 2 :narrow 60))
       (setq org-agenda-dim-blocked-tasks 'invisible)
       (setq org-agenda-include-all-todo t)
       (setq org-agenda-include-diary t)
       (setq org-agenda-inhibit-startup t)
       (setq org-agenda-persistent-filter t)
       (setq org-agenda-repeating-timestamp-show-all nil)
       (setq org-agenda-restore-windows-after-quit t)
       (setq org-agenda-show-all-dates t)
       (setq org-agenda-show-inherited-tags nil)
       (setq org-agenda-show-log t)
       (setq org-agenda-skip-additional-timestamps-same-entry t)
       (setq org-agenda-skip-deadline-if-done t)
       (setq org-agenda-skip-deadline-prewarning-if-scheduled 'pre-scheduled)
       (setq org-agenda-skip-scheduled-if-done t)
       (setq org-agenda-skip-timestamp-if-done t)
       (setq org-agenda-span 'month)
       (setq org-agenda-start-on-weekday 1) ;;was nil
       (setq org-agenda-sticky nil)            ;otherwise agenda behaves strangely on non-stuck projects
       (setq org-agenda-tags-todo-honor-ignore-options t)
       (setq org-agenda-todo-ignore-deadlines 'all)
       (setq org-agenda-todo-ignore-scheduled 'all)
       (setq org-agenda-todo-ignore-timestamp 'past)
       (setq org-agenda-todo-ignore-with-date t)
       (setq org-agenda-todo-list-sublevels nil)
       (setq org-agenda-use-tag-inheritance t)
       (setq org-agenda-window-setup 'current-window) ;; was 'only-window
       (setf agenda-opts-all-with-time
             '((org-agenda-todo-ignore-scheduled nil)
               (org-agenda-todo-ignore-deadlines nil)
               (org-agenda-todo-ignore-with-date nil)))


       (setq org-agenda-time-grid
             '((daily today require-timed remove-match)
               "----------------"
               (930 1000 1200 1400 1600 1800 2000 2200 2400 2500)))

       (setq org-agenda-custom-commands
             `(("d" . "some non-straightforward TODO statuses")
               ("db" todo "BACKLOG" nil)
               ("ds" todo "SOON" nil)
               ("dc" todo "CANCELLED" nil)
               ("dw" todo "WAITING|FEEDBACK" nil)
               ("dg" todo "GOING" ,agenda-opts-all-with-time)
               ("da" tags "+actual_p")
               ("c" . "by context")
               ("cp" tags "+@personal/GOING|WAITING|BACKLOG|SOON")
               ("cr" tags "+@project/GOING|WAITING|BACKLOG|SOON")
               ("cj" tags "+@job/GOING|WAITING|FEEDBACK|BACKLOG|SOON")
               ("cw" tags "+@workplace/GOING|WAITING|BACKLOG|SOON")
               ("ct" tags "+@phonecall/WAITING|BACKLOG|SOON")
               ("cs" tags "+@someday")
               ("cq" tags "+@quicknote")
               ("e" . "by essence")
               ;;TODO: find more handy shortcuts
               ("ec" tags "+current")
               ("ef" tags "+reference")
               ("em" tags "+master")
               ("eo" tags "+ordering")
               ("er" tags "+repair")
               ("ed" tags "+develop")
               ("ei" tags "+investigate")
               ("ee" tags "+entertainment")
               ("ey" tags "+family")
               ("eH" tags-todo "+housekeeping")
               ("eC" tags-todo "+current")
               ("eF" tags-todo "+reference")
               ("eM" tags-todo "+master")
               ("eO" tags-todo "+ordering")
               ("eR" tags-todo "+repair")
               ("eD" tags-todo "+develop")
               ("eI" tags-todo "+investigate")
               ("eE" tags-todo "+entertainment")
               ("u" . "unassigned")
               ("up" alltodo "Unprioritized TODO entries"
                ((org-agenda-skip-function
                  (lambda nil
                    (org-agenda-skip-entry-if 'regexp "\\[#[ABC]]")))
                 (org-tags-match-list-sublevels 'indented)
                 (org-agenda-sorting-strategy
                  '((agenda time-up tag-up) ))
                 ;; '(org-agenda-sorting-strategy '((agenda time-up priority-down tag-up) (todo tag-up)))
                 (org-agenda-overriding-header "Unprioritized TODO entries: ")))
               ("P" . "Prioritized tasks")
               ("Pa" "Prioritized tasks A"
                ((tags-todo "+PRIORITY=\"A\"") ))
               ("Pb" "Prioritized tasks B"
                ((tags-todo "+PRIORITY=\"B\"")))
               ("Pc" "Prioritized tasks C"
                ((tags-todo "+PRIORITY=\"C\"")))
               ("S" "Scheduled tasks" agenda ""
                ((org-agenda-time-grid nil)
                 (org-deadline-warning-days 32)
                 (org-agenda-entry-types '(:scheduled))
                 ))
               ("p" tags "+purchase")
               ("b" . "tickets")
               ("be" tags "+ticket+emacs")
               ("bs" tags "+ticket+stumpwm")
               ("jc" tags "+@job+current/GOING|FEEDBACK")
               ))

       (setq org-agenda-prefix-format '((agenda . " %i %-12:c%?-12t% s %b")
                                        (timeline . "  % s")
                                        (todo . " %i %-12:c")
                                        (tags . " %i %-12:c")
                                        (search . " %i %-12:c")))
     #+END_SRC
**** clocking customizations
     #+BEGIN_SRC emacs-lisp :tangle yes
       (setq org-clock-history-length 35)
       (setq org-clock-idle-time 3)
       (setq org-clock-in-resume t)
       (setq org-clock-in-switch-to-state "GOING")
       (setq org-clock-out-switch-to-state "HOLD")
       (setq org-clock-into-drawer "CLOCK")
       (setq org-clock-out-remove-zero-time-clocks t)
       (setq org-clock-persist t)
     #+END_SRC
**** refiling customizations
     #+BEGIN_SRC emacs-lisp :tangle yes
       (setq org-refile-target-verify-function 'custom/verify-refile-target)
       (setq org-refile-targets '((org-agenda-files :maxlevel . 5) (nil :maxlevel . 5)))
       (setq org-refile-use-outline-path 'file)

       (custom/advice-for-major-mode org-mode org-refile)
     #+END_SRC
**** various customizations
     #+BEGIN_SRC emacs-lisp :tangle yes
       (setf org-catch-invisible-edits nil)
       (setf org-fast-tag-selection-include-todo nil)
       (setf org-id-link-to-org-use-id t)
       (setq appt-display-interval 5)
       (setq appt-message-warning-time 10)
       (setq calendar-date-style 'european)
       (setq org-align-all-tags t)
       (setq org-attach-directory (at-org-dir "/org-attach-data"))
       (setq org-blank-before-new-entry '((heading) (plain-list-item . auto)))
       (setq org-columns-default-format "%42ITEM %TODO %3Effort(E){:} %3CLOCKSUM_T(R) %SCHEDULED")
       (setq org-confirm-elisp-link-function 'y-or-n-p)
       (setq org-ctrl-k-protect-subtree t)
       (setq org-cycle-include-plain-lists 'integrate)
       (setq org-cycle-separator-lines 0)
       (setq org-deadline-warning-days 30)
       (setq org-default-notes-file (at-org-dir "/refile.org"))
       (setq org-ditaa-jar-path (at-config-basedir "resources/ditaa0_9.jar"))
       (setq org-element-use-cache nil)
       (setq org-enforce-todo-checkbox-dependencies t)
       (setq org-enforce-todo-dependencies t)  ;;TODO: try ORDERED/NOBLOCKING props : org-toggle-ordered-property
       (setq org-export-coding-system 'utf-8)
       (setq org-export-with-drawers t)
       (setq org-extend-today-until 2)
       (setq org-fast-tag-selection-single-key 'expert)
       (setq org-fontify-done-headline t)
       (setq org-global-properties '(("STYLE_ALL" . "habit")))
       (setq org-goto-max-level 10)
       (setq org-hide-leading-stars t)
       (setq org-indirect-buffer-display 'current-window)
       (setq org-insert-mode-line-in-empty-file t)
       (setq org-log-done t)
       (setq org-log-into-drawer t)
       (setq org-log-repeat 'time)
       (setq org-loop-over-headlines-in-active-region t)
       (setq org-outline-path-complete-in-steps nil)
       (setq org-read-date-prefer-future 'time)
       (setq org-return-follows-link t)
       (setq org-special-ctrl-a/e t)
       (setq org-special-ctrl-k t)
       (setq org-src-fontify-natively t)
       (setq org-startup-folded nil)
       (setq org-stuck-projects '("+LEVEL=1/-DONE" ("TODO" "GOING" "NEXT" "WAITING" "HOLD" "CANCELLED") nil ""))
       (setq org-tags-column -80)
       (setq org-track-ordered-property-with-tag t)
       (setq org-use-effective-time t)
       (setq org-use-property-inheritance t)
       (setq org-use-sub-superscripts nil)
       (setq org-yank-adjusted-subtrees t)

       (when (featurep 'unicode-fonts)
         (setq org-ellipsis "â¤µ"))

       ;; (setq org-columns-default-format "%50ITEM %12SCHEDULED %TODO %3PRIORITY %Effort{:} %TAGS")
       ;; (add-to-list 'org-global-properties
       ;;                          '("Effort_ALL". "0:05 0:15 0:30 1:00 2:00 3:00 4:00"))
       ;; (setq org-global-properties (quote (("Effort_ALL" . "0:10 0:30 1:00 2:00 3:00 4:00 5:00 6:00 7:00 8:00"))))
       ;; (setq org-drawers '("PROPERTIES" "LOGBOOK" "CLOCK" "FILES"))
     #+END_SRC
**** keywords setup
     #+BEGIN_SRC emacs-lisp :tangle yes
       (setq kw-seq-common '(sequence "BACKLOG(b)" "SOON(s)" "REPEAT(r)" "GOING(g!)" "NEXT(x)" "WAITING(w@/!)" "FEEDBACK"
                                      "|" "DONE(d!/@)" "CANCELLED(c@/!)" "OUTDATED(o)"))
       (setq org-todo-keywords
             `(,kw-seq-common))
       (setq org-todo-keywords-for-agenda '("BACKLOG(b)" "SOON(s)" "REPEAT(r)" "GOING(g!)" "NEXT(x)" "WAITING(w@/!)" "FEEDBACK"))
       (setq org-done-keywords-for-agenda '("DONE(d)" "CANCELLED(c)" "OUTDATED(o)"))
     #+END_SRC
**** faces
     #+BEGIN_SRC emacs-lisp :tangle yes
       (setq org-todo-keyword-faces
             '(("BACKLOG" . (:foreground "gray" :weight bold))
               ("SOON" . (:foreground "magenta" :weight bold))
               ("REPEAT" . (:foreground "blue" :weight bold))
               ("NEXT" . (:foreground "red" :weight bold))
               ("WAITING" . (:foreground "orange" :weight bold))
               ("FEEDBACK" . (:foreground "yellow" :weight bold))
               ("CANCELLED" . (:foreground "cyan" :weight bold))
               ("DONE" . (:foreground "green" :weight bold))))

       (setq org-priority-faces
             '((?A :foreground "red" :weight bold)
               (?B :foreground "#94bff3" :weight bold)
               (?C :foreground "#6f6f6f")
               (?D :foreground "#c390d4")
               (?E :foreground "#90c3d4")
               (?F :foreground "#a1d490")))

       (set-face-attribute 'org-done nil :foreground "PaleGreen" :weight 'normal :strike-through t)
       (set-face-attribute 'org-headline-done nil :foreground "LightSalmon" :weight 'normal :strike-through t)
     #+END_SRC
**** tags
     #+BEGIN_SRC emacs-lisp :tangle yes
       (setq org-tag-alist '(("current" . ?c)
                             ("reference" . ?f)
                             ("orgmode" . ?g)
                             ("purchase" . ?p)
                             ("master" . ?m)
                             ("ordering" . ?o)
                             ("housekeeping" . ?h)
                             ("entertainment" . ?e)
                             ("interesting" . ?i)
                             ("repair" . ?r)
                             ))
       (setq org-tags-exclude-from-inheritance '("project"))

       (setq org-todo-state-tags-triggers
             '(("GOING" ("current" . t))
               ("DONE" ("current"))))

       (setq org-complete-tags-always-offer-all-agenda-tags t)
     #+END_SRC
***** BACKLOG review whole tags cloud (in org corpus) and update org-tag-alist accordingly
**** org-habit
     #+BEGIN_SRC emacs-lisp :tangle yes
       (setq org-habit-graph-column 50)
       (setq org-habit-preceding-days 10)
       (setq org-habit-following-days 4)
       (setq org-habit-show-habits-only-for-today nil)
     #+END_SRC
**** org-capture
     org-id usage example for the future:
     "* TODO___ %a\n  :PROPERTIES:\n  :ID: %(org-id-new)\n  :END:\n  %U\n\n  %i"
     #+BEGIN_SRC emacs-lisp :tangle yes
       (setq org-capture-templates
             '(("q" "quick notes (uncategorized)" entry (file (at-org-dir "/refile.org")) "* %? %U :@quicknote:")
               ("w" "workplace")
               ("wt" "workplace try" entry (file+olp (at-org-dir "/workplace.org") "workplace" "tools reference") "* %? %U :@workplace:try")
               ("wd" "workplace tasks" entry (file+olp (at-org-dir "/workplace.org") "workplace" "tasks") "* BACKLOG [#C] %? %U :@workplace:")
               ("we" "emacs")
               ("wed" "emacs todo" entry (file+olp (at-org-dir "/workplace.org") "emacs" "tickets") "* BACKLOG [#C] %? %U :emacs:ticket:")
               ("wet" "emacs try" entry (file+olp (at-org-dir "/workplace.org") "emacs" "to try") "* %? %U :emacs:try:")
               ("wef" "emacs foreign configs" entry (file+olp (at-org-dir "/workplace.org") "emacs" "foreign configs") "* %? %U :emacs-config:")
               ("ws" "StumpWM")
               ("wsc" "stumpwm todo" entry (file+olp (at-org-dir "/workplace.org") "StumpWM" "tickets") "* BACKLOG [#C] %? %U :stumpwm:ticket:")
               ("wsf" "stumpwm foreign configs" entry (file+olp (at-org-dir "/workplace.org") "StumpWM" "foreign configs") "* %? %U :stumpwm-config:")
               ("wa" "awesome config" entry (file+olp (at-org-dir "/workplace.org") "AwesomeWM" "foreign configs") "* %? %U :awesome-config:")
               ("w." "dotfiles" entry (file+headline (at-org-dir "/workplace.org") "foreign dotfiles") "* %? %U :dotfiles:")
               ("j" "job tasks")
               ("jc" "current" entry (file (at-org-dir private/job-tasks-file)) "* SOON %? %U :@job:current:")
               ("jb" "bug" entry (file (at-org-dir private/job-tasks-file)) "* SOON %? %U :@job:bug:")
               ("jr" "reference item" entry (file (at-org-dir private/job-tasks-file)) "* %? %U :@job:reference:")
               ("jp" "project" entry (file (at-org-dir private/job-tasks-file)) "* BACKLOG %? %U :@job:project:")
               ("l" "links")
               ("la" "links" entry (file (at-org-dir "/links.org")) "* %? %U :links:send:")
               ("ld" "deferred tabs" entry (file+olp custom/org-browser-tabs "groups" "deferred tabs") "* %? %U :deferred:")
               ("p" "projects")
               ("pi" "project ideas" entry (file (at-org-dir "/projects.org")) "* %? %U :@project:idea:")
               ("pn" "new project" entry (file (at-org-dir "/projects.org")) "* %? %U :@project:")
               ("i" "sink")
               ("ia" "newspaper articles" entry (file (at-org-dir "/sink.org")) "* %? %U :newspaper:toread:")
               ("ic" "code snippet" entry (file (at-org-dir "/sink.org"))
                "* %^{title} %^g :code_snippet:\n :PROPERTIES:\n :CREATED: %U\n :END:\n\n#+BEGIN_SRC %^{lang}\n %i%?\n#+END_SRC\n")
               ("is" "search" entry (file (at-org-dir "/sink.org")) "* %? %U :search:")
               ("g" "github")
               ("gc" "common" entry (file (at-org-dir "/github.org")) "* %? %U :github:")
               ("gl" "CL repo to review" entry (file (at-org-kb-dir "/cl-repos.org")) "* %? %U :github:common_lisp:")
               ("m" "mastering" entry (file+headline (at-org-dir "/mastering.org") "inbox") "* %? %U")
               ))
     #+END_SRC
**** holidays
     #+BEGIN_SRC emacs-lisp :tangle yes
       (req-package russian-holidays
         :config
         (setq calendar-holidays
               (push russian-holidays calendar-holidays)))

       (setq holiday-orthodox-holidays nil) ; Orthodox holidays to some extent
       (setq holiday-personal-holidays nil) ; personal anniversaries, etc.

       (setq holiday-other-holidays
             (append holiday-orthodox-holidays holiday-personal-holidays))

       (setq calendar-holidays
             (append holiday-other-holidays
                     holiday-solar-holidays))
     #+END_SRC
**** hooks
     #+BEGIN_SRC emacs-lisp :tangle yes
       (add-hook 'org-mode-hook 'turn-on-font-lock)
       (add-hook 'org-mode-hook 'org-bullets-mode)
       (add-hook 'org-clock-out-hook 'custom/remove-empty-drawer-on-clock-out 'append)
       (add-hook 'org-after-refile-insert-hook 'save-buffer)
     #+END_SRC
**** run some commands
     #+BEGIN_SRC emacs-lisp :tangle yes
       (run-at-time nil 60 'org-save-all-org-buffers)
       (org-add-link-type "tag" 'custom/follow-tag-link)
       (org-clock-persistence-insinuate) ;; Resume clocking tasks when emacs is restarted
       (run-at-time "06:00" 86400 '(lambda () (setq org-habit-show-habits t)))
       (run-with-idle-timer 1800 t 'custom/jump-to-custom-agenda-random)
       (set-charset-priority 'unicode)
       (turn-on-orgtbl)

       (org-babel-do-load-languages
        'org-babel-load-languages
        '((css . t)
          (dot . t)
          (ditaa . t)
          (emacs-lisp . t)
          (lisp . t)
          (js . t)
          (latex . t)
          (org . t)
          (plantuml . t)
          (scheme . t)
          (sh . t)))
     #+END_SRC
**** keybindings
     #+BEGIN_SRC emacs-lisp :tangle yes
       (bind-key "<f7> ." 'org-agenda-clock-in org-agenda-mode-map)
       (bind-key "<f7> ," 'org-agenda-clock-out org-agenda-mode-map)
       (bind-key "<f7> o" 'ace-link-org org-agenda-mode-map)
       (bind-key "M-o" 'ace-link-org org-mode-map)

       (bind-key "C-'" nil org-mode-map)
       (bind-key "C-c [" nil org-mode-map)
       (bind-key "C-c ]" nil org-mode-map)
       (bind-key "C-c C-o" nil org-mode-map)
     #+END_SRC
*** try
**** excerpt from sachac
     #+BEGIN_SRC emacs-lisp :tangle no
       ;; review
       (use-package org
         :init
         (setq org-clock-idle-time nil)
         (setq org-log-done 'time)
         (setq org-clock-continuously nil)
         (setq org-clock-persist t)
         (setq org-clock-in-switch-to-state "STARTED")
         (setq org-clock-in-resume nil)
         (setq org-show-notification-handler 'message)
         (setq org-clock-report-include-clocking-task t)
         :config
         (org-clock-persistence-insinuate))

       (add-hook 'org-clock-in-prepare-hook
                 'my/org-mode-ask-effort)

       (defun my/org-mode-ask-effort ()
         "Ask for an effort estimate when clocking in."
         (unless (org-entry-get (point) "Effort")
           (let ((effort
                  (completing-read
                   "Effort: "
                   (org-entry-get-multivalued-property (point) "Effort"))))
             (unless (equal effort "")
               (org-set-property "Effort" effort)))))

       (defun my/org-agenda-new ()
         "Create a new note or task at the current agenda item.
       Creates it at the same level as the previous task, so it's better to use
       this with to-do items than with projects or headings."
         (interactive)
         (org-agenda-switch-to)
         (org-capture 0))
       ;; New key assignment
       (bind-key "N" 'my/org-agenda-new org-agenda-mode-map)

       (setq org-agenda-sorting-strategy
             '((agenda time-up priority-down tag-up effort-up category-keep)
               (todo user-defined-up todo-state-up priority-down effort-up)
               (tags user-defined-up)
               (search category-keep)))

       (defun my/org-gcal-notify (title mes)
         (message "%s - %s" title mes))
       (use-package org-gcal
         :load-path "~/elisp/org-gcal.el"
         :init (fset 'org-gcal-notify 'my/org-gcal-notify))

       (setq org-export-with-section-numbers nil)
       (setq org-html-include-timestamps nil)
       (setq org-export-with-sub-superscripts nil)
       (setq org-export-with-toc nil)
       (setq org-html-toplevel-hlevel 2)
       (setq org-export-htmlize-output-type 'css)

       (if (string= system-name "webdev")
               (setq my/emacs-notes-directory "~/code/dev/emacs-notes")
           (setq my/emacs-notes-directory "c:/sacha/code/dev/emacs-notes"))
       (setq org-publish-project-alist
                   '(("public"
                        :base-directory "c:/sacha/Dropbox/public"
                        :publishing-directory "c:/sacha/Dropbox/public"
                        :publishing-function my/org-html-publish-to-html-trustingly
                        )
                       ("sharing"
                        :base-directory "c:/sacha/Dropbox/public/sharing"
                        :publishing-directory "c:/sacha/Dropbox/public/sharing"
                        :publishing-function my/org-html-publish-to-html-trustingly
                        )
                       ("emacs-config"
                        :base-directory "~/.emacs.d"
                        :publishing-directory "~/.emacs.d"
                        :publishing-function my/org-html-publish-to-html-trustingly
                        )
                       ("book-notes"
                        :base-directory "c:/sacha/Dropbox/books"
                        :publishing-directory "c:/sacha/Dropbox/books/html"
                        :publishing-function my/org-html-publish-to-html-trustingly
                        :makeindex t)))
       (load "~/code/dev/emacs-chats/build-site.el" t)
       (load "~/code/dev/emacs-notes/build-site.el" t)

       (defun my/org-publish-maybe ()
         (interactive)
         (save-excursion
           (if (org-publish-get-project-from-filename
                        (buffer-file-name (buffer-base-buffer)) 'up)
                       (org-publish-current-file t)
                   (my/org-html-export-trustingly))))
       (bind-key "C-c C-p C-p" 'my/org-publish-maybe org-mode-map)

       (defun my/org-publish-and-browse ()
         (interactive)
         (save-buffer)
         (my/org-publish-maybe)
         (browse-url (org-export-output-file-name ".html" nil default-directory)))
       (bind-key "<apps> b" 'my/org-publish-and-browse)

       (setq org-html-checkbox-type 'unicode)
       (setq org-html-checkbox-types
                   '((unicode (on . "<span class=\"task-done\">&#x2611;</span>")
                                        (off . "<span class=\"task-todo\">&#x2610;</span>")
                                        (trans . "<span class=\"task-in-progress\">[-]</span>"))))

       (setq org-attach-store-link-p 'attached)

       (setq org-startup-with-inline-images t)

       (add-hook 'org-babel-after-execute-hook 'org-display-inline-images)

       (defun my/org-summarize-task-status ()
         "Count number of tasks by status.
       Probably should make this a dblock someday."
         (interactive)
         (let (result)
           (org-map-entries
            (lambda ()
              (let ((todo (elt (org-heading-components) 2)))
                (if todo
                    (if (assoc todo result)
                        (setcdr (assoc todo result)
                                (1+ (cdr (assoc todo result))))
                      (setq result (cons (cons todo 1) result)))))))
           (message "%s" (mapconcat (lambda (x) (format "%s: %d" (car x) (cdr x)))
                                    result "\n"))))

       (setq org-src-window-setup 'current-window)

       (defun my/copy-code-as-org-block-and-gist (beg end)
         (interactive "r")
         (let ((filename (file-name-base))
               (mode (symbol-name major-mode))
               (contents
                (if (use-region-p) (buffer-substring beg end) (buffer-string)))
               (gist (if (use-region-p) (gist-region beg end) (gist-buffer))))
           (kill-new
            (format "\n[[%s][Gist: %s]]\n#+begin_src %s\n%s\n#+end_src\n"
                    (oref (oref gist :data) :html-url) filename
                    (replace-regexp-in-string "-mode$" "" mode)
                    contents))))

       (defun my/org-archive-done-tasks ()
         "Archive finished or cancelled tasks."
         (interactive)
         (org-map-entries
          (lambda ()
            (org-archive-subtree)
            (setq org-map-continue-from (outline-previous-heading)))
          "TODO=\"DONE\"|TODO=\"CANCELLED\"" (if (org-before-first-heading-p) 'file 'tree)))

       ;;TODO: think of autosaving org files after refiling/status changes/etc

       (use-package org-fstree
         :ensure t
         :defer t
         :commands (org-fstree-apply-maybe org-fstree-show-entry-maybe)
         :idle
         (progn (add-hook 'org-ctrl-c-ctrl-c-hook 'org-fstree-apply-maybe)
                (add-hook 'org-pre-cycle-hook 'org-fstree-show-entry-maybe)))

       (use-package ox-reveal :disabled t)

       ;;TODO: bind org-store-link and org-insert-link-global
     #+END_SRC
**** open pdf
     #+BEGIN_SRC elisp
       (add-to-list 'org-file-apps '("\\.pdf\\'" . (org-pdfview-open link)))
       (add-to-list 'org-file-apps '("\\.pdf::\\(\\d+\\)\\'" . (org-pdfview-open link)))
     #+END_SRC
**** agenda navigation
     #+BEGIN_SRC emacs-lisp :tangle no
     (defun air-org-agenda-next-header ()
       "Jump to the next header in an agenda series."
       (interactive)
       (air--org-agenda-goto-header))

     (defun air-org-agenda-previous-header ()
       "Jump to the previous header in an agenda series."
       (interactive)
       (air--org-agenda-goto-header t))

     (defun air--org-agenda-goto-header (&optional backwards)
       "Find the next agenda series header forwards or BACKWARDS."
       (let ((pos (save-excursion
                    (goto-char (if backwards
                                   (line-beginning-position)
                                 (line-end-position)))
                    (let* ((find-func (if backwards
                                          'previous-single-property-change
                                        'next-single-property-change))
                           (end-func (if backwards
                                         'max
                                       'min))
                           (all-pos-raw (list (funcall find-func (point) 'org-agenda-structural-header)
                                              (funcall find-func (point) 'org-agenda-date-header)))
                           (all-pos (cl-remove-if-not 'numberp all-pos-raw))
                           (prop-pos (if all-pos (apply end-func all-pos) nil)))
                      prop-pos))))
         (if pos (goto-char pos))
         (if backwards (goto-char (line-beginning-position)))))
     #+END_SRC

**** my-org-region-to-property
     #+BEGIN_SRC emacs-lisp :tangle no
       (defun org-read-entry-property-name ()
         "Read a property name from the current entry."
         (let ((completion-ignore-case t)
               (default-prop (or (and (org-at-property-p)
                                      (org-match-string-no-properties 2))
                                 org-last-set-property)))
           (org-completing-read
            (format "Property [%s]: " (if default-prop default-prop ""))
            (org-entry-properties nil nil)
            nil nil nil nil default-prop)))

       (defun my-org-region-to-property (&optional property)
         "Copies the region as value to an Org-mode property"
         (interactive)
         ;; if no region is defined, do nothing
         (if (use-region-p)
             ;; if a region string is found, ask for a property and set property to
             ;; the string in the region
             (let ((val (replace-regexp-in-string
                         "\\`[ \t\n]*" ""
                         (replace-regexp-in-string "[ \t\n]*\\'" ""
                                                   (substring (buffer-string)
                                                              (- (region-beginning) 1)
                                                              (region-end))))
                        )
                   ;; if none was stated by user, read property from user
                   (prop (or property
                             (org-read-entry-property-name))))
               ;; set property
               (org-set-property prop val))))
     #+END_SRC
**** #'org-tags-completion-function
**** file+datetree navigation
     #+BEGIN_SRC emacs-lisp :tangle no
       (goto-char (org-find-olp (list "2016" "2016-01 January") 't))
       (goto-char (org-find-exact-headline-in-buffer "2016-01 January"))
     #+END_SRC
**** org-protocol + capture
     :PROPERTIES:
     :ID:       556df909-6821-4384-b2ae-1ddfaf8edde7
     :END:
     #+BEGIN_SRC emacs-lisp :tangle no
       (req-package org-protocol
         :config
         (defun custom/org-protocol-handler ()
           "Create a new frame and run org-capture."
           (interactive)
           (make-frame '((name . "capture")))
           (select-frame-by-name "capture")
           (delete-other-windows)
           (noflet ((switch-to-buffer-other-window (buf) (switch-to-buffer buf)))
             (org-capture)))
         (pushnew org-protocol-protocol-alist
                  '(("capture"
                     :protocol "capture"
                     :function custom/org-protocol-handler))))
     #+END_SRC
     #+BEGIN_SRC emacs-lisp :tangle no
       (defadvice org-capture-finalize
           (after delete-capture-frame activate)
         "Advise capture-finalize to close the frame"
         (if (equal "capture" (frame-parameter nil 'name))
             (delete-frame)))

       (defadvice org-capture-destroy
           (after delete-capture-frame activate)
         "Advise capture-destroy to close the frame"
         (if (equal "capture" (frame-parameter nil 'name))
             (delete-frame)))
     #+END_SRC
**** BACKLOG org-log-re{schedule, deadline}
** sauron
   #+BEGIN_SRC emacs-lisp :tangle yes
     (req-package sauron
       :disabled t ; TODO play extensively with package, then likely enable
       :config
       (setq sauron-separate-frame nil)
       (setq sauron-hide-mode-line t)
       (setq sauron-max-line-length 200)
       (setq sauron-modules
             '(sauron-erc sauron-dbus sauron-org sauron-notifications))
       (add-hook 'sauron-event-added-functions 'sauron-fx-notify)
       (bind-key "C-c r t" 'sauron-toggle-hide-show)
       (bind-key "C-c r c" 'sauron-clear)
       (sauron-start))
   #+END_SRC
** hydras
   #+BEGIN_SRC emacs-lisp :tangle yes
     (defhydra hydra-pim ()
       "
       BBDB                        Various
       --------------------------------------------------------
       _b_ as it is                _o_ calendar
       _c_ create                  _k_ show keys frequencies
       _u_ delete current record   _d_ deft
       _D_ quit deft
       "
       ("b" bbdb)
       ("c" bbdb-create)
       ("u" bbdb-delete-current-record)
       ("o" custom/calfw-open-calendar)
       ("k" keyfreq-show)
       ("d" deft)
       ("D" custom/deft/quit-deft)
       ("q" nil))
     (global-set-key (kbd "C-c c") 'hydra-pim/body)

     ;;TODO: update docstring
     (defhydra hydra-org-global (:color teal)
       "
       ^Control^                 ^Editing^            ^Context^               ^Movement^
       ---------------------------------------------------------------------------------------------------------
       _g_oto clock              captur_e_            _a_genda                _<right>_ next visible heading
       _._ clock in              _w_ store link       dash_b_oard             _<left>_  prev visible heading
       _,_ clock out             _y_ank link          re_v_eal                _<down>_  forward same level
       _\^_ recently clocked     _S_et property       _f_ ace-link            _<up>_    backward same level
       _c_ancel clock            _D_elete property    _n_arrow to subtree     heading _u_p
       _d_isplay clocktime       footnote _A_ction    _-_ sparse tree         recent _H_eadings
       _R_eport clocks           _r_efile             agenda _h_eadings       Org _G_oto
       _p_omodoro                create _T_able       _=_ todo tree
       _s_chedule                                     _2_ random agenda
       _|_ deadline
       _i_ add time to TS
       _t_oggle TS type

       _\?_ clocking commands
       "
       ("g" org-clock-goto)
       ("." org-clock-in)
       ("," org-clock-out)
       ("^" org-mru-clock-select-recent-task)
       ("c" org-clock-cancel)
       ("d" org-clock-display)
       ("R" org-clock-report)
       ("p" org-pomodoro)
       ("s" org-schedule :color blue)
       ("|" org-deadline :color blue)
       ("i" custom/org-update-timestamp-with-time)
       ("t" org-toggle-timestamp-type)
       ("e" org-capture :color blue)
       ("w" org-store-link)
       ("y" org-insert-link-global)
       ("S" org-set-property)
       ("D" org-delete-property)
       ("A" org-footnote-action)
       ("r" org-refile "refile")
       ("T" org-table-create)
       ("a" org-agenda :color blue)
       ("b" org-dashboard-display :color blue)
       ("v" org-reveal "reveal")
       ("f" ace-link-org :color blue)
       ("n" org-narrow-to-subtree)
       ("-" org-sparse-tree)
       ("h" counsel-org-agenda-headlines)
       ("H" org-recent-headings-ivy)
       ("=" org-show-todo-tree)
       ("\\" counsel-org-tag)
       ("2" custom/jump-to-custom-agenda-random "show random custom agenda")
       ("<right>" outline-next-visible-heading "next heading")
       ("<left>" outline-previous-visible-heading "prev heading")
       ("<down>" org-forward-heading-same-level "next heading at same level")
       ("<up>" org-backward-heading-same-level "prev heading at same level")
       ("u" outline-up-heading "up heading")
       ("G" org-goto "goto" :exit t)
       ("?" (org-info "Clocking commands") "")
       ("q" nil "cancel"))
     (global-set-key (kbd "<f7>") 'hydra-org-global/body)
   #+END_SRC
* publishing
** setup
   #+BEGIN_SRC emacs-lisp :tangle yes
     (req-package pdf-tools
       :require tablist let-alist
       :mode ("\\.pdf$" . pdf-view-mode)
       :config
       (add-hook 'after-init-hook 'pdf-tools-install)
       (defun custom/scroll-other-window (&optional arg)
         (interactive "P")
         (awhen (ignore-errors (other-window-for-scrolling))
           (let* ((buffer (window-buffer it))
                  (mode (with-current-buffer buffer major-mode)))
             (cond
              ((eq mode 'pdf-view-mode)
               (save-selected-window
                 (select-window it)
                 (with-current-buffer buffer
                   (pdf-view-next-page (cond ((eq arg '-) -1)
                                             ((numberp arg) arg)
                                             (t 1))))))
              (t (scroll-other-window arg))))))
       (global-set-key (kbd "C-M-v") #'custom/scroll-other-window))

     (req-package whizzytex
       :config
       (setq-default whizzy-viewers '(("-dvi" "xdvi") ("-ps" "gv"))))

     (req-package reftex
       :config
       (setq reftex-enable-partial-scans t)
       (setq reftex-save-parse-info t)
       (setq reftex-use-multiple-selection-buffers t)
       (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
       (add-hook 'latex-mode-hook 'turn-on-reftex))

     ;;TODO: maybe handle interdependencies between below features of auctex package
     ;; At the moment it works just fine, but there is no warranty.
     (req-package tex
       :config
       (setq-default TeX-master nil)
       (setq TeX-parse-self t)
       (setq TeX-default-mode 'latex-mode)
       (setq TeX-open-quote "``")
       (setq TeX-close-quote "''")
       (setq TeX-PDF-mode t)
       (add-to-list 'safe-local-variable-values '(TeX-open-quote . "<<"))
       (add-to-list 'safe-local-variable-values '(TeX-close-quote . ">>"))
       (add-hook 'TeX-mode-hook 'custom/tex-mode-hook))

     (req-package bib-cite
       :config
       (req-package tex-fold)
       (setq TeX-auto-save t)
       (defun custom/tex-mode-hook ()
         (TeX-fold-mode 1)
         (turn-on-bib-cite)
         (setq bib-cite-use-reftex-view-crossref t)))

     (req-package latex
       :mode ("\\.tex$" . latex-mode)
       :config
       (add-hook 'LaTeX-mode-hook 'custom/tex-mode-hook)
       (add-hook 'LaTeX-mode-hook 'TeX-PDF-mode)
       (add-hook 'LaTeX-mode-hook 'visual-line-mode)
       (add-hook 'LaTeX-mode-hook 'flyspell-mode)
       (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode))

     (req-package tex-site)
     (req-package company-auctex)

     (req-package cdlatex
       :config
       (add-hook 'LaTeX-mode-hook 'turn-on-cdlatex)
       (add-hook 'latex-mode-hook 'turn-on-cdlatex))

     (req-package latex-preview-pane)

     (setq font-latex-title-fontify 'color)      ; this gets rid of the large fonts
     (setq font-latex-fontify-sectioning 'color) ; in sections etc

     (setq ps-multibyte-buffer 'bdf-font-except-latin)

     (defvar ps-print-path "~/ps-print"
       "Path for ps-print output")

     ;;TODO: plan docstring or reorganize hydra
     (defhydra hydra-publishing ()
       ("w" whizzytex-mode)
       ("p" custom/ps-print-buffer-with-faces)
       ("P" custom/ps-print-region-with-faces)
       ("s" pdf-save-buffer-with-faces)
       ("S" pdf-save-region-with-faces)
       ("q" nil))
     (global-set-key (kbd "C-c n") 'hydra-publishing/body)

     ;; TODO: investigate TEXT_INPUTS usage
     ;; TODO: fix encoding issues (questions marks instead of russian letters)
     ;; TODO: investigate how to deal with bright letters on bright
     ;; background being printed (in such cases letters are almost invisible)
   #+END_SRC
** linux traits
   #+BEGIN_SRC emacs-lisp :tangle (if (eq system-type 'gnu/linux) "no" "no")
     (setq TeX-output-view-style '(("^pdf$" "." "zathura %s.pdf")
                                   ("^html?$" "." "open %o")))
   #+END_SRC
** darwin traits
   #+BEGIN_SRC emacs-lisp :tangle (if (eq system-type 'darwin) "no" "no")
     (setq TeX-output-view-style '(("^pdf$" "." "open -a preview %s.pdf")
                                   ("^html?$" "." "open %o")))
   #+END_SRC
* help
  #+BEGIN_SRC emacs-lisp :tangle yes
    (req-package info)
    (req-package info-buffer
      :bind (("C-h i" . info-buffer)))

    (req-package help+)

    (add-to-list 'Info-directory-list "/usr/share/info")

    (push "/usr/share/info" Info-directory-list)
    (setenv "MANPATH" "/usr/share/man:/usr/local/man")

    (defun custom/open-info (topic bname)
      "Open info on TOPIC in BNAME."
      (if (get-buffer bname)
          (progn
            (switch-to-buffer bname)
            (unless (string-match topic Info-current-file)
              (Info-goto-node (format "(%s)" topic))))
        (info topic bname)))

    (setq Info-additional-directory-list
          (list (concat home-directory "/help/info")))

    (defalias 'man 'woman) ;'Woman' offers completion better than 'man'.

    (defhydra hydra-apropos (:color blue)
      "
      Apropos
      ---------------
      _a_s it is =)
      _d_ocumentation
      _v_ariable
      _c_ommand
      _l_ibrary
      _u_ser option
      _i_nfo
      _t_ags
      valu_e_
      "
      ("a" apropos)
      ("d" apropos-documentation)
      ("v" apropos-variable)
      ("c" apropos-command)
      ("l" apropos-library)
      ("u" apropos-user-option)
      ("i" info-apropos "info")
      ("t" tags-apropos "tags")
      ("e" apropos-value))
    (global-set-key (kbd "C-c h") 'hydra-apropos/body)

    (defhydra hydra-info-to (:hint nil :color teal)
      "
      _o_rg _e_lisp e_m_acs _h_yperspec"
      ("o" (custom/open-info "org" "*org info*"))
      ("e" (custom/open-info "elisp" "*elisp info*"))
      ("m" (custom/open-info "emacs" "*emacs info*"))
      ("h" (custom/open-info "gcl" "*hyperspec*")))
    (global-set-key (kbd "C-c C-h") 'hydra-info-to/body)
  #+END_SRC
* try
** kenobi
   #+BEGIN_SRC emacs-lisp :tangle no
     ;; https://gist.github.com/nyergler/6100112

     (add-hook 'hack-local-variables-hook 'run-local-vars-mode-hook)
     (defun run-local-vars-mode-hook ()
       "Run a hook for the major-mode after the local variables have been processed."
       (run-hooks (intern (concat (symbol-name major-mode) "-local-vars-hook"))))


     (defun detect_buffer_venv (buffer-name)
       (let ((buffer-dir (file-name-directory buffer-name)))
         (while (and (not (file-exists-p
                           (concat buffer-dir "py27/bin/activate")))
                     buffer-dir)
           (setq buffer-dir
                 (if (equal buffer-dir "/")
                     nil
                   (file-name-directory (directory-file-name buffer-dir)))))
         ;; return the buffer-dir (or nil)
         (concat buffer-dir "py27")))

     (defun detect_buffer_eggs_dirs (buffer-name)
       (let ((buffer-dir (file-name-directory buffer-name)))
         (while (and (not (file-exists-p
                           (concat buffer-dir "eggs")))
                     buffer-dir
                     )
           (setq buffer-dir
                 (if (equal buffer-dir "/")
                     nil
                   (file-name-directory (directory-file-name buffer-dir)))))
         (if buffer-dir
             (directory-files (concat buffer-dir "eggs") t ".\.egg")
           nil)))

     (setq additional_paths nil)

     (defun setup-jedi-extra-args ()
       (let ((venv (detect_buffer_venv buffer-file-name))
             (egg-dirs (detect_buffer_eggs_dirs buffer-file-name)))
         (make-local-variable 'jedi:server-args)
         (when venv (set 'jedi:server-args (list "--virtual-env" venv)))
         (when egg-dirs
           (dolist (egg egg-dirs)
             (set 'jedi:server-args (append jedi:server-args (list "--sys-path" egg))))))
       (make-local-variable 'additional_paths)
       (when additional_paths
         (dolist (path additional_paths)
           (set 'jedi:server-args (append jedi:server-args (list "--sys-path" path))))))

     (setq jedi:setup-keys t)

     (add-hook 'python-mode-local-vars-hook 'setup-jedi-extra-args)
     (add-hook 'python-mode-local-vars-hook 'jedi:setup)
   #+END_SRC
** the rest
   #+BEGIN_SRC emacs-lisp :tangle yes
     (define-namespace custom/

     ;;TODO: maybe make org-protocol solution instead
     (defun youtube-dl ()
       (interactive)
       (let* ((str (current-kill 0))
              (default-directory "~/Downloads")
              (proc (get-buffer-process (ansi-term "/bin/bash"))))
         (term-send-string
          proc
          (concat "cd ~/Downloads && youtube-dl " str "\n"))))

     )
   #+END_SRC
