#+TITLE: Wiedzmin's literate Emacs configuration
#+OPTIONS: toc:4 h:4

* bootstrapping
** path utils
   #+BEGIN_SRC emacs-lisp
     (setq home-directory (getenv "HOME"))
     (setq config-basedir
           (file-name-directory
            (or (buffer-file-name) load-file-name)))

     (defun at-homedir (&optional suffix)
       (concat home-directory suffix))

     (defun at-org-dir (&optional suffix)
       (concat (at-homedir "/docs/org") suffix))

     (defun at-org-kb-dir (&optional suffix)
         (concat (at-homedir "/docs/org-kb") suffix))

     (defun at-config-basedir (&optional suffix)
       (concat config-basedir suffix))
   #+END_SRC
**** TODO unify slashes usage
** working directories
   A bunch of directories for various working datasets
   As the order of loading corresponding extensions,
   is cumbersome to maintain we should customize them ASAP (here)
   #+BEGIN_SRC emacs-lisp
     (req-package no-littering
       :force t
       :require cl-lib
       :init
       (setq no-littering-var-directory
             (expand-file-name "data/" user-emacs-directory)))

   #+END_SRC
** input method utils (internal emacs keyboard layouts switching)
*** reverse input method
    it makes Emacs with non-English system keyboard layout
    to behave correctly with keybindings
    It definitely makes sense while using Emacs in such X WMs
    when there is no chance to hook into keyboard layouts switching
    (those are probably all, except StumpWM/XMonad, AFAIK)
    #+BEGIN_SRC emacs-lisp
      (defun reverse-input-method (input-method)
          "Build the reverse mapping of single letters from INPUT-METHOD."
          (interactive
           (list (read-input-method-name "Use input method (default current): ")))
          (if (and input-method (symbolp input-method))
                  (setq input-method (symbol-name input-method)))
          (let ((current current-input-method)
                      (modifiers '(nil (control) (meta) (control meta))))
              (when input-method
                  (activate-input-method input-method))
              (when (and current-input-method quail-keyboard-layout)
                  (dolist (map (cdr (quail-map)))
                      (let* ((to (car map))
                                   (from (quail-get-translation
                                                  (cadr map) (char-to-string to) 1)))
                          (when (and (characterp from) (characterp to))
                              (dolist (mod modifiers)
                                  (define-key local-function-key-map
                                      (vector (append mod (list from)))
                                      (vector (append mod (list to)))))))))
              (when input-method
                  (activate-input-method current))))
    #+END_SRC
*** toggling input method
    This method uses external kbdd utility
    #+BEGIN_SRC emacs-lisp :tangle no
      ;;TODO: maybe implement as advice
      (defun toggle-input-method ()
        "Toggle input method while keeping system keyboard layout in latin.
        Essential for WMs without this functionality built-in."
        (interactive)
        (toggle-input-method)
        (when (executable-find "kbdd")
          (start-process "dbus-send"
                         nil
                         "dbus-send"
                         "--dest=ru.gentoo.KbddService"
                         "/ru/gentoo/KbddService"
                         "ru.gentoo.kbdd.set_layout"
                         "uint32:1")))
    #+END_SRC
** Encryption
   #+BEGIN_SRC emacs-lisp
     (req-package epa
       :config
       (setq epg-gpg-program "gpg2")
       (epa-file-enable)
       (setq epg-gpg-home-directory "~/.gnupg"))
   #+END_SRC
** load various private credentials from GPG-encrypted file
   #+BEGIN_SRC emacs-lisp
     (load (at-config-basedir "credentials.el.gpg"))
   #+END_SRC
** set the very basic variable values
   #+BEGIN_SRC emacs-lisp
     (setq message-log-max t) ;; we don't want to lose any startup log info
     (setq global-username private/real-name)
     (setq shell-file-name "/bin/bash")
     (setq custom-file (at-config-basedir "customizations.el"))

     (setq diredp-hide-details-initially-flag nil) ;; otherwise we'll have very clipped dired info

     (reverse-input-method 'russian-computer)

     (fset 'yes-or-no-p 'y-or-n-p)
   #+END_SRC
** init essential packages
   #+BEGIN_SRC emacs-lisp
     (req-package auto-compile
       :config
       (auto-compile-on-load-mode 1)
       (auto-compile-on-save-mode 1)
       (setq auto-compile-display-buffer nil)
       (setq auto-compile-mode-line-counter t))

     (req-package f :force t :require s dash)
     (req-package diminish)
     (req-package names)
     (req-package anaphora)
   #+END_SRC
* appearance
** populate fonts inventory
   #+BEGIN_SRC emacs-lisp
     (define-namespace custom/

     (defvar fonts-def (make-hash-table :test 'equal)
       "User's font definitions")

     (defun set-xwindows-font (key)
       (set-face-attribute 'default nil :font (gethash key fonts-def)))

     (setf (gethash "consolas-base" fonts-def) "Consolas:size=12")
     (setf (gethash "terminus" fonts-def) "Terminus:size=14")
     (setf (gethash "terminus-bold" fonts-def) "TerminusBold:size=12")
     (setf (gethash "monaco" fonts-def) "Monaco:size=12")
     (setf (gethash "ptmono" fonts-def) "PTMono:size=12")
     (setf (gethash "microsoft-consolas-for-powerline-bold" fonts-def) "-microsoft-Consolas for Powerline-bold-normal-normal-*-*-*-*-*-m-0-iso10646-1")
     (setf (gethash "microsoft-consolas-for-powerline-normal" fonts-def) "-microsoft-Consolas for Powerline-normal-normal-normal-*-*-*-*-*-m-0-iso10646-1")
     (setf (gethash "microsoft-consolas-bold" fonts-def) "-microsoft-Consolas-bold-normal-normal-*-*-*-*-*-m-0-iso10646-1")
     (setf (gethash "microsoft-consolas-normal" fonts-def) "-microsoft-Consolas-normal-normal-normal-*-*-*-*-*-m-0-iso10646-1")
     (setf (gethash "dejavu-sans-mono-bold" fonts-def) "-unknown-DejaVu Sans Mono-bold-normal-normal-*-*-*-*-*-m-0-iso10646-1")
     (setf (gethash "dejavu-sans-mono-normal" fonts-def) "-unknown-DejaVu Sans Mono-normal-normal-normal-*-*-*-*-*-m-0-iso10646-1")
     (setf (gethash "freemono-bold" fonts-def) "-unknown-FreeMono-bold-normal-normal-*-*-*-*-*-m-0-iso10646-1")
     (setf (gethash "freemono-normal" fonts-def) "-unknown-FreeMono-normal-normal-normal-*-*-*-*-*-m-0-iso10646-1")
     (setf (gethash "liberation-mono-bold" fonts-def) "-unknown-Liberation Mono-bold-normal-normal-*-*-*-*-*-m-0-iso10646-1")
     (setf (gethash "liberation-mono-normal" fonts-def) "-unknown-Liberation Mono-normal-normal-normal-*-*-*-*-*-m-0-iso10646-1")
     (setf (gethash "bsvera-sans-mono" fonts-def) "Bitstream Vera Sans Mono:size=12")
     (setf (gethash "hack-regular" fonts-def) "Hack:size=12")
     (setf (gethash "fantasque" fonts-def) "Fantasque Sans Mono:size=14")
     (setf (gethash "sourcepro" fonts-def) "Source Code Pro:style=Bold:size=13")

     )
   #+END_SRC
** setup smart modeline
   #+BEGIN_SRC emacs-lisp
     (req-package smart-mode-line
       :require rich-minority
       :config
       (setq sml/no-confirm-load-theme t)
       (setq sml/theme 'respectful)
       (setq sml/battery-format " %p%% ")
       (sml/setup)
       (set-face-attribute 'sml/discharging nil :foreground "tomato"))
   #+END_SRC
** load themes and choose one
   Also some other good-looking themes are "deep-thought-theme" and "material-theme"
   #+BEGIN_SRC emacs-lisp
     (req-package darkburn-theme)
     (load-theme 'darkburn t)
   #+END_SRC
** set common colors
   #+BEGIN_SRC emacs-lisp
     (defvar bg-colors "emacs background colors list")
     (defvar fg-colors "emacs foreground colors list")

     (setq bg-colors '("cornsilk" "gray0" "gray18" "gray40"))
     (setq fg-colors '("gainsboro" "navy"))
     (setq mouse-colors '("firebrick" "yellow"))

     (set-cursor-color "chartreuse2")
   #+END_SRC
** setup fonts
   #+BEGIN_SRC emacs-lisp
     (setq font-lock-maximum-decoration t)
     (setq scalable-fonts-allowed t)

     (custom/set-xwindows-font "consolas-base")

     (req-package unicode-fonts
       :disabled t
       :config
       (unicode-fonts-setup))
   #+END_SRC
** update some faces values
   Providing dark enough colors, unless we are using an appropriate theme, Darkburn, for example
   #+BEGIN_SRC emacs-lisp :tangle no
     (when (boundp 'zenburn-colors-alist)
       (set-face-attribute 'default nil :background "#1A1A1A")
       (set-face-attribute 'region nil :background (cdr (assoc "zenburn-bg-2" zenburn-colors-alist))))
   #+END_SRC
* persistence
** save history
   #+BEGIN_SRC emacs-lisp
     (req-package savehist
       :force t
       :config
       (setq savehist-save-minibuffer-history t)
         (setq savehist-autosave-interval 60)
         (setq history-length t)
         (setq history-delete-duplicates t)
       (setq savehist-additional-variables
             '(kill-ring
               search-ring
               regexp-search-ring))
       (savehist-mode t))
   #+END_SRC
** maintain recent files
   #+BEGIN_SRC emacs-lisp
     (req-package recentf
       :require recentf-ext
       :defer t
       :config
       (setq recentf-max-saved-items 250)
       (setq recentf-max-menu-items 15)
       (recentf-mode t))
   #+END_SRC
** backups
   #+BEGIN_SRC emacs-lisp
     (setq auto-save-visited-file-name t)
     (setq backup-by-copying t)
     (setq backup-by-copying-when-linked t)
     (setq delete-old-versions -1)
     (setq version-control t)

     (req-package backup-walker) ;TODO: bind to key and other stuff
   #+END_SRC
** lock files
   Simultaneous edits still will be detected when saving is made. But disabling lock files prevents our working
   dirs from being clobbered with.
   #+BEGIN_SRC emacs-lisp
     (setf create-lockfiles nil)
   #+END_SRC
** desktop
   #+BEGIN_SRC emacs-lisp
     (req-package desktop
       :config
       (setq-default desktop-missing-file-warning nil)
       (setq-default desktop-path '("~"))
       (setq-default desktop-save t)
       (setq-default desktop-save-mode t)
       (setq-default save-place t)
       (setq history-length t)
       (setq history-delete-duplicates t)
       (setq desktop-buffers-not-to-save
             (concat "\\(" "^nn\\.a[0-9]+\\|\\.log\\|(ftp)\\|^tags\\|^TAGS"
                     "\\|\\.emacs.*\\|\\.diary\\|\\.newsrc-dribble\\|\\.bbdb"
                     "\\)$"))
       (add-hook 'auto-save-hook (lambda () (desktop-save-in-desktop-dir)))
       (desktop-save-mode t)
       (setq desktop-restore-eager 10)
       (desktop-load-default)

       (add-to-list 'desktop-globals-to-save '(buffer-name-history      . 100))
       (add-to-list 'desktop-globals-to-save '(dired-regexp-history     . 20))
       (add-to-list 'desktop-globals-to-save '(extended-command-history . 100))
       (add-to-list 'desktop-globals-to-save '(file-name-history        . 500))
       (add-to-list 'desktop-globals-to-save '(grep-history             . 50))
       (add-to-list 'desktop-globals-to-save '(minibuffer-history       . 100))
       (add-to-list 'desktop-globals-to-save '(query-replace-history    . 60))
       (add-to-list 'desktop-globals-to-save '(read-expression-history  . 60))
       (add-to-list 'desktop-globals-to-save '(regexp-history           . 60))
       (add-to-list 'desktop-globals-to-save '(regexp-search-ring       . 20))
       (add-to-list 'desktop-globals-to-save '(search-ring              . 20))
       (add-to-list 'desktop-globals-to-save '(shell-command-history    . 50))
       (add-to-list 'desktop-globals-to-save 'file-name-history)

       (add-to-list 'desktop-locals-to-save 'buffer-file-coding-system)
       (add-to-list 'desktop-locals-to-save 'tab-width)
       (add-to-list 'desktop-locals-to-save 'buffer-file-coding-system)

       (add-to-list 'desktop-modes-not-to-save 'dired-mode)
       (add-to-list 'desktop-modes-not-to-save 'Info-mode)
       (add-to-list 'desktop-modes-not-to-save 'info-lookup-mode)
       (add-to-list 'desktop-modes-not-to-save 'fundamental-mode))
   #+END_SRC
* common
** emacs server
*** defininitions
    #+BEGIN_SRC emacs-lisp
      (define-namespace custom/

      (defun server-save-edit ()
          (interactive)
          (save-buffer)
          (server-edit))

      (defun save-buffer-clients-on-exit ()
          (interactive)
          (if (and (boundp 'server-buffer-clients) server-buffer-clients)
                  (server-save-edit)
              (save-buffers-kill-emacs t)))

      )
    #+END_SRC
*** setup
    #+BEGIN_SRC emacs-lisp
      (add-hook 'server-visit-hook
                (lambda () (local-set-key (kbd "C-c C-c") 'custom/server-save-edit)))
      ;; (add-hook 'kill-emacs-hook 'custom/save-buffer-clients-on-exit)

      (unless (and (string-equal "root" (getenv "USER"))
                   (server-running-p))
        ;; Only start server mode if I'm not root and it is not running
        (require 'server)
        (server-start))
    #+END_SRC
** some keyboard related stuff
   #+BEGIN_SRC emacs-lisp
     (defun keys-describe-prefixes ()
       (interactive)
       (with-output-to-temp-buffer "*Bindings*"
         (dolist (letter-group (list
                                (cl-loop for c from ?a to ?z
                                         collect (string c))
                                (cl-loop for c from ?α to ?ω
                                         collect (string c))))
           (dolist (prefix '("" "C-" "M-" "C-M-"))
             (princ (mapconcat
                     (lambda (letter)
                       (let ((key (concat prefix letter)))
                         (format ";; (global-set-key (kbd \"%s\") '%S)"
                                 key
                                 (key-binding (kbd key)))))
                     letter-group
                     "\n"))
             (princ "\n\n")))))

     (req-package keyfreq
       :disabled t
       :config
       (setq keyfreq-excluded-commands
             '(self-insert-command
               abort-recursive-edit))
       (keyfreq-mode 1)
       (keyfreq-autosave-mode 1))

     (req-package unbound :disabled t)
   #+END_SRC
** remove elc after save
   If you're saving an elisp file, likely the .elc is no longer valid.
   #+BEGIN_SRC emacs-lisp
     (add-hook 'after-save-hook
               (lambda ()
               (if (and (equal major-mode 'emacs-lisp-mode)
                        (file-exists-p (concat buffer-file-name "c")))
                     (delete-file (concat buffer-file-name "c")))))
   #+END_SRC
** a handy macro to execute code only in major mode it makes sense in
   #+BEGIN_SRC emacs-lisp
     (defmacro custom/advice-for-major-mode (mode function)
       `(defadvice ,(intern (symbol-name function))
            (around ,(intern (concatenate
                              'string
                              (symbol-name function)
                              "-only-in-"
                              (symbol-name mode)))
                    activate)
          (when (eq major-mode ',mode)
            ad-do-it)))
   #+END_SRC
** Enable functions that are disabled by default
   #+BEGIN_SRC emacs-lisp
     (put 'dired-find-alternate-file 'disabled nil)
     (put 'downcase-region 'disabled nil)
     (put 'erase-buffer 'disabled nil)
     (put 'narrow-to-region 'disabled nil)
     (put 'scroll-left 'disabled nil)
     (put 'scroll-right 'disabled nil)
     (put 'set-goal-column 'disabled nil)
     (put 'upcase-region 'disabled nil)

     (setq disabled-command-function nil)
   #+END_SRC
** world time
   #+BEGIN_SRC emacs-lisp
     (setq display-time-world-list
           '(("Europe/Moscow" "Moscow")
             ("America/New_York" "New York")))
   #+END_SRC
** security
   #+BEGIN_SRC emacs-lisp
     (req-package epg)

     (setq password-cache-expiry 7200)
     (setq password-cache t)
   #+END_SRC
** local variables processing
   #+BEGIN_SRC emacs-lisp
     (setq enable-local-variables nil)
   #+END_SRC
** warnings processing
   #+BEGIN_SRC emacs-lisp
     (setq warning-suppress-types nil)
   #+END_SRC
** frames
*** call this on WM side to sync frames and heads count
    #+BEGIN_SRC emacs-lisp
      (define-namespace custom/

      (defun update-frames (heads-count)
        (let ((frames-count (length (frame-list))))
          (cond
           ((= heads-count 2)
            (when (= frames-count 1)
              (make-frame-command)))
           ((= heads-count 1)
            (when (> frames-count 1)
              (delete-other-frames)))
           (t
            (delete-other-frames)))))

      )
    #+END_SRC
*** appearance
    #+BEGIN_SRC emacs-lisp
      (setq frame-title-format "emacs - %b %f")

      (setq inhibit-startup-echo-area-message "octocat")
      (setq inhibit-startup-message t)
      (setq inhibit-startup-screen t)
      (setq initial-scratch-message nil)

      (setq line-number-mode t)

      (setq resize-mini-windows t)
      (setq max-mini-window-height 0.33)

      (setq column-number-mode t)

      (load-library "time")
      (setq display-time-day-and-date t)
      (setq display-time-form-list (list 'time 'load))
      (setq display-time-mail-file t)
      (setq display-time-string-forms '( day " " monthname " (" dayname ") " 24-hours ":" minutes))

      (setq use-dialog-box nil)
      (setq visible-bell t)
      (setq ring-bell-function 'ignore)
      (setq size-indication-mode t)
      (setq split-width-threshold nil)
      (setq enable-recursive-minibuffers t)
      (setq echo-keystrokes 0.1)
      (setq truncate-partial-width-windows nil)

      (and (fboundp 'scroll-bar-mode) (scroll-bar-mode 0))
      (menu-bar-mode -1)
      (when (= emacs-major-version 25)
        (horizontal-scroll-bar-mode -1))
      (blink-cursor-mode 0)
      (tool-bar-mode 0)
      (tooltip-mode nil)
      (global-font-lock-mode t)
      (display-battery-mode 1)
      (display-time)

      (defun custom/display-buffer-fullframe (buffer alist)
        "Display BUFFER in fullscreen.
      ALIST is a `display-buffer' ALIST.
      Return the new window for BUFFER."
        (let ((window
               (or (display-buffer-use-some-window buffer alist)
                   (display-buffer-pop-up-window buffer alist))))
          (when window
            (delete-other-windows window))
          window))

      (req-package popwin)
      (req-package vline :disabled t)

      (req-package volatile-highlights
        :disabled t
        :config
        (volatile-highlights-mode t))
    #+END_SRC
** GC tweaks
   #+BEGIN_SRC emacs-lisp
     (setq gc-cons-percentage 0.3)
     (setq gc-cons-threshold 20000000)

     (defun my-minibuffer-setup-hook ()
       (setq gc-cons-threshold most-positive-fixnum))

     (defun my-minibuffer-exit-hook ()
       (setq gc-cons-threshold 800000))

     (add-hook 'minibuffer-setup-hook #'my-minibuffer-setup-hook)
     (add-hook 'minibuffer-exit-hook #'my-minibuffer-exit-hook)
   #+END_SRC
** mode lists for common needs
   #+BEGIN_SRC emacs-lisp
     ;; clean trailing whitespaces automatically
     (setq custom/trailing-whitespace-modes
           '(
             c++-mode
             c-mode
             haskell-mode
             emacs-lisp-mode
             lisp-mode
             scheme-mode
             erlang-mode
             python-mode
             js-mode
             js2-mode
             html-mode
             lua-mode
             yaml-mode
             ))
     ;; untabify some modes
     (setq custom/untabify-modes
           '(
             haskell-mode
             emacs-lisp-mode
             lisp-mode
             scheme-mode
             erlang-mode
             clojure-mode
             python-mode
             ))
     ;; sexp-based editing modes list
     (setq custom/sexp-editing-modes
           '(
             lisp-mode
             emacs-lisp-mode
             ))
   #+END_SRC
** hooks for tabs and spaces ;]
   #+BEGIN_SRC emacs-lisp
     (defun common-hooks/trailing-whitespace-hook ()
       (when (member major-mode custom/trailing-whitespace-modes)
         (delete-trailing-whitespace)))

     (defun common-hooks/untabify-hook ()
       (when (member major-mode custom/untabify-modes)
         (untabify (point-min) (point-max))))

     (add-hook 'before-save-hook 'common-hooks/trailing-whitespace-hook)
     (add-hook 'before-save-hook 'common-hooks/untabify-hook)
   #+END_SRC
** encodings
   #+BEGIN_SRC emacs-lisp
     (setq locale-coding-system 'utf-8)
     (set-default buffer-file-coding-system 'utf-8-unix)
     (set-default default-buffer-file-coding-system 'utf-8-unix)
     (prefer-coding-system 'utf-8)
     (set-buffer-file-coding-system 'utf-8 'utf-8-unix)
     (set-default-coding-systems 'utf-8)
     (set-keyboard-coding-system 'utf-8)
     (set-selection-coding-system 'utf-8)
     (set-terminal-coding-system 'utf-8)
     (define-coding-system-alias 'UTF-8 'utf-8)
   #+END_SRC
** uniquify buffer names
   #+BEGIN_SRC emacs-lisp
     (req-package uniquify
       :config
       (setq uniquify-buffer-name-style 'post-forward)
       (setq uniquify-separator ":")
       (setq uniquify-ignore-buffers-re "^\\*")
       (setq uniquify-strip-common-suffix nil))
   #+END_SRC
** diminish modeline contents
   #+BEGIN_SRC emacs-lisp
     (req-package rich-minority
       :config
       (setq rm-blacklist
             '(" GitGutter"
               " VHl"
               " WLR"
               " Emmet"
               " Wrap"
               " Fill"
               " Abbrev"
               " SliNav"
               " Helm"
               )))

     (req-package diminish :commands diminish)
   #+END_SRC
** view system processes info
   #+BEGIN_SRC emacs-lisp :tangle no
     (req-package list-processes+)

     (global-set-key (kbd "C-x c") 'proced)
   #+END_SRC
** OS-specific stuff
   Besides the common part of the common setup (sic!) there is also 
   a little part of customizations being specific to OS Emacs is
   running on. So here they are (conditionally loaded):
*** linux specific
    #+BEGIN_SRC emacs-lisp :tangle (if (eq system-type 'gnu/linux) "yes" "no")
      (setq x-alt-keysym 'meta)

      (setq browse-url-browser-function 'browse-url-generic)
      (setq browse-url-generic-program "xdg-open")
    #+END_SRC
*** darwin specific
    #+BEGIN_SRC emacs-lisp :tangle (if (eq system-type 'darwin) "yes" "no")
      ;; key bindings
      (cua-mode t)
      (setq mac-option-key-is-meta t)
      (setq mac-command-key-is-meta nil)
      (setq process-connection-type nil)
      (setq mac-command-modifier 'hyper)    ;meta|super
      (setq mac-pass-command-to-system nil)   ;;avoid hiding with M-h
      (global-set-key [(hyper x)] 'cua-cut-region)
      (global-set-key [(hyper c)] 'cua-copy-region)
      (global-set-key [(hyper v)] 'cua-paste)
      (global-set-key [kp-delete] 'delete-char) ;; sets fn-delete to be right-delete
      (setq mac-control-modifier 'control)

      ;; Ignore .DS_Store files with ido mode
      (add-to-list 'ido-ignore-files "\\.DS_Store")

      (setq locate-command "mdfind")
      (setq helm-locate-command "mdfind")

      (prefer-coding-system 'utf-8-unix)
      (set-default-coding-systems 'utf-8-unix)
      (if (< emacs-major-version 23)
          (set-keyboard-coding-system 'utf-8))
      (set-clipboard-coding-system 'utf-8)
      (set-terminal-coding-system 'utf-8)
    #+END_SRC
** ubiquitous hydra
*** some definitions
    #+BEGIN_SRC emacs-lisp
      (define-namespace custom/

      ;; some customizations for nested hydras
      (defvar hydra-stack nil)

      (defun hydra-push (expr)
        (push `(lambda () ,expr) hydra-stack))

      (defun hydra-pop ()
        (interactive)
        (let ((x (pop hydra-stack)))
          (when x
            (funcall x))))

      )
    #+END_SRC
*** use it
    #+BEGIN_SRC emacs-lisp
      (req-package hydra
        :config
        (set-face-attribute 'hydra-face-blue nil :foreground "#00bfff"))
    #+END_SRC
* navigate
** URLs, links and TAPs
*** definitions
    #+BEGIN_SRC emacs-lisp
      (define-namespace custom/

      ;;TODO: make implemetation less straightforward or find "right way" to do it
      (defun process-thing-at-point ()
        (interactive)
        (cond
         ((equal major-mode 'ag-mode) (compile-goto-error))
         ((or (equal major-mode 'org-agenda-mode)
              (equal major-mode 'org-mode)) (org-return))
         ((or (equal major-mode 'jabber-chat-mode)
              (equal major-mode 'erc-mode)) (browse-url (thing-at-point 'url t)))
         (t (browse-url (thing-at-point 'url t)))))

      ;;TODO: find a common way for all url-browsing functionality in config
      ;;to handle special cases like spaces in urls, etc.
      (defun open-urls-in-region (beg end)
        "Open URLs between BEG and END."
        (interactive "r")
        (save-excursion
          (save-restriction
            (let ((urls))
              (narrow-to-region beg end)
              (goto-char (point-min))
              (while (re-search-forward org-plain-link-re nil t)
                (push (thing-at-point 'url) urls))
              (dolist (url (reverse urls))
                (browse-url url))))))

      (defvar url-regexp "\\(http\\(s\\)*://\\)\\(www.\\)*\\|\\(www.\\)")

      (defun find-url-backward ()
        (interactive)
        (re-search-backward url-regexp nil t))

      (defun find-url-forward ()
        (interactive)
        (re-search-forward url-regexp nil t))

      )
    #+END_SRC
*** setup
    #+BEGIN_SRC emacs-lisp
      (req-package ace-link
        :config
        (ace-link-setup-default))

      (req-package link-hint)
    #+END_SRC
** cursor positioning
   #+BEGIN_SRC emacs-lisp
     (define-namespace custom/

     ;;Make cursor stay in the same column when scrolling using pgup/dn.
     ;;Previously pgup/dn clobbers column position, moving it to the
     ;;beginning of the line.
     ;;<http://www.dotemacs.de/dotfiles/ElijahDaniel.emacs.html>
     (defadvice scroll-up (around ewd-scroll-up first act)
       "Keep cursor in the same column."
       (let ((col (current-column)))
         ad-do-it
         (move-to-column col)))
     (defadvice scroll-down (around ewd-scroll-down first act)
       "Keep cursor in the same column."
       (let ((col (current-column)))
         ad-do-it
         (move-to-column col)))

     (defun smarter-move-beginning-of-line (arg)
       "Move point back to indentation of beginning of line.

       Move point to the first non-whitespace character on this line.
       If point is already there, move to the beginning of the line.
       Effectively toggle between the first non-whitespace character and
       the beginning of the line.

       If ARG is not nil or 1, move forward ARG - 1 lines first.  If
       point reaches the beginning or end of the buffer, stop there."
       (interactive "^p")
       (setq arg (or arg 1))
       ;; Move lines first
       (when (/= arg 1)
         (let ((line-move-visual nil))
           (forward-line (1- arg))))
       (let ((orig-point (point)))
         (back-to-indentation)
         (when (= orig-point (point))
           (move-beginning-of-line 1))))

     (defun skip-to-next-blank-line ()
       (interactive)
       (let ((inhibit-changing-match-data t))
         (forward-char 1)
         (unless (search-forward-regexp "^\\s *$" nil t)
           (forward-char -1))))

     (defun skip-to-previous-blank-line ()
       (interactive)
       (let ((inhibit-changing-match-data t))
         (forward-char -1)
         (unless (search-backward-regexp "^\\s *$" nil t)
           (forward-char 1))))

     ;; When popping the mark, continue popping until the cursor actually moves
     ;; Also, if the last command was a copy - skip past all the expand-region cruft.
     (defadvice pop-to-mark-command (around ensure-new-position activate)
       (let ((p (point)))
         (when (eq last-command 'save-region-or-current-line)
           ad-do-it
           ad-do-it
           ad-do-it)
         (dotimes (i 10)
           (when (= p (point)) ad-do-it))))

     )

     (setq scroll-preserve-screen-position 'always)

     (req-package saveplace
       :config
       (setq save-place t)
       (setq-default save-place t))
   #+END_SRC
** helm
*** definitions
    #+BEGIN_SRC emacs-lisp
      (define-namespace custom/

      (defun helm-find-files ()
        (interactive)
        (helm-other-buffer
         '(helm-source-files-in-current-dir
           helm-source-recentf
           helm-source-file-name-history
           helm-source-findutils
           helm-source-locate)
         "*helm-find-files*"))

      (req-package helm-utils :force t)

      (defvar helm-source-portage-files
        `((name . "Portage files")
          (candidates . ,(helm-walk-directory "/etc/portage" :path 'full))
          (action . (lambda (candidate)
                      (helm-find-file-as-root candidate)))))

      (defvar helm-source-enc-docs
        `((name . "Various documents")
          (candidates . ,(helm-walk-directory (at-homedir "/docs/enc") :path 'full))
          (action . (lambda (candidate)
                      (find-file candidate)))))

      (defvar helm-source-org-files
        `((name . "Org files")
          (candidates . ,(helm-walk-directory (at-org-dir) :path 'full))
          (action . (lambda (candidate)
                      (find-file candidate)))))

      (defun open-portage-file ()
        (interactive)
        (helm :sources '(custom/helm-source-portage-files)))

      (defun open-encrypted-document ()
        (interactive)
        (helm :sources '(custom/helm-source-enc-docs)))

      (defun open-org-file ()
        (interactive)
        (helm :sources '(custom/helm-source-org-files)))

      )
    #+END_SRC
*** setup
    #+BEGIN_SRC emacs-lisp
      (req-package helm
        :force t
        :init
        (req-package helm-config)
        (req-package helm-files)
        (req-package helm-info)
        (req-package helm-locate)
        (req-package helm-misc)
        (req-package helm-grep)
        (req-package helm-buffers
          :config
          (pushnew 'python-mode helm-buffers-favorite-modes))
        :config
        (setq helm-quick-update t)
        (setq helm-split-window-in-side-p t)
        (setq helm-ff-search-library-in-sexp t)
        (setq helm-ff-file-name-history-use-recentf t)
        (setq helm-buffers-fuzzy-matching t)
        (setq helm-recentf-fuzzy-match t)
        (setq helm-locate-fuzzy-match t)
        (setq helm-M-x-fuzzy-match t)
        (setq helm-apropos-fuzzy-match t)
        (setq helm-apropos-fuzzy-match t)
        (setq helm-move-to-line-cycle-in-source t)
        (setq helm-buffer-max-length nil)
        (setq helm-input-idle-delay 0.2)
        (setq helm-exit-idle-delay 0.2)
        (bind-key "C-<down>" 'helm-next-source helm-map)
        (bind-key "C-<up>" 'helm-previous-source helm-map)
        (bind-key "C-x b" 'helm-buffers-list)
        (bind-key "C-*" 'helm-mark-all helm-map)
        (bind-key "C-x j j" 'helm-bookmarks)
        (bind-key "M-x" 'helm-M-x)
        (bind-key "C-h a" 'helm-apropos)
        (bind-key "C-h r" 'helm-info-emacs)
        (bind-key "C-h o" 'helm-info-at-point)
        (bind-key "C-x C-r" 'helm-recentf)
        (global-set-key (kbd "C-x C-h") 'helm-command-prefix)
        (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
        (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB works in terminal
        (define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z
        (when (executable-find "curl")
          (setq helm-google-suggest-use-curl-p t))
        ;;TODO: investigate and bind 'helm-resume
        ;;TODO: investigate and bind 'helm-multi-files
        (helm-mode t)
        (helm-autoresize-mode 1))

      (req-package wgrep-helm
        :require helm wgrep) ;TODO: maybe configure

      (req-package helm-descbinds
        :require helm
        :config
        (helm-descbinds-mode 1)
        (bind-key "C-x C-d" 'helm-descbinds))

      (req-package helm-helm-commands :require helm)
      (req-package helm-dired-recent-dirs :require helm)
      (req-package helm-flycheck :require helm)
      (req-package ac-helm :require helm auto-complete popup cl-lib)

      (req-package helm-ag
        :require helm
        :config
        (setq helm-ag-insert-at-point 'symbol)
        (setq helm-ag-fuzzy-match t)
        ;;TODO: add other common escapes
        (defadvice helm-ag--query (after escape-search-term activate)
          (setq helm-ag--last-query (replace-regexp-in-string "\\*" "\\\\*" helm-ag--last-query))))

      ;;TODO: sync and maybe slurp something from rc-cc
      (req-package helm-gtags
        :require helm
        :defer t
        :config
        (setq helm-gtags-path-style 'relative)
        (setq helm-gtags-ignore-case t)
        (setq helm-gtags-auto-update t)
        (setq helm-gtags-use-input-at-cursor t)
        (setq helm-gtags-pulse-at-cursor t)
        (setq helm-gtags-suggested-key-mapping t)
        (bind-key "M-t" 'helm-gtags-find-tag helm-gtags-mode-map)
        (bind-key "M-r" 'helm-gtags-find-rtag helm-gtags-mode-map)
        (bind-key "C-M-s" 'helm-gtags-find-symbol helm-gtags-mode-map)
        (bind-key "M-s s" 'helm-gtags-select helm-gtags-mode-map)
        (bind-key "M-g M-p" 'helm-gtags-parse-file helm-gtags-mode-map)
        (bind-key "C-c <" 'helm-gtags-previous-history helm-gtags-mode-map)
        (bind-key "C-c >" 'helm-gtags-next-history helm-gtags-mode-map)
        (bind-key "M-." 'helm-gtags-dwim helm-gtags-mode-map)
        (bind-key "M-," 'helm-gtags-pop-stack helm-gtags-mode-map)
        (bind-key "M-s t" 'helm-gtags-tags-in-this-function helm-gtags-mode-map)
        (add-hook 'dired-mode-hook 'helm-gtags-mode)
        (add-hook 'c-mode-hook 'helm-gtags-mode)
        (add-hook 'c++-mode-hook 'helm-gtags-mode))

      (req-package helm-fuzzier
        :disabled t
        :require helm
        :config
        (helm-fuzzier-mode 1))

      (req-package helm-flx
        :disabled t
        :require helm flx
        :config
        (helm-flx-mode 1))
    #+END_SRC
*** hydras
    #+BEGIN_SRC emacs-lisp
      (defhydra hydra-custom-helm ()
        ("p" custom/open-portage-file "open portage file")
        ("e" custom/open-encrypted-document "open encrypted document")
        ("o" custom/open-org-file "open Org file")
        ("q" nil "cancel"))
      (global-set-key (kbd "C-c r") 'hydra-custom-helm/body)
    #+END_SRC
** projectile
   #+BEGIN_SRC emacs-lisp
     (req-package projectile
       :require dash pkg-info
       :config
       (projectile-global-mode t)
       (setq projectile-enable-caching t)
       (setq projectile-require-project-root nil)
       (setq projectile-switch-project-action 'helm-projectile)
       (setq projectile-switch-project-action #'projectile-commander)
       (def-projectile-commander-method ?d
         "Open project root in dired."
         (projectile-dired))
       (setq projectile-completion-system 'ivy)
       (setq projectile-tags-command
             "find %s -type f -print | egrep -v \"/[.][a-zA-Z]\" | etags -")
       (add-to-list 'projectile-other-file-alist '("html" "js"))
       (add-to-list 'projectile-other-file-alist '("js" "html"))
       (diminish 'projectile-mode "prj")
       (defhydra hydra-projectile (:color teal)
         "
         PROJECT: %(projectile-project-root)
         find                         Project               More
         ---------------------------------------------------------------------------------------
         _fd_irectory                 i_pb_uffer            _c_ommander
         _ft_est file                 in_pf_o               _s_witch to buffer
         _ff_ile                      run _pt_ests          switch to buffer (other _w_indow)
         file d_fw_im                 _pc_ompile            _d_ired
         file o_ft_her window         _pi_nvalidate cache   display _b_uffer
         _fo_ther file                _pk_ill buffers       _r_ecentf
         other file _fO_ther window
         "
         ("fd" helm-projectile-find-dir)
         ("ft" projectile-find-test-file)
         ("ff" helm-projectile-find-file)
         ("fw" helm-projectile-find-file-dwim)
         ("ft" projectile-find-file-dwim-other-window)
         ("fo" helm-projectile-find-other-file)
         ("fO" projectile-find-other-file-other-window)
         ("pb" projectile-ibuffer)
         ("pf" projectile-project-info)
         ("pt" projectile-test-project)
         ("pc" projectile-compile-project)
         ("pi" projectile-invalidate-cache)
         ("pk" projectile-kill-buffers)
         ("ps" projectile-switch-project)
         ("c" projectile-commander)
         ("s" projectile-switch-to-buffer)
         ("w" projectile-switch-to-buffer-other-window)
         ("d" projectile-dired)
         ("b" projectile-display-buffer)
         ("r" projectile-recentf)
         ;;TODO: write legend
         ("s" projectile-run-command-in-root)
         ("S" projectile-run-async-shell-command-in-root))
       (global-set-key (kbd "<f8>") 'hydra-projectile/body))

     (defun toggle-projectile-global-mode (arg)
       (interactive "P")
       (if projectile-global-mode
           (if (= (prefix-numeric-value arg) 4)
               (message "projectile-global-mode is ON")
             (progn
               (projectile-global-mode -1)
               (message "projectile-global-mode is OFF")))
         (if (= (prefix-numeric-value arg) 4)
             (message "projectile-global-mode is OFF")
           (progn
             (projectile-global-mode t)
             (message "projectile-global-mode is ON")))))

     (req-package helm-projectile
       :disabled t
       :require helm projectile dash cl-lib
       :config
       (helm-projectile-on))
   #+END_SRC
** dired
*** always refresh contents
    #+BEGIN_SRC emacs-lisp
      (define-namespace custom/

      ;; Updated file system on all buffer switches if in dired mode
      (defadvice switch-to-buffer-other-window (after auto-refresh-dired (buffer &optional norecord) activate)
        (if (equal major-mode 'dired-mode)
            (revert-buffer)))
      (defadvice switch-to-buffer (after auto-refresh-dired (buffer &optional norecord) activate)
        (if (equal major-mode 'dired-mode)
            (revert-buffer)))
      (defadvice display-buffer (after auto-refresh-dired (buffer &optional not-this-window frame) activate)
        (if (equal major-mode 'dired-mode)
            (revert-buffer)))
      (defadvice other-window (after auto-refresh-dired (arg &optional all-frame) activate)
        (if (equal major-mode 'dired-mode)
            (revert-buffer)))

      )
    #+END_SRC
*** navigate to margins
    #+BEGIN_SRC emacs-lisp
      (define-namespace custom/

      ;; C-a is nicer in dired if it moves back to start of files
      (defun dired-back-to-start-of-files ()
        (interactive)
        (backward-char (- (current-column) 2)))

      ;; M-up is nicer in dired if it moves to the third line - straight to the ".."
      (defun dired-back-to-top ()
        (interactive)
        (beginning-of-buffer)
        (next-line 2)
        (dired-back-to-start-of-files))

      ;; M-down is nicer in dired if it moves to the last file
      (defun dired-jump-to-bottom ()
        (interactive)
        (end-of-buffer)
        (next-line -1)
        (dired-back-to-start-of-files))

      )
    #+END_SRC
*** sort contents
    #+BEGIN_SRC emacs-lisp
      (define-namespace custom/

      (defun dired-sort ()
        "Sort dired listings with directories first."
        (save-excursion
          (let (buffer-read-only)
            (forward-line 2) ;; beyond dir. header
            (sort-regexp-fields t "^.*$" "[ ]*." (point) (point-max)))
          (set-buffer-modified-p nil)))

      (defadvice dired-readin
          (after dired-after-updating-hook first () activate)
        "Sort dired listings with directories first before adding marks."
        (dired-sort))

      )
    #+END_SRC
*** utils
    #+BEGIN_SRC emacs-lisp
      (define-namespace custom/

      (defun dired-open-term ()
        "Open an `ansi-term' that corresponds to current directory."
        (interactive)
        (let ((current-dir (dired-current-directory)))
          (term-send-string
           (custom/terminal)
           (if (file-remote-p current-dir)
               (let ((v (tramp-dissect-file-name current-dir t)))
                 (format "ssh %s@%s\n"
                         (aref v 1) (aref v 2)))
             (format "cd '%s'\n" current-dir)))))

      (defun sudo-dired ()
        (interactive)
        (require 'tramp)
        (let ((dir (expand-file-name default-directory)))
          (if (string-match "^/sudo:" dir)
              (user-error "Already in sudo")
            (dired (concat "/sudo::" dir)))))

      )
    #+END_SRC
*** setup
    #+BEGIN_SRC emacs-lisp
      (defvar *directory-separator* '?/)
      (define-obsolete-function-alias 'make-local-hook 'ignore "21.1")
      (define-obsolete-variable-alias 'directory-sep-char '*directory-separator*)

      (req-package dired
        :init
        :config
        (setq dired-recursive-deletes 'top) ;; Allows recursive deletes
        (setq dired-dwim-target t)
        (setq dired-listing-switches "-lah1v --group-directories-first")
        (global-set-key (kbd "C-c x") 'direx:jump-to-directory)
        ;; (global-set-key (kbd "C-c C-j") 'dired-jump)
        (bind-key "C-c C-s" 'dired-toggle-sudo dired-mode-map)
        (bind-key "C-c C-m" 'custom/get-file-md5 dired-mode-map)
        (bind-key "!" 'custom/sudo-dired dired-mode-map)
        (bind-key "C-a" 'custom/dired-back-to-start-of-files dired-mode-map)
        (bind-key "C-x C-k" 'dired-do-delete dired-mode-map) ;; Delete with C-x C-k to match file buffers and magit
        (bind-key "`" 'custom/dired-open-term dired-mode-map)
        (define-key dired-mode-map (vector 'remap 'beginning-of-buffer) 'custom/dired-back-to-top)
        (define-key dired-mode-map (vector 'remap 'end-of-buffer) 'custom/dired-jump-to-bottom))

      (req-package dired-sort-menu :disabled t)

      (req-package dired+
        :config
        ;; TODO: check if this is not obsolete yet
        (setq diredp-ignored-file-name 'green-face)
        (setq diredp-other-priv 'white-face)
        (setq diredp-rare-priv 'white-red-face)
        (setq diredp-compressed-file-suffix 'darkyellow-face))

      (req-package wdired
        :defer t
        :config
        (setq wdired-allow-to-change-permissions 'advanced)
        (setq wdired-allow-to-change-permissions t)
        (bind-key "C-a" 'custom/dired-back-to-start-of-files wdired-mode-map)
        (bind-key (vector 'remap 'beginning-of-buffer) 'custom/dired-back-to-top wdired-mode-map)
        (bind-key (vector 'remap 'end-of-buffer) 'custom/dired-jump-to-bottom wdired-mode-map)
        (bind-key "r" 'wdired-change-to-wdired-mode dired-mode-map))

      (req-package dired-x)
      (req-package dired-toggle-sudo)

      ;; Reload dired after making changes
      (--each '(dired-do-rename
                dired-create-directory
                wdired-abort-changes)
        (eval `(defadvice ,it (after revert-buffer activate)
                 (revert-buffer))))

      (req-package dired-filetype-face)
    #+END_SRC
** bookmark+
   #+BEGIN_SRC emacs-lisp
     (req-package bookmark+)

     (req-package crosshairs :require hl-line+ col-highlight vline)
   #+END_SRC
** search
*** definitions
    #+BEGIN_SRC emacs-lisp
      (define-namespace custom/

      (defun occur-and-switch (search)
        (interactive "sSearch for: ")
        (occur (regexp-quote search))
        (switch-to-buffer-other-window "*Occur*"))

      (defadvice occur-mode-goto-occurrence (after close-occur activate)
        (delete-other-windows))

      )
    #+END_SRC
*** setup
    #+BEGIN_SRC emacs-lisp
      (req-package wgrep)

      (req-package occur-context-resize)

      (req-package phi-search)

      (req-package sift
        :config
        (defadvice sift-regexp (around escape-search-term activate)
          (ad-set-arg 0 (replace-regexp-in-string "\\*" "\\\\*" (ad-get-arg 0)))
          ad-do-it))

      (req-package phi-search-mc
        :require phi-search multiple-cursors
        :config
        (phi-search-mc/setup-keys)
        (add-hook 'isearch-mode-hook 'phi-search-from-isearch-mc/setup-keys))

      (req-package fuzzy
        :config
        (turn-on-fuzzy-isearch))

      (req-package paradox
        :require seq let-alist spinner hydra
        :config
        (setq paradox-execute-asynchronously t)
        (setq paradox-github-token private/paradox-github-token))
    #+END_SRC
** operations with windows
   #+BEGIN_SRC emacs-lisp
     (req-package zoom-window
       :config
       (setq zoom-window-mode-line-color "DarkGreen"))

     (req-package windmove
       :bind
       (("C-s-<up>" . windmove-up)
        ("C-s-<down>" . windmove-down)
        ("C-s-<left>" . windmove-left)
        ("C-s-<right>" . windmove-right)
        ))

     (req-package windsize)

     (req-package framemove
       :config
       (setq framemove-hook-into-windmove t))

     (req-package ace-window
       :require avy
       :init
       (setq aw-background nil)
       (setq aw-leading-char-style 'char)
       :config
       (set-face-attribute 'aw-mode-line-face nil :foreground "white")
       (custom-set-faces
        '(aw-leading-char-face
          ((t (:inherit ace-jump-face-foreground :height 3.0))))))

     (req-package transpose-frame
       :config
       (defhydra hydra-transpose-frame ()
         "frames geometry management"
         ("t" transpose-frame "transpose")
         ("i" flip-frame "flip")
         ("o" flop-frame "flop")
         ("r" rotate-frame "rotate")
         ("<left>" rotate-frame-anticlockwise "rotate <-")
         ("<right>" rotate-frame-clockwise "rotate ->")
         ("q" nil "cancel"))
       (global-set-key (kbd "C-<f2>") 'hydra-transpose-frame/body))

     ;;TODO: plan docstring
     (defhydra hydra-window (global-map "<f2>")
       "window"
       ("<left>" windmove-left "left")
       ("<down>" windmove-down "down")
       ("<up>" windmove-up "up")
       ("<right>" windmove-right "right")
       ("w" ace-window "ace" :color blue)
       ("3" (lambda ()
              (interactive)
              (split-window-right)
              (windmove-right)
              (switch-to-next-buffer))
        "vert")
       ("2" (lambda ()
              (interactive)
              (split-window-below)
              (windmove-down)
              (switch-to-next-buffer))
        "horiz")
       ("u" hydra-universal-argument "universal")
       ("s" (lambda () (interactive) (ace-window 4)) "swap")
       ("d" (lambda () (interactive) (ace-window 16)) "delete")
       ("1" delete-other-windows "1" :color blue)
       ("i" ace-maximize-window "a1" :color blue)
       ("<C-up>" windsize-up "move splitter up")
       ("<C-down>" windsize-down "move splitter down")
       ("<C-left>" windsize-left "move splitter left")
       ("<C-right>" windsize-right "move splitter right")
       ("=" text-scale-increase)
       ("-" text-scale-decrease)
       ("f" make-frame-command)
       ("F" delete-other-frames)              ;; TODO: maybe provide current frame deletion also
       ("q" nil "cancel"))
   #+END_SRC
** scope
*** definitions
**** ibuffer
     #+BEGIN_SRC emacs-lisp
       (define-namespace custom/

       (defun ibuffer-filter-by-extname (qualifier)
         (interactive "sFilter by extname: ")
         (ibuffer-filter-by-filename (concat "\\." qualifier "$")))

       )
     #+END_SRC
*** setup
    #+BEGIN_SRC emacs-lisp
      (defhydra hydra-scope (:color blue)
        "
        Narrow to            Widen
        ------------------------------------
        _r_egion             _w_iden
        _d_efun              _z_oom window
        defun + _c_omments
        "
        ("r" narrow-to-region)
        ("d" narrow-to-defun)
        ("c" narrow-to-defun+comments-above)
        ("o" org-narrow-to-subtree)
        ("w" widen)
        ("z" zoom-window-zoom)
        ("N" recursive-narrow-or-widen-dwim)
        ("W" recursive-widen-dwim)
        ;;TODO: maybe add org narrowing
        ("q" nil "cancel"))
      (global-set-key (kbd "<f9>") 'hydra-scope/body)

      (req-package ibuffer
        :defer t
        :config
        (setq ibuffer-default-sorting-mode 'major-mode) ;recency
        (setq ibuffer-always-show-last-buffer :nomini)
        (setq ibuffer-default-shrink-to-minimum-size t)
        (setq ibuffer-jump-offer-only-visible-buffers t)
        (setq ibuffer-saved-filters
              '(("dired" ((mode . dired-mode)))
                ("foss" ((filename . "foss")))
                ("pets" ((filename . "pets")))
                ("jabberchat" ((mode . jabber-chat-mode)))
                ("orgmode" ((mode . org-mode)))
                ("elisp" ((mode . emacs-lisp-mode)))
                ("fundamental" ((mode . fundamental-mode)))
                ("haskell" ((mode . haskell-mode)))))
        (setq ibuffer-saved-filter-groups custom/ibuffer-saved-filter-groups)
        (add-hook 'ibuffer-mode-hook
                  (lambda () (ibuffer-switch-to-saved-filter-groups "default"))) ;; Make sure we're always using our buffer groups
        (add-hook 'ibuffer-mode-hook
                  (lambda () (define-key ibuffer-mode-map (kbd "M-o") 'other-window))) ; was ibuffer-visit-buffer-1-window
        (bind-key "/ ." 'custom/ibuffer-filter-by-extname ibuffer-mode-map))

      ;;TODO: merge to hydra or create a new one + maybe expand with other useful bindings
      (define-key ctl-x-4-map "nd" 'ni-narrow-to-defun-indirect-other-window)
      (define-key ctl-x-4-map "nn" 'ni-narrow-to-region-indirect-other-window)
      (define-key ctl-x-4-map "np" 'ni-narrow-to-page-indirect-other-window)

      (req-package recursive-narrow)
    #+END_SRC
** warping
   #+BEGIN_SRC emacs-lisp
     (req-package swoop
       ;;TODO: compare and play with helm-swoop
       :require ht pcre2el async
       :config
       (bind-key "<down>" 'swoop-action-goto-line-next swoop-map)
       (bind-key "<up>" 'swoop-action-goto-line-prev swoop-map))

     (req-package swiper
       :config
       (setq ivy-display-style 'fancy)
       (custom-set-faces
        '(swiper-minibuffer-match-face-1
          ((t :background "#dddddd")))
        '(swiper-minibuffer-match-face-2
          ((t :background "#bbbbbb" :weight bold)))
        '(swiper-minibuffer-match-face-3
          ((t :background "#bbbbff" :weight bold)))
        '(swiper-minibuffer-match-face-4
          ((t :background "#ffbbff" :weight bold)))))

     (req-package avy
       :require cl-lib
       :config
       (setq avy-timeout-seconds 0.5)
       (set-face-attribute 'avy-goto-char-timer-face nil :foreground "green" :weight 'bold))

     (req-package filecache)
   #+END_SRC
** hydras and keybindings
   #+BEGIN_SRC emacs-lisp
     ;;TODO: plan docstring
     (defhydra hydra-entries ()
       ("!" flycheck-first-error "ace" :color blue)
       ("<up>" flycheck-previous-error "previous error")
       ("<down>" flycheck-next-error "next error")
       ("<prior>" custom/find-url-backward "previous url")
       ("<next>" custom/find-url-forward "next url")
       ("<left>" previous-error "previous error")
       ("<right>" next-error "next error")
       ("k" smerge-prev "previous conflict")
       ("j" smerge-next "next conflict")
       ("r" custom/open-urls-in-region :color blue)
       ("=" custom/skip-to-next-blank-line)
       ("-" custom/skip-to-previous-blank-line)
       ("h" git-gutter:previous-hunk)
       ("l" git-gutter:next-hunk)
       ("f" link-hint-open-link :color blue)
       ("y" link-hint-copy-link :color blue)
       ("<return>" custom/process-thing-at-point "execute ;)" :color blue)
       ("q" nil "cancel"))
     (global-set-key (kbd "<f3>") 'hydra-entries/body)

     (defhydra hydra-navigate (:color blue)
       "
       Search                 Various
       ------------------------------
       _r_ recursive grep     _h_ helm-mini
       _s_ semantic/imenu     _q_ projectile
       _m_ multi swoop        _f_ find files
       _i_ find occurencies   _p_ switch project
       _o_ find in buffer     _c_ helm-flycheck
       _g_ ag in project      _w_ select w3m buffer
       _t_ google-translate at point
       _T_ google translate
       _l_ org headlines
       "
       ("h" helm-mini)
       ("q" helm-projectile)
       ("r" sift-regexp)
       ("f" custom/helm-find-files)
       ("s" helm-semantic-or-imenu)
       ("p" helm-projectile-switch-project)
       ("c" helm-flycheck)
       ("m" swoop-multi)
       ("i" swoop)
       ("o" (lambda () (interactive) (swoop "")))
       ("g" helm-ag-project-root)
       ("w" w3m-select-buffer)
       ("t" google-translate-at-point)
       ("T" google-translate-query-translate)
       ("l" helm-org-in-buffer-headings)
       ("L" helm-org-agenda-files-headings)
       ("a" avy-goto-char-timer "goto char within window" :color blue)
       ("A" avy-goto-word-0 "goto word within window" :color blue))
     (global-set-key (kbd "C-`") 'hydra-navigate/body)

     (global-unset-key (kbd "C-s"))
     (global-unset-key (kbd "C-r"))
     (global-unset-key (kbd "C-M-s"))
     (global-unset-key (kbd "C-M-r"))
     (global-unset-key (kbd "C-x C-b"))
     (global-set-key (kbd "C-s") 'phi-search)
     (global-set-key (kbd "C-r") 'phi-search-backward)
   #+END_SRC
* editing
** utils for files and buffers
   #+BEGIN_SRC emacs-lisp
     (define-namespace custom/

     (defun copy-file-name-to-clipboard ()
       "Copy the current buffer file name to the clipboard."
       (interactive)
       (let ((filename (if (equal major-mode 'dired-mode)
                           default-directory
                         (buffer-file-name))))
         (when filename
           (kill-new filename)
           (message "Copied buffer file name '%s' to the clipboard." filename))))

     ;;<http://www.cabochon.com/~stevey/blog-rants/my-dot-emacs-file.html>
     (defun rename-file-and-buffer (new-name)
       "Renames both current buffer and file it is visiting to NEW-NAME."
       (interactive "sNew name: ")
       (let ((name (buffer-name))
             (filename (buffer-file-name)))
         (if (not filename)
             (message "Buffer '%s' is not visiting a file!" name)
           (if (get-buffer new-name)
               (message "A buffer named '%s' already exists!" new-name)
             (progn
               (rename-file name new-name 1)
               (rename-buffer new-name)
               (set-visited-file-name new-name)
               (set-buffer-modified-p nil))))))

     (defun get-file-md5 ()
       (interactive)
       (when (derived-mode-p 'dired-mode)
         (let ((abs-file-name (dired-get-filename)))
           (unless (file-directory-p abs-file-name)
             (with-temp-buffer
               (let ((prefix-arg t))
                 (shell-command (format "md5sum %s" abs-file-name))
                 (buffer-string)))))))

     )

     (req-package scratch)
   #+END_SRC
** regions and rectangles
*** definitions
    #+BEGIN_SRC emacs-lisp
      (define-namespace custom/

      (defadvice whole-line-or-region-kill-region
          (before whole-line-or-region-kill-read-only-ok activate)
        (interactive "p")
        (unless kill-read-only-ok (barf-if-buffer-read-only)))

      (defun cite-region (arg)
        (clipboard-kill-ring-save (region-beginning) (region-end))
        (with-temp-buffer
          (let ((comment-start "> "))
            (yank)
            (comment-region (point-min) (point-max))
            (when (> arg 1)
              (beginning-of-buffer)
              (insert "\n"))
            (clipboard-kill-region (point-min) (point-max)))))

      (defun append-cited-region (arg)
        (interactive "P")
        (custom/cite-region (prefix-numeric-value arg))
        (end-of-buffer)
        (yank))

      ;; Compliment to kill-rectangle (just like kill-ring-save compliments
      ;; kill-region)
      ;; http://www.emacsblog.org/2007/03/17/quick-tip-set-goal-column/#comment-183
      (defun kill-save-rectangle (start end &optional fill)
        "Save the rectangle as if killed, but don't kill it. See
        `kill-rectangle' for more information."
        (interactive "r\nP")
        (kill-rectangle start end fill)
        (goto-char start)
        (yank-rectangle))

      (defun compact-spaces-in-region (beg end)
        "replace all whitespace in the region with single spaces"
        (interactive "r")
        (save-excursion
          (save-restriction
            (narrow-to-region beg end)
            (goto-char (point-min))
            (while (re-search-forward "\\s-+" nil t)
              (replace-match "")))))

      )
    #+END_SRC
*** setup
    #+BEGIN_SRC emacs-lisp
      (req-package expand-region
        :defer t
        :bind ("C-=" . er/expand-region))

      (req-package region-bindings-mode
        :config
        (region-bindings-mode-enable)
        (setq region-bindings-mode-disable-predicates '((lambda () buffer-read-only)))
        (bind-key "M-<down>" 'mc/mark-next-like-this region-bindings-mode-map)
        (bind-key "M-<up>" 'mc/mark-previous-like-this region-bindings-mode-map)
        (bind-key "8" 'mc/mark-all-like-this region-bindings-mode-map)
        (bind-key "6" 'mc/edit-beginnings-of-lines region-bindings-mode-map)
        (bind-key "4" 'mc/edit-ends-of-lines region-bindings-mode-map)
        (bind-key "3" 'mc/mark-more-like-this-extended region-bindings-mode-map)
        (bind-key "5" 'mc/mark-all-in-region region-bindings-mode-map)
        (bind-key "9" 'mc/mark-all-like-this-in-defun region-bindings-mode-map)
        (bind-key "0" 'mc/mark-all-like-this-dwim region-bindings-mode-map)
        (bind-key "`" 'mc/sort-regions region-bindings-mode-map)
        (bind-key "1" 'mc/insert-numbers region-bindings-mode-map)
        (bind-key "<up>" 'mc/reverse-regions region-bindings-mode-map))

      (req-package selected
        :commands selected-minor-mode
        :init
        (setq selected-org-mode-map (make-sparse-keymap))
        :bind (:map selected-keymap
                    ("q" . selected-off)
                    ("u" . upcase-region)
                    ("d" . downcase-region)
                    ("w" . count-words-region)
                    ("m" . apply-macro-to-region-lines)
                    :map selected-org-mode-map
                    ("t" . org-table-convert-region)))

      (req-package whole-line-or-region ;; if no region is active, act on current line
        :defer t
        :config
        (whole-line-or-region-mode 1)
        (setq whole-line-or-region-extensions-alist
              '((comment-dwim whole-line-or-region-comment-dwim-2 nil)
                (copy-region-as-kill whole-line-or-region-copy-region-as-kill nil)
                (kill-region whole-line-or-region-kill-region nil)
                (kill-ring-save whole-line-or-region-kill-ring-save nil)
                (yank whole-line-or-region-yank nil))))

      (req-package wrap-region
        :disabled t
        :require dash
        :config
        (wrap-region-global-mode 1)
        (wrap-region-add-wrapper "*" "*")
        (wrap-region-add-wrapper "(" ")")
        (wrap-region-add-wrapper "{-" "-}" "#")
        (wrap-region-add-wrapper "/* " " */" "#" '(javascript-mode css-mode)))
    #+END_SRC
** switch case
   #+BEGIN_SRC emacs-lisp
     (define-namespace custom/

     (defun downcase-dwim (arg)
       (interactive "p")
       (if (region-active-p)
           (downcase-region (region-beginning) (region-end))
         (downcase-word arg)))

     (defun upcase-dwim (arg)
       (interactive "p")
       (if (region-active-p)
           (upcase-region (region-beginning) (region-end))
         (upcase-word arg)))

     (defun capitalize-dwim (arg)
       (interactive "P")
       (when (consp arg) (setq arg 1))
       (if (region-active-p)
           (capitalize-region (region-beginning) (region-end))
         (capitalize-word (prefix-numeric-value arg))))

     )
   #+END_SRC
** move and bind text around
*** definitions
    This override for transpose-words fixes what I consider to be a flaw with the default implementation in simple.el. To transpose chars or lines, you always put the point on the second char or line
    to transpose with the previous char or line. The default transpose-words implementation does the opposite by flipping the current word with the next word instead of the previous word. The new
    implementation below instead makes transpose-words more consistent with how transpose-chars and trasponse-lines behave.
    #+BEGIN_SRC emacs-lisp
      (defun custom/transpose-words (arg)
        "[Override for default transpose-words in simple.el]
        Interchange words around point, leaving point at end of
        them. With prefix arg ARG, effect is to take word before or
        around point and drag it backward past ARG other words (forward
        if ARG negative). If ARG is zero, the words around or after
        point and around or after mark are interchanged."
        (interactive "*p")
        (if (eolp) (forward-char -1))
        (transpose-subr 'backward-word arg)
        (forward-word (+ arg 1)))
    #+END_SRC
*** setup
    #+BEGIN_SRC emacs-lisp
      (req-package anchored-transpose)

      (req-package drag-stuff
        :config
        (setq drag-stuff-modifier '(meta shift))
        (turn-off-drag-stuff-mode))

      (req-package snakehump)
      (req-package adaptive-wrap)
      (req-package hungry-delete)
      (req-package replace+)

      (req-package multiple-cursors)

      (req-package mc-extras
        ;;TODO: explore and bind functions
        :require multiple-cursors
        :defer t)

      (req-package ace-mc
        :require ace-jump-mode multiple-cursors dash
        :config
        (global-set-key (kbd "C-)") 'ace-mc-add-multiple-cursors))

      ;; Transpose stuff with M-t
      (global-unset-key (kbd "M-t")) ;; which used to be transpose-words
      ;;TODO: plan docstring
      (defhydra hydra-transpose ()
        ("M-b" backward-word "prev word")
        ("M-f" forward-word "next word")
        ("<up>" previous-line "prev line")
        ("<down>" next-line "next line")
        ("<left>" backward-char "prev char")
        ("<right>" forward-char "next char")
        ("_" undo-tree-undo "undo last")
        ("w" custom/transpose-words "on words")
        ("s" transpose-sexps "on sexps")
        ("p" transpose-params "on params")
        ("a" anchored-transpose "anchored")
        ("q" nil "cancel"))
      (global-set-key (kbd "M-t") 'hydra-transpose/body)
    #+END_SRC
** commenting
   #+BEGIN_SRC emacs-lisp
     ;; see http://emacs-fu.blogspot.ru/2010/01/duplicating-lines-and-commenting-them.html
     (defun custom/duplicate-and-comment-line (arg)
       "comment line at point; if COMMENTFIRST is non-nil, comment the original"
       (interactive "P")
       (beginning-of-line)
       (push-mark)
       (end-of-line)
       (let ((str (buffer-substring (region-beginning) (region-end))))
         (when arg
           (comment-region (region-beginning) (region-end)))
         (insert-string
          (concat (if (= 0 (forward-line 1)) "" "\n") str "\n"))
         (forward-line -1)))

     (req-package comment-dwim-2
       :config
       (global-set-key (kbd "M-]") 'comment-dwim-2))

     (req-package rebox2) ;;TODO: bind commands

     (setq comment-style 'indent)
   #+END_SRC
** clipboard and killring
   #+BEGIN_SRC emacs-lisp
     (req-package savekill)
   #+END_SRC
** undo/redo
   #+BEGIN_SRC emacs-lisp
     (setq undo-limit 1000000)

     (req-package undo-tree
       :defer t
       :config
       (global-undo-tree-mode t)
       (setq undo-tree-mode-lighter "")
       (setq undo-tree-visualizer-timestamps t)
       (setq undo-tree-visualizer-diff t))
   #+END_SRC
** utils
*** definitions
    #+BEGIN_SRC emacs-lisp
      (define-namespace custom/

      ;; current date and time.
      (defun insert-current-date-time()
        "Insert the current date and time at point."
        (interactive "*")
        (insert (format-time-string "[%d.%m.%Y - %H:%M]" (current-time))))

      (defun strip-prefix (prefix lines)
        (s-join "\n"
                (mapcar (lambda (s) (s-chop-prefix prefix s))
                        (s-lines lines))))

      )
    #+END_SRC
*** setup
    #+BEGIN_SRC emacs-lisp
      (req-package table) ;; table
      (req-package epoch-view :disabled t)

      (req-package yatemplate
        :require yasnippet
        :init
        (auto-insert-mode)
        :config
        (setq yatemplate-dir (at-config-basedir "resources/auto-insert"))
        (yatemplate-fill-alist))

      (req-package whitespace :defer t)

      (req-package mark
        :require fm
        :config
        (defhydra hydra-mark ()
          ("<right>" forward-mark "forward-mark")
          ("<left>" backward-mark "backward-mark")
          ("<down>" show-marks "show-marks"))
        (global-set-key (kbd "<f12>") 'hydra-mark/body))

      (req-package page-break-lines
        :config
        (turn-on-page-break-lines-mode))

      (req-package macro-math
        :disabled t
        :config
        (global-set-key "\C-x~" 'macro-math-eval-and-round-region)
        (global-set-key "\C-x=" 'macro-math-eval-region))

      ;;TODO: consolidate all whitespaces utils
      (req-package ws-butler :commands ws-buttler-mode)

      (req-package composable
        :config
        (composable-mode)
        (composable-mark-mode))
    #+END_SRC
** major modes
   #+BEGIN_SRC emacs-lisp
     (req-package rst)

     (req-package generic
       :disabled t
       :init
       (req-package generic-x)
       :config
       (define-generic-mode 'keymap-mode
         '("#")
         '("control" "meta" "shift" "alt" "altgr" "compose" "keycode")
         nil
         '(".keymap\\'" ".map\\'")
         nil)
       (setq generic-default-modes (delete 'javascript-generic-mode
                                           generic-default-modes)))

     (req-package vimrc-mode
       :defer t
       :mode ".vim\\(rc\\)?$")

     (req-package crontab-mode)
     (req-package csv-mode)
     (req-package fic-mode)
     (req-package nginx-mode)
   #+END_SRC
** sexps
   #+BEGIN_SRC emacs-lisp
     (req-package highlight-sexp)

     ;; TODO compare with paredit and finally choose one (sane non-lisp modes setup intended)
     (req-package smartparens
       :disabled t
       :require cl-lib dash
       :config
       (req-package smartparens-config)
       (smartparens-global-strict-mode t)
       (show-smartparens-global-mode t)
       (sp-use-smartparens-bindings)
       (define-key smartparens-mode-map (kbd "C-M-t") 'sp-transpose-sexp)
       (bind-key "M-F" nil smartparens-mode-map)
       (bind-key "M-B" nil smartparens-mode-map)
       (bind-key "M-<backspace>" nil smartparens-mode-map)
       (define-key sp-keymap (kbd "C-S-a") 'sp-beginning-of-sexp)
       (define-key sp-keymap (kbd "C-S-d") 'sp-end-of-sexp)
       (define-key emacs-lisp-mode-map (kbd ")") 'sp-up-sexp)
       (define-key sp-keymap (kbd "C-<left_bracket>") 'sp-select-previous-thing)
       (define-key sp-keymap (kbd "C-c s r n") 'sp-narrow-to-sexp)
       (define-key sp-keymap (kbd "C-c s t") 'sp-prefix-tag-object)
       (define-key sp-keymap (kbd "C-c s p") 'sp-prefix-pair-object)
       (define-key sp-keymap (kbd "C-c s y") 'sp-prefix-symbol-object)
       (define-key sp-keymap (kbd "C-c s c") 'sp-convolute-sexp)
       (define-key sp-keymap (kbd "C-c s a") 'sp-absorb-sexp)
       (define-key sp-keymap (kbd "C-c s w") 'sp-rewrap-sexp)
       (define-key sp-keymap (kbd "C-c s e") 'sp-emit-sexp)
       (define-key sp-keymap (kbd "C-c s p") 'sp-add-to-previous-sexp)
       (define-key sp-keymap (kbd "C-c s n") 'sp-add-to-next-sexp)
       (define-key sp-keymap (kbd "C-c s j") 'sp-join-sexp)
       (define-key sp-keymap (kbd "C-c s s") 'sp-split-sexp))

     (req-package paredit
       :config
       (defun common-hooks/sexp-editing-hook ()
         (when (member major-mode custom/sexp-editing-modes)
           (paredit-mode 1)))
       (add-hook 'prog-mode-hook 'common-hooks/sexp-editing-hook))
   #+END_SRC
** some fancy editing methods
   #+BEGIN_SRC emacs-lisp
     (req-package edit-indirect)
     (req-package narrow-indirect)

     (req-package miniedit
       :defer t
       :commands minibuffer-edit
       :init (miniedit-install))
   #+END_SRC
** indentation
   #+BEGIN_SRC emacs-lisp
     (setq indent-tabs-mode nil)

     (req-package dtrt-indent
       :config
       (dtrt-indent-mode))

     (setq-default tab-width 4)
   #+END_SRC
** setup basic minor modes
   #+BEGIN_SRC emacs-lisp
     (auto-compression-mode t)
     (delete-selection-mode t)
     (electric-indent-mode -1)
     (global-auto-revert-mode 1);; Auto refresh buffers
     (show-paren-mode t)
     (transient-mark-mode 1)
   #+END_SRC
** set variables
   #+BEGIN_SRC emacs-lisp
     (setq auto-revert-verbose nil)
     (setq global-auto-revert-non-file-buffers t)
     (setq default-input-method 'russian-computer)
     (setq delete-by-moving-to-trash t);; Move files to trash when deleting
     (setq kill-whole-line t)
     (setq kmacro-ring-max 16)
     (setq mark-even-if-inactive t)
     (setq next-line-add-newlines nil)
     (setq sentence-end-double-space nil)
     (setq tab-always-indent t)
     (setq transient-mark-mode t)
     (setq user-full-name (capitalize global-username))
     (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
     ;; don't let the cursor go into minibuffer prompt
     (setq minibuffer-prompt-properties
           '(read-only t point-entered minibuffer-avoid-prompt face minibuffer-prompt))

     (set-default 'indent-tabs-mode nil);; Never insert tabs
     (setq-default fill-column 200)
     (setq-default indicate-empty-lines t)
     (setq-default transient-mark-mode t)
     (setq-default truncate-lines t);; Don't break lines for me, please

     (setq x-stretch-cursor t)
     (setq blink-matching-paren nil)
     (setq show-paren-delay 0)
     (setq mouse-wheel-scroll-amount '(1 ((shift) . 1)))
     (setq mouse-wheel-progressive-speed nil)
     (setq set-mark-command-repeat-pop t)

     (make-variable-buffer-local 'transient-mark-mode)
     (put 'transient-mark-mode 'permanent-local t)

     (setq whitespace-style '(indentation::space
                              space-after-tab
                              space-before-tab
                              trailing
                              lines-tail
                              tab-mark
                              face
                              tabs))
   #+END_SRC
** add hooks
   #+BEGIN_SRC emacs-lisp
     (add-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p)
     (add-hook 'text-mode-hook 'turn-on-auto-fill)
     (add-hook 'text-mode-hook 'text-mode-hook-identify)
   #+END_SRC
** hydras and keys
   #+BEGIN_SRC emacs-lisp
     ;;TODO: plan docstring
     (defhydra hydra-edit (:color blue)
       ("0" custom/compact-spaces-in-region)
       ("2" custom/duplicate-and-comment-line)
       ("4" snakehump-next-at-point)
       ("<left>" jump-char-backward)
       ("<right>" jump-char-forward)
       ("C-SPC" comment-dwim)
       ("C-r" custom/join-region) ;;FIXME: custom/join-region is inexistent
       ("M-a" indent-region)
       ("SPC" untabify)
       ("TAB" tabify)
       ("[" comment-region)
       ("]" uncomment-region)
       ("`" redraw-display)
       ("b" subword-mode)
       ("d" diff-buffer-with-file)
       ("f" custom/copy-file-name-to-clipboard)
       ("i" custom/insert-current-date-time)
       ("o" just-one-space)
       ("p" whitespace-mode)
       ("r" query-replace)
       ("n" custom/rename-file-and-buffer)
       ("s" sort-lines)
       ("t" delete-trailing-whitespace)
       ("u" delete-duplicate-lines)
       ("v" view-mode)
       ("x" query-replace-regexp)
       ("a" custom/append-cited-region)
       ("g" insert-register)
       ("e" copy-to-register)
       ("m" rename-uniquely)
       ("S" scratch)
       ("y" revbufs)
       ("k" custom/kill-save-rectangle)
       ("K" append-next-kill)
       ("/" comment-box)
       ("w" wrap-to-fill-column-mode)
       ("=" edit-indirect-region)
       ("q" nil "cancel"))
     (global-set-key (kbd "C-z") 'hydra-edit/body)

     (defhydra hydra-toggle (:color blue)
       "
       TOGGLE: de_b_ug on error (%(format \"%S\" debug-on-error))
       _d_ / _D_ toggle drag-stuff mode on/off (%(format \"%S\" drag-stuff-mode))
       _w_hitespace mode
       "
       ("b" toggle-debug-on-error "debug on error")
       ("w" whitespace-mode "whitespace mode")
       ("d" turn-on-drag-stuff-mode "enable drag-stuff mode")
       ("D" turn-off-drag-stuff-mode "disable drag-stuff mode")
       ("h" highlight-sexp-mode "toggle highlight-sexp mode")
       ("q" toggle-debug-on-quit "toggle debug-on-quit mode")
       ("p" toggle-projectile-global-mode "toggle projectile-global-mode"))
     (global-set-key (kbd "<f11>") 'hydra-toggle/body)

     (defhydra hydra-cases (:color pink)
       "
       _d_ / _d_ downcase word/region
       _u_ / _u_ upcase word/region
       _I_       capitalize region
       "
       ("d" downcase-word)
       ("d" downcase-region :color blue)
       ("u" upcase-word)
       ("u" upcase-region :color blue)
       ("I" upcase-initials-region :color blue))
     (global-set-key (kbd "<f10>") 'hydra-cases/body)

     (global-set-key (kbd "M-g") 'goto-line)
     (global-set-key (kbd "M-\"") 'eval-region)
     (global-set-key (kbd "M-y") 'helm-show-kill-ring)
     ;; (global-set-key "\C-x\ f" 'find-file) ; I never use set-fill-column and I hate hitting it by accident.
     (global-set-key [remap move-beginning-of-line] 'custom/smarter-move-beginning-of-line)
     (global-set-key (kbd "M-SPC") 'cycle-spacing) ;; TODO: maybe place into some hydra
   #+END_SRC
** try
*** unicode and indentation
    #+BEGIN_SRC emacs-lisp :tangle no
      (defmacro my/insert-unicode (unicode-name)
        `(lambda () (interactive)
           (insert-char (cdr (assoc-string ,unicode-name (ucs-names))))))
      (bind-key "C-x 8 s" (my/insert-unicode "ZERO WIDTH SPACE"))
      (bind-key "C-x 8 S" (my/insert-unicode "SNOWMAN"))

      (defun sanityinc/kill-back-to-indentation ()
        "Kill from point back to the first non-whitespace character on the line."
        (interactive)
        (let ((prev-pos (point)))
          (back-to-indentation)
          (kill-region (point) prev-pos)))

      (bind-key "C-M-<backspace>" 'sanityinc/kill-back-to-indentation)
    #+END_SRC
*** narrow and widen
    #+BEGIN_SRC emacs-lisp :tangle no
      (defun narrow-or-widen-dwim (p)
        "Widen if buffer is narrowed, narrow-dwim otherwise.
      Dwim means: region, org-src-block, org-subtree, or defun,
      whichever applies first. Narrowing to org-src-block actually
      calls `org-edit-src-code'.

      With prefix P, don't widen, just narrow even if buffer is
      already narrowed."
        (interactive "P")
        (declare (interactive-only))
        (cond ((and (buffer-narrowed-p) (not p)) (widen))
              ((region-active-p)
               (narrow-to-region (region-beginning) (region-end)))
              ((derived-mode-p 'org-mode)
               ;; `org-edit-src-code' is not a real narrowing
               ;; command. Remove this first conditional if you
               ;; don't want it.
               (cond ((ignore-errors (org-edit-src-code))
                      (delete-other-windows))
                     ((ignore-errors (org-narrow-to-block) t))
                     (t (org-narrow-to-subtree))))
              ((derived-mode-p 'latex-mode)
               (LaTeX-narrow-to-environment))
              (t (narrow-to-defun))))

      (define-key endless/toggle-map "n" #'narrow-or-widen-dwim)
      ;; This line actually replaces Emacs' entire narrowing
      ;; keymap, that's how much I like this command. Only copy it
      ;; if that's what you want.
      (define-key ctl-x-map "n" #'narrow-or-widen-dwim)
      (eval-after-load 'latex
        '(define-key LaTeX-mode-map "\C-xn" nil))
    #+END_SRC
**** TODO consolidate all narrow/widen functionality
*** fix spelling
    credits to amalabarba
    #+BEGIN_SRC emacs-lisp
      (define-key ctl-x-map "\C-i"
        #'endless/ispell-word-then-abbrev)

      (defun endless/ispell-word-then-abbrev (p)
        "Call `ispell-word', then create an abbrev for it.
      With prefix P, create local abbrev. Otherwise it will
      be global.
      If there's nothing wrong with the word at point, keep
      looking for a typo until the beginning of buffer. You can
      skip typos you don't want to fix with `SPC', and you can
      abort completely with `C-g'."
        (interactive "P")
        (let (bef aft)
          (save-excursion
            (while (if (setq bef (thing-at-point 'word))
                       ;; Word was corrected or used quit.
                       (if (ispell-word nil 'quiet)
                           nil ; End the loop.
                         ;; Also end if we reach `bob'.
                         (not (bobp)))
                     ;; If there's no word at point, keep looking
                     ;; until `bob'.
                     (not (bobp)))
              (backward-word))
            (setq aft (thing-at-point 'word)))
          (if (and aft bef (not (equal aft bef)))
              (let ((aft (downcase aft))
                    (bef (downcase bef)))
                (define-abbrev
                  (if p local-abbrev-table global-abbrev-table)
                  bef aft)
                (message "\"%s\" now expands to \"%s\" %sally"
                         bef aft (if p "loc" "glob")))
            (user-error "No typo at or before point"))))

      (setq save-abbrevs 'silently)
      (setq-default abbrev-mode t)
    #+END_SRC
*** fill/unfill paragraph
    #+BEGIN_SRC emacs-lisp :tangle no
      (defun endless/fill-or-unfill ()
        "Like `fill-paragraph', but unfill if used twice."
        (interactive)
        (let ((fill-column
               (if (eq last-command 'endless/fill-or-unfill)
                   (progn (setq this-command nil)
                          (point-max))
                 fill-column)))
          (call-interactively #'fill-paragraph)))

      (global-set-key [remap fill-paragraph]
                      #'endless/fill-or-unfill)
    #+END_SRC
* completion
** yasnippet
*** definitions
    #+BEGIN_SRC emacs-lisp
      (define-namespace custom/

      (setq yasnippet-dir (at-config-basedir "resources/yasnippet/"))
      (setq yasnippet-private-dir (at-config-basedir "resources/yasnippet-private/"))

      ;; Inter-field navigation
      (defun yas-goto-end-of-active-field ()
        (interactive)
        (let* ((snippet (car (yas--snippets-at-point)))
               (position (yas--field-end (yas--snippet-active-field snippet))))
          (if (= (point) position)
              (move-end-of-line)
            (goto-char position))))

      (defun yas-goto-start-of-active-field ()
        (interactive)
        (let* ((snippet (car (yas--snippets-at-point)))
               (position (yas--field-start (yas--snippet-active-field snippet))))
          (if (= (point) position)
              (move-beginning-of-line)
            (goto-char position))))

      ;; hook for automatic reloading of changed snippets
      (defun update-yasnippets-on-save ()
        (when (string-match "/resources/yasnippet" buffer-file-name)
          (yas/load-directory custom/yasnippet-dir)))

      (defun ac-page-next ()
        "Select next completion candidate per `ac-menu-height' range.
         Pages down through completion menu."
        (interactive)
        (let ((counter 0))
          (dotimes (counter (1- ac-menu-height))
            (ac-next))))

      (defun ac-page-previous ()
        "Select previous completion candidate per `ac-menu-height' range.
         Pages up through completion menu."
        (interactive)
        (let ((counter 0))
          (dotimes (counter (1- ac-menu-height))
            (ac-previous))))

      )
    #+END_SRC
*** setup
    #+BEGIN_SRC emacs-lisp
      (req-package yasnippet
        :require diminish
        :defer t
        :diminish yas-minor-mode
        :commands yas-global-mode
        :config
        (add-hook 'hippie-expand-try-functions-list 'yas-hippie-try-expand)
        (setq yas-key-syntaxes '("w" "w_" "w_." "^ " "w_.()" yas-try-key-from-whitespace))
        (setq yas-expand-only-for-last-commands '(self-insert-command))
        (yas-global-mode 1)
        (bind-key "\t" 'hippie-expand yas-minor-mode-map)
        ;; unset both to remove ALL translations
        (define-key yas-minor-mode-map [(tab)] nil) ;FIXME: try using unbind-key
        (define-key yas-minor-mode-map (kbd "TAB") nil)
        (bind-key "C-M-<return>" 'helm-yas-complete)
        ;;TODO: bind helm-yas-create-snippet-on-region
        (setq yas/next-field-key '("<backtab>" "<S-tab>"))
        (setq yas/prev-field-key '("<C-tab>"))
        (setq yas-snippet-dirs nil)
        (setq helm-yas-space-match-any-greedy t)
        (push custom/yasnippet-dir yas-snippet-dirs)
        (push custom/yasnippet-private-dir yas-snippet-dirs)
        (yas-global-mode 1)
        (setq yas-prompt-functions
              '(yas-completing-prompt
                yas-x-prompt
                yas-no-prompt))
        ;; Wrap around region
        (setq yas/wrap-around-region t)
        (add-hook 'after-save-hook 'custom/update-yasnippets-on-save)
        ;; Jump to end of snippet definition
        (define-key yas/keymap (kbd "<return>") 'yas/exit-all-snippets) ;FIXME: try using bind-key
        (define-key yas/keymap (kbd "C-e") 'custom/yas-goto-end-of-active-field)
        (define-key yas/keymap (kbd "C-a") 'custom/yas-goto-start-of-active-field))

      (req-package helm-c-yasnippet :require helm yasnippet cl-lib)
      (req-package auto-yasnippet :require yasnippet)

      ;;TODO: splice into yasnippet package definition
      (defhydra hydra-yasnippet (:color teal)
        "
        _c_reate auto snippet
        _e_xpand auto snippet
        _p_ersist auto snippet
        _v_isit snippets file
        _i_nsert snippet
        "
        ("c" aya-create)
        ("e" aya-expand)
        ("p" aya-persist-snippet)
        ("v" yas-visit-snippet-file)
        ("i" yas-insert-snippet)
        ("q" nil))
      (global-set-key (kbd "<f5>") 'hydra-yasnippet/body)
    #+END_SRC
** auto-complete
*** definitions
    #+BEGIN_SRC emacs-lisp
      (defun custom/ielm-auto-complete ()
        "Enables `auto-complete' support in \\[ielm]."
        (setq ac-sources '(ac-source-functions
                           ac-source-variables
                           ac-source-features
                           ac-source-symbols
                           ac-source-words-in-same-mode-buffers))
        (add-to-list 'ac-modes 'inferior-emacs-lisp-mode))
    #+END_SRC
*** setup
    #+BEGIN_SRC emacs-lisp
      (req-package auto-complete
        :require popup cl-lib
        :commands auto-complete
        :init
        (req-package auto-complete-config)
        :config
        (ac-config-default)
        (global-auto-complete-mode t)
        (diminish 'auto-complete-mode " α")
        (setq ac-auto-start nil)
        (setq ac-quick-help-delay 0.5)
        (setq ac-fuzzy-enable t)
        (add-hook 'auto-complete-mode-hook 'ac-common-setup)
        (define-key ac-complete-mode-map [next] 'custom/ac-page-next)
        (define-key ac-complete-mode-map [prior] 'custom/ac-page-previous)
        (define-key ac-complete-mode-map (kbd "C-s") 'ac-isearch)
        (global-set-key (kbd "C-<tab>") 'auto-complete)
        ;; TODO: bind lambda (setq ac-comphist nil) for emeregency completion history purge
        )

      (req-package ac-math :require auto-complete math-symbol-lists)
    #+END_SRC
** hippie-expand
   #+BEGIN_SRC emacs-lisp
     (req-package hippie-expand
       :config
       (setq hippie-expand-try-functions-list
             '(yas-hippie-try-expand
               try-expand-all-abbrevs
               try-complete-file-name-partially
               try-complete-file-name
               try-expand-dabbrev
               try-expand-dabbrev-from-kill
               try-expand-dabbrev-all-buffers
               try-expand-list
               try-expand-line
               try-complete-lisp-symbol-partially
               try-complete-lisp-symbol))
       (global-set-key (kbd "C-S-<iso-lefttab>") 'hippie-expand))
   #+END_SRC
* programming
** common
*** flake8 utils
    #+BEGIN_SRC emacs-lisp :tangle no
      (define-namespace custom/

      (defvar flake8-conf-alist nil
        "Alist of flake8 configuration files for various projects")

      ;;FIXME: try to use flycheck's builtin functionality
      (defun find-project-flake8-config ()
        (let* ((project-root (file-truename (custom/project-root default-directory)))
               (config-path (cdr (assoc (file-name-base (directory-file-name project-root)) flake8-conf-alist))))
          (if (file-name-absolute-p config-path)
              (when (file-exists-p config-path)
                config-path)
            (concat project-root config-path))))

      (defun project-root (file-path)
        "Guess the project root of the given FILE-PATH."
        (or (vc-git-root file-path)
            (vc-svn-root file-path)
            (vc-hg-root file-path)
            file-path))

      )
    #+END_SRC
**** BACKLOG review flake8 known problems and OBV search for solutions
*** flycheck
    #+BEGIN_SRC emacs-lisp
      (req-package flycheck
        :require dash pkg-info let-alist seq
        :config
        (add-hook 'flycheck-mode-hook 'flycheck-color-mode-line-mode)
        (setq flycheck-check-syntax-automatically '(idle-change)))

      (req-package flycheck-color-mode-line :require flycheck dash)
    #+END_SRC
**** BACKLOG review concrete checkers functionality and usage
*** gdb
    #+BEGIN_SRC emacs-lisp
      (req-package gud
        :init
        (req-package gdb-mi)
        :config
        (setq gdb-many-windows t)
        (setq gdb-show-main t)
        (setq gdb-use-separate-io-buffer t)
        (setq gud-chdir-before-run nil)
        (setq gud-tooltip-mode t))
    #+END_SRC
*** eldoc
    #+BEGIN_SRC emacs-lisp
      (req-package c-eldoc)
      (req-package eldoc-eval)

      (req-package eldoc
        :defer t
        :init
        (setq eldoc-idle-delay 0) ;; eldoc mode for showing function calls in mode line
        (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
        (add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
        (add-hook 'ielm-mode-hook 'turn-on-eldoc-mode)
        (add-hook 'c-mode-hook 'c-turn-on-eldoc-mode)
        (add-hook 'c++-mode-hook 'c-turn-on-eldoc-mode)
        (add-hook 'css-mode-hook 'turn-on-css-eldoc)
        :config
        (diminish 'eldoc-mode "ED"))

      (req-package css-eldoc
        :ensure t
        :config
        (turn-on-css-eldoc))
    #+END_SRC
**** try
     #+BEGIN_SRC emacs-lisp :tangle no
       (req-package "eldoc"
         :require diminish
         :diminish eldoc-mode
         :commands turn-on-eldoc-mode
         :defer t
         :init
         (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
         (add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
         (add-hook 'ielm-mode-hook 'turn-on-eldoc-mode))
     #+END_SRC
*** print path within json
    #+BEGIN_SRC emacs-lisp
      (defun custom/js2-print-json-path ()
        "Print the path to the JSON value under point, and save it in the kill ring."
        (interactive)
        (let (next-node node-type rlt key-name)
          (setq next-node (js2-node-at-point))
          ;; scanning from AST, no way to optimise `js2-node-at-point'
          (while (and next-node (arrayp next-node) (> (length next-node) 5))
            (setq node-type (aref next-node 0))
            (cond
             ;; json property node
             ((eq node-type 'cl-struct-js2-object-prop-node)
              (setq key-name (js2-prop-node-name (js2-object-prop-node-left next-node)))
              (if rlt (setq rlt (concat "." key-name rlt))
                (setq rlt (concat "." key-name))))

             ;; array node
             ((or (eq node-type 'cl-struct-js2-array-node)
                  (eq node-type 'cl-struct-js2-infix-node))
              (if rlt (setq rlt (concat "[0]" rlt))
                (setq rlt "[0]")))

             (t)) ; do nothing

            ;; get parent node
            (setq next-node (aref next-node 5)))
          ;; clean final result
          (setq rlt (replace-regexp-in-string "^\\." "" rlt))
          (when rlt
            (kill-new rlt)
            (message "%s => kill-ring" rlt))
          rlt))
    #+END_SRC
*** common hooks
    #+BEGIN_SRC emacs-lisp
      (defun common-hooks/newline-hook ()
        (local-set-key (kbd "C-m") 'newline-and-indent)
        (local-set-key (kbd "<return>") 'newline-and-indent))

      ;; show FIXME/TODO/BUG keywords
      (defun common-hooks/prog-helpers ()
          ;; highlight additional keywords
          (font-lock-add-keywords nil '(("\\<\\(FIXME\\|FIX_ME\\|FIX ME\\):" 1 font-lock-warning-face t)))
          (font-lock-add-keywords nil '(("\\<\\(BUG\\|BUGS\\):" 1 font-lock-warning-face t)))
          (font-lock-add-keywords nil '(("\\<\\(TODO\\|TO DO\\NOTE\\|TBD\\):" 1 font-lock-warning-face t)))
          (font-lock-add-keywords nil '(("\\<\\(DONE\\|HACK\\):" 1 font-lock-doc-face t)))
          ;; highlight too long lines
          (font-lock-add-keywords nil '(("^[^\n]\\{120\\}\\(.*\\)$" 1 font-lock-warning-face t))))
    #+END_SRC
*** handy packages
    #+BEGIN_SRC emacs-lisp
      (req-package compile)
      (req-package gtags)
      (req-package hide-comnt)
      (req-package regex-tool)
    #+END_SRC
** vcs
*** git
    #+BEGIN_SRC emacs-lisp
      (req-package magit
        :require async dash with-editor git-commit magit-popup
        :config
        (bind-key "E" 'magit-rebase-interactive magit-status-mode-map)
        (setq magit-blame-heading-format "%H %-20a %C %s")
        (setq magit-diff-refine-hunk t)
        (add-to-list 'display-buffer-alist
                     `(,(rx "*magit: ")
                       (custom/display-buffer-fullframe)
                       (reusable-frames . nil)))
        (defhydra hydra-magit (:color teal :hint nil)
          "
           PROJECT: %(projectile-project-root)

           Immuting            Mutating
           -----------------------------------------
           _s_: status          _c_: checkout
           _l_: log             _B_: branch mgr
           _f_: file log
           _r_: reflog
           _w_: diff worktree
           _t_: time machine
           _b_: blame
           "
          ("s" magit-status)
          ("f" magit-log-buffer-file)
          ("c" magit-checkout)
          ("w" magit-diff-working-tree)
          ("r" magit-reflog)
          ("b" magit-blame)
          ("B" magit-branch-manager)
          ("l" magit-log)
          ("t" git-timemachine))
        (global-set-key (kbd "C-'") 'hydra-magit/body))

      (req-package magit-filenotify
        :require magit diminish
        :config
        (add-hook 'magit-status-mode-hook 'magit-filenotify-mode)
        (diminish 'magit-filenotify-mode "FN"))

      (req-package git-gutter
        :require cl-lib
        :config
        (setq git-gutter:modified-sign "?")
        (set-face-attribute 'git-gutter:modified nil :foreground "yellow" :inverse-video nil)
        (set-face-attribute 'git-gutter:added nil :inverse-video nil)
        (set-face-attribute 'git-gutter:deleted nil :inverse-video nil)
        (set-face-attribute 'git-gutter:unchanged nil :inverse-video nil)
        (global-git-gutter-mode +1))

      (req-package git-timemachine)
      (req-package gitignore-mode)
    #+END_SRC
*** smerge mode
    #+BEGIN_SRC emacs-lisp
      (req-package smerge-mode)

      (defun sm-try-smerge ()
        (save-excursion
          (goto-char (point-min))
          (when (re-search-forward "^<<<<<<< " nil t)
            (smerge-mode 1))))

      (add-hook 'find-file-hooks 'sm-try-smerge t)
    #+END_SRC
*** common
    #+BEGIN_SRC emacs-lisp
      ;; FIXME code duplication, think of finding the widely used util or something similar
      (autoload 'vc-git-root "vc-git")
      (autoload 'vc-svn-root "vc-svn")
      (autoload 'vc-hg-root "vc-hg")

      (remove-hook 'find-file-hooks 'vc-find-file-hook)
      (req-package ediff
        :disabled t
        :config
        (setq ediff-window-setup-function 'ediff-setup-windows-plain)
        (setq ediff-split-window-function 'split-window-horizontally)
        (setq ediff-diff-options "-w"))
    #+END_SRC
** languages
*** common
    #+BEGIN_SRC emacs-lisp
      (req-package info-look :force t)
    #+END_SRC
*** elisp
**** setup
     #+BEGIN_SRC emacs-lisp
       (req-package el-spice :require thingatpt+)
       (req-package edebug-x)

       (req-package elisp-slime-nav
         :require cl-lib
         :config
         (dolist (hook '(emacs-lisp-mode-hook ielm-mode-hook))
           (add-hook hook 'elisp-slime-nav-mode)))

       (req-package erefactor
         :disabled t
         :require cl-lib
         :config
         ;;TODO: investigate package
         (bind-key "C-c C-v" erefactor-map emacs-lisp-mode-map))

       (setq print-circle t)
       (setq print-gensym t)
       (setq eval-expression-print-length nil)
       (setq eval-expression-print-level nil)

       (defun custom/elisp-mode-hook ()
         (auto-fill-mode 1)
         (setq indent-tabs-mode nil)
         (setq comment-start ";;")
         (turn-on-eldoc-mode))

       (add-hook 'emacs-lisp-mode-hook 'custom/elisp-mode-hook)
       (add-hook 'emacs-lisp-mode-hook 'common-hooks/prog-helpers)
       (add-hook 'emacs-lisp-mode-hook 'common-hooks/newline-hook)
       (add-hook 'emacs-lisp-mode-hook 'ac-emacs-lisp-mode-setup)
       (add-hook 'ielm-mode-hook 'custom/ielm-auto-complete)
       (add-hook 'eval-expression-minibuffer-setup-hook #'eldoc-mode)
       (dolist (mode '(paredit-mode smartparens-mode))
         (when (fboundp mode)
           (add-hook 'eval-expression-minibuffer-setup-hook mode)))
     #+END_SRC
**** try
***** 1
      #+BEGIN_SRC emacs-lisp :tangle no
        ;; C-c C-v l : elint current buffer in clean environment.
        ;; C-c C-v L : elint current buffer by multiple emacs binaries.
        ;;             See `erefactor-lint-emacsen'
        ;; C-c C-v r : Rename symbol in current buffer.
        ;;             Resolve `let' binding as long as i can.
        ;; C-c C-v R : Rename symbol in requiring modules and current buffer.
        ;; C-c C-v h : Highlight current symbol in this buffer
        ;;             and suppress `erefacthr-highlight-mode'.
        ;; C-c C-v d : Dehighlight all by above command.
        ;; C-c C-v c : Switch prefix bunch of symbols.
        ;;             ex: '(hoge-var hoge-func) -> '(foo-var foo-func)
        ;; C-c C-v ? : Display flymake elint warnings/errors
      #+END_SRC
*** javascript
    #+BEGIN_SRC emacs-lisp
      (req-package js2-mode
        :require cl-lib
        :init
        (req-package js2-imenu-extras)
        :config
        (js2-imenu-extras-setup)
        (setq js2-use-font-lock-faces t)
        (setq js2-allow-keywords-as-property-names nil)
        (setq js2-bounce-indent-flag nil)
        (setq js2-cleanup-whitespace t)
        (setq js2-enter-indents-newline nil)
        (setq js2-highlight-level 3)
        (setq js2-indent-on-enter-key nil)
        (setq js2-skip-preprocessor-directives t)
        (setq js2-basic-offset 4)
        (setq js2-bounce-indent-p t)
        ;; Special improvements using the mooz fork
        ;; https://github.com/mooz/js2-mode
        (setq js2-consistent-level-indent-inner-bracket-p t)
        (setq js2-use-ast-for-indentation-p t)
        (add-to-list 'interpreter-mode-alist (cons "node" 'js2-mode))
        (setq-default js2-global-externs
                      '("module" "require" "jQuery" "$" "_" "buster"
                        "sinon" "assert" "refute" "setTimeout" "clearTimeout"
                        "setInterval" "clearInterval" "location" "__dirname" "console" "JSON"))
        (setq-default js2-idle-timer-delay 0.1)
        (setq-default js2-mirror-mode t)
        (setq-default js2-auto-indent-p t)
        (setq-default js2-concat-multiline-strings 'eol)
        ;; After js2 has parsed a js file, we look for jslint globals decl comment ("/* global Fred, _, Harry */") and
        ;; add any symbols to a buffer-local var of acceptable global vars
        ;; Note that we also support the "symbol: true" way of specifying names via a hack (remove any ":true"
        ;; to make it look like a plain decl, and any ':false' are left behind so they'll effectively be ignored as
        ;; you can;t have a symbol called "someName:false"
        (add-hook 'js2-post-parse-callbacks
                  (lambda ()
                    (when (> (buffer-size) 0)
                      (let ((btext (replace-regexp-in-string
                                    ": *true" " "
                                    (replace-regexp-in-string "[\n\t ]+" " " (buffer-substring-no-properties 1 (buffer-size)) t t))))
                        (mapc (apply-partially 'add-to-list 'js2-additional-externs)
                              (split-string
                               (if (string-match "/\\* *global *\\(.*?\\) *\\*/" btext) (match-string-no-properties 1 btext) "")
                               " *, *" t))
                        ))))
        (add-hook 'js2-mode-hook '(lambda ()
                                    (setq flycheck-checker 'javascript-jshint)
                                    (tern-mode t)))
        ;;TODO: maybe make hydra
        (define-key js2-mode-map (kbd "C-x C-e") 'js-send-last-sexp)
        (define-key js2-mode-map (kbd "C-M-x") 'js-send-last-sexp-and-go)
        (define-key js2-mode-map (kbd "C-c b") 'js-send-buffer)
        (define-key js2-mode-map (kbd "C-c C-b") 'js-send-buffer-and-go)
        (define-key js2-mode-map (kbd "C-c l") 'js-load-file-and-go))

      ;; TODO: play with js2-refactor
      (req-package js2-refactor
        :require js2-mode s multiple-cursors dash s yasnippet
        :config
        (js2r-add-keybindings-with-prefix "C-c C-j"))

      (req-package tern
        :require json cl-lib
        :commands tern-mode
        :init
        :config
        (tern-ac-setup))

      (req-package tern-auto-complete :require tern auto-complete cl-lib)

      (req-package xref-js2
        :require js2-mode
        :config
        (define-key js2-mode-map (kbd "M-.") nil)
        (add-hook 'js2-mode-hook
                  (lambda ()
                    (add-hook 'xref-backend-functions #'xref-js2-xref-backend nil t))))

      (setenv "CLASSPATH"
              (concat
               "/usr/share/rhino-1.6/lib/js.jar:"
               (getenv "CLASSPATH")))
    #+END_SRC
*** lisp
**** definitions
     This code represents almost original slime-helper functions definitions (except hooks, of course).
     The reason to not use slime-helper itself is that it provides its own slime setup thus
     omitting my own one completely.
     #+BEGIN_SRC emacs-lisp
       (unless (boundp 'quicklisp-slime-helper-dist)
         (setq quicklisp-slime-helper-dist "quicklisp"))

       (setq quicklisp-slime-helper-base (expand-file-name "~/quicklisp/"))

       (defun quicklisp-slime-helper-file-contents (file)
         (with-temp-buffer
           (insert-file-contents file)
           (buffer-string)))

       (defun quicklisp-slime-helper-system-directory (system)
         (let ((location-file (concat quicklisp-slime-helper-base
                                      "dists/"
                                      quicklisp-slime-helper-dist
                                      "/installed/systems/"
                                      system
                                      ".txt")))
           (when (file-exists-p location-file)
             (let ((relative (quicklisp-slime-helper-file-contents location-file)))
               (file-name-directory (concat quicklisp-slime-helper-base
                                            relative))))))

       (defun quicklisp-slime-helper-slime-directory ()
         (quicklisp-slime-helper-system-directory "swank"))

       (defun custom/lisp-mode-hook ()
         (auto-fill-mode 1)
         (setq indent-tabs-mode t)
         (setq tab-width 2)
         (turn-on-eldoc-mode))

       (defun custom/slime-hook ()
         (slime-mode t)
         (set (make-local-variable 'slime-lisp-implementations)
              (list (assoc 'sbcl slime-lisp-implementations))))

       (defadvice slime-documentation-lookup
           (around change-browse-url-browser-function activate)
         "Use w3m for slime documentation lookup."
         (let ((browse-url-browser-function 'w3m-browse-url))
           ad-do-it))
     #+END_SRC
**** slime setup
     Here follow slime customizations using version from quicklisp (which is slime-helper designed for)
     Let clause is borrowed from slime-helper source and its contents are superseded by my own setup.
     #+BEGIN_SRC emacs-lisp :tangle yes
       (let* ((quicklisp-slime-directory (quicklisp-slime-helper-slime-directory)))
         (add-to-list 'load-path quicklisp-slime-directory)
         (require 'cl-lib)
         (require 'slime-autoloads)
         (setq slime-backend (expand-file-name "swank-loader.lisp"
                                               quicklisp-slime-directory))
         (setq slime-path quicklisp-slime-directory)
         (slime-setup
          '(slime-fancy-inspector slime-fancy-trace slime-fontifying-fu
            slime-hyperdoc slime-package-fu slime-references slime-trace-dialog
            slime-xref-browser slime-asdf slime-autodoc slime-banner slime-fancy
            slime-fuzzy slime-repl slime-sbcl-exts))
         (add-to-list 'slime-lisp-implementations '(sbcl ("sbcl")  :coding-system utf-8-unix))
         (setq slime-complete-symbol*-fancy t)
         (setq slime-complete-symbol-function 'slime-fuzzy-complete-symbol)
         (setq slime-net-coding-system 'utf-8-unix)
         (setq slime-use-autodoc-mode nil)
         ;;TODO: make more concrete use of helm-slime, see comments at https://github.com/emacs-helm/helm-slime/blob/master/helm-slime.el
         (add-hook 'lisp-mode-hook 'custom/slime-hook)
         (add-hook 'inferior-lisp-mode-hook (lambda () (inferior-slime-mode t)))
         (add-hook 'slime-mode-hook (lambda () (slime-autodoc-mode t)))
         (add-hook 'lisp-mode-hook 'custom/lisp-mode-hook)
         (add-hook 'lisp-mode-hook 'common-hooks/newline-hook)
         (add-hook 'lisp-mode-hook 'common-hooks/prog-helpers)
         (add-hook 'lisp-mode-hook 'set-up-slime-ac)
         (add-hook 'slime-mode-hook 'set-up-slime-ac)
         (add-hook 'slime-repl-mode-hook 'set-up-slime-ac)
         (eval-after-load "auto-complete"
           '(add-to-list 'ac-modes 'slime-repl-mode)))
     #+END_SRC
***** BACKLOG investigate and fix the issue with not found slime extensions within remote lisp image
      example: Can't locate module: SWANK-IO-PACKAGE::SWANK-SBCL-EXTS
**** additional setup
     #+BEGIN_SRC emacs-lisp
       (setq custom/hyperspec-root "~/help/HyperSpec/")

       (req-package inf-lisp
         :config
         (setq inferior-lisp-program "sbcl"))
       (req-package common-lisp-snippets :require yasnippet)

       (req-package ac-slime :require auto-complete slime cl-lib)

       ;; lookup information in hyperspec
       (info-lookup-add-help
        :mode 'lisp-mode
        :regexp "[^][()'\" \t\n]+"
        :ignore-case t
        :doc-spec '(("(ansicl)Symbol Index" nil nil nil)))

       (defhydra hydra-slime ()
         "
       Slime
       -----------
       _s_ run
       _l_ selector
       _;_ insert balanced comments
       _M-;_ remove balanced comments
       _h_ documentation lookup
       "
         ("s" slime "run slime" :color blue)
         ("l" slime-selector "slime selector" :color blue)
         (";" slime-insert-balanced-comments)
         ("M-;" slime-remove-balanced-comments)
         ("h" slime-documentation-lookup)
         ("q" nil "cancel"))
       (global-set-key (kbd "M-p") 'hydra-slime/body)
     #+END_SRC
*** haskell
    #+BEGIN_SRC emacs-lisp
      (req-package haskell-mode
        :require cl-lib
        :mode "\\.hs\\'"
        :init
        (req-package haskell-indent)
        (req-package haskell-align-imports)
        (req-package haskell-navigate-imports)
        (req-package haskell-sort-imports)
        (req-package inf-haskell)
        (req-package haskell-ghci)
        :config
        (setq inferior-haskell-wait-and-jump t)
        (setf haskell-process-path-ghci "ghci-ng")
        (setf haskell-process-type 'cabal-repl)
        (setf haskell-process-args-cabal-repl '("--ghc-option=-ferror-spans" "--with-ghc=ghci-ng"))
        (bind-key "C-," 'haskell-move-nested-left haskell-mode-map)
        (bind-key "C-." 'haskell-move-nested-right haskell-mode-map)
        (bind-key "<tab>" 'haskell-indent-cycle haskell-mode-map)
        (bind-key "C-c h" 'haskell-hoogle haskell-mode-map)
        (bind-key "C-c C-h" 'haskell-hayoo haskell-mode-map)
        (add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)
        (add-hook 'haskell-mode-hook 'turn-on-haskell-indent)
        (add-hook 'haskell-mode-hook 'turn-on-eldoc-mode)
        (add-hook 'haskell-mode-hook 'common-hooks/newline-hook)
        (add-hook 'haskell-mode-hook 'common-hooks/prog-helpers)
        (add-hook 'haskell-mode-hook 'turn-on-haskell-ghci)
        (add-hook 'haskell-mode-hook #'interactive-haskell-mode)
        (add-hook 'haskell-mode-hook #'haskell-simple-indent-mode))

      (req-package hindent
        :commands hindent-mode
        :init
        (add-hook 'haskell-mode-hook #'hindent-mode))

      (req-package shm
        :commands (structured-haskell-mode structured-haskell-repl-mode)
        :init
        (add-hook 'haskell-mode-hook 'structured-haskell-mode)
        (add-hook 'haskell-interactive-mode-hook 'structured-haskell-repl-mode))

      ;;TODO: setup flycheck
      ;;TODO: bind in haskell-mode-map: haskell-{goto-imports, {return-from, navigate, sort, align}-imports}
      ;;TODO: investigate the difference between builtin and el-get versions of haskell-mode
    #+END_SRC
*** python
**** linux traits
     #+BEGIN_SRC emacs-lisp :tangle (if (eq system-type 'gnu/linux) "yes" "no")
       (setq custom/python-libs-path "/usr/lib64/python2.7:")
     #+END_SRC
**** darwin traits
     #+BEGIN_SRC emacs-lisp :tangle (if (eq system-type 'darwin) "yes" "no")
       (setq custom/python-libs-path "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7:")
     #+END_SRC
**** setup
     #+BEGIN_SRC emacs-lisp
       (req-package pep8)
       (req-package python-pep8)

       (req-package jedi
         :require jedi-core auto-complete
         :init
         (setq jedi:complete-on-dot t)
         (setq jedi:goto-definition-marker-ring-length 32)
         :config
         (defun custom/python-mode-hook ()
           (auto-fill-mode 1)
           (flycheck-mode)
           (setq flycheck-checker 'python-flake8)
           (setq indent-tabs-mode nil)
           (setq tab-width 4)
           ;;FIXME: find-project-flake8-config id somehow broken
           ;; (setq flycheck-flake8rc (or (custom/find-project-flake8-config) flycheck-flake8rc))
           (tooltip-mode -1))
         (add-hook 'python-mode-hook 'custom/python-mode-hook)
         (add-hook 'python-mode-hook 'common-hooks/prog-helpers)
         (add-hook 'python-mode-hook 'common-hooks/newline-hook)
         (add-hook 'python-mode-hook
                   (lambda ()
                     (setq imenu-create-index-function 'imenu-default-create-index-function)))
         (add-hook 'python-mode-hook 'yas/minor-mode-on)
         (add-hook 'python-mode-hook 'jedi:setup)
         (add-hook 'python-mode-hook 'jedi:ac-setup))

       (req-package pylookup
         :disabled t ;;package archives do not seem to have it, so maybe use el-get version later
         :config
         (defun at-pylookup-dir (&optional suffix)
           (concat (at-config-basedir "el-get/pylookup") suffix))
         ;; set executable file and db file
         (setq pylookup-program (at-pylookup-dir "/pylookup.py"))
         (setq pylookup-db-file (at-pylookup-dir "/pylookup.db"))
         ;; set search option if you want
         (setq pylookup-search-options '("--insensitive" "0" "--desc" "0"))
         (defadvice pylookup-lookup
             (around change-browse-url-browser-function activate)
           "Use w3m for slime documentation lookup."
           (let ((browse-url-browser-function 'w3m-browse-url))
             ad-do-it)))

       (req-package python
         :require region-bindings-mode
         :defer t
         :config
         (bind-key "M-." 'jedi:goto-definition python-mode-map)
         (bind-key "M-," 'jedi:goto-definition-pop-marker python-mode-map)
         (bind-key "+" 'python-indent-shift-right region-bindings-mode-map)
         (bind-key "_" 'python-indent-shift-left region-bindings-mode-map))

       (req-package ac-python :require auto-complete)

       ;; Highlight the call to ipdb
       ;; src http://pedrokroger.com/2010/07/configuring-emacs-as-a-python-ide-2/
       (defun annotate-pdb ()
         (interactive)
         (highlight-lines-matching-regexp "import ipdb")
         (highlight-lines-matching-regexp "ipdb.set_trace()"))
       (add-hook 'python-mode-hook 'annotate-pdb)

       (defhydra hydra-python ()
         "
         ^Checks:^       ^Nav^
         ------------------------------------
         py_l_int        _p_ylookup at point
         pep_8_          find _r_elated names (helm+jedi)
         _m_ulti flake8
         "
         ("l" pylint)
         ("8" pep8)
         ("m" flake8-multi)
         ("p" pylookup-lookup-at-point)
         ("r" helm-jedi-related-names)
         ("q" nil))
       (global-set-key (kbd "C-c C-p") 'hydra-python/body)

       (setq mumamo-background-colors nil)

       (setenv "PYTHONPATH"
               (concat
                custom/python-libs-path
                (mapconcat 'identity private/python-path-job-projects "")
                (getenv "PYTHONPATH")))
       (setenv "PYLINTRC"
               (at-config-basedir
                "contrib/.pylintrc"))
     #+END_SRC
*** cc
**** specialization for PostgreSQL development
     #+BEGIN_SRC emacs-lisp
       (defun pgsql-c-mode ()
         ;; sets up formatting for PostgreSQL C code
         (interactive)
         (c-mode)
         (setq-default tab-width 4)
         (c-set-style "bsd")             ; set c-basic-offset to 4, plus other stuff
         (c-set-offset 'case-label '+)   ; tweak case indent to match PG custom
         (setq fill-column 79)           ; matches what pgindent does
         (setq indent-tabs-mode t))      ; make sure we keep tabs when indenting
     #+END_SRC
**** packages
     #+BEGIN_SRC emacs-lisp
       (req-package cc-mode
         :require helm-gtags
         :config
         (define-key c-mode-map (kbd "C-c i") 'helm-gtags-tags-in-this-function)
         (define-key c-mode-map (kbd "C-c t") 'helm-gtags-show-stack)
         (define-key c-mode-map (kbd "C-c u") 'helm-gtags-update-tags)
         (define-key c-mode-map (kbd "M-.") 'helm-gtags-select)
         (define-key c++-mode-map (kbd "C-c i") 'helm-gtags-tags-in-this-function)
         (define-key c++-mode-map (kbd "C-c t") 'helm-gtags-show-stack)
         (define-key c++-mode-map (kbd "C-c u") 'helm-gtags-update-tags)
         (define-key c++-mode-map (kbd "C-j") 'helm-gtags-select))

       (req-package ac-c-headers :require auto-complete)
       (req-package ac-clang :require cl-lib auto-complete pos-tip yasnippet)
       (req-package auto-complete-clang :require auto-complete)

       (req-package irony
         :require cl-lib json
         :config
         (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))

       (req-package function-args
         :require swiper cc-mode
         :config
         (define-key c-mode-map (kbd "C-c C-<tab>") 'moo-complete)
         (define-key c-mode-map (kbd "C-c j") 'moo-jump-local)
         (define-key c++-mode-map (kbd "C-c C-<tab>") 'moo-complete)
         (define-key c++-mode-map (kbd "C-c j") 'moo-jump-local))

       (req-package rtags
         :disabled t ; TODO rtags backend deployment shoud be done correctly and repeatably before using
         :require cc-mode
         :config
         (define-key c-mode-map (kbd "C-,") 'rtags-location-stack-back)
         (define-key c-mode-map (kbd "C-.") 'rtags-find-symbol-at-point)
         (define-key c-mode-map (kbd "C-c TAB") 'rtags-diagnostics)
         (define-key c-mode-map (kbd "C-u C-.") 'rtags-find-references-at-point)
         (define-key c++-mode-map (kbd "C-,") 'rtags-location-stack-back)
         (define-key c++-mode-map (kbd "C-.") 'rtags-find-symbol-at-point)
         (define-key c++-mode-map (kbd "C-c TAB") 'rtags-diagnostics)
         (define-key c++-mode-map (kbd "C-u C-.") 'rtags-find-references-at-point))

       (info-lookup-add-help
        :mode 'c-mode
        :regexp "[^][()'\" \t\n]+"
        :ignore-case t
        :doc-spec '(("(libc)Symbol Index" nil nil nil)))
     #+END_SRC
**** hooks
     #+BEGIN_SRC emacs-lisp
       (defun custom/c-mode-common-hook ()
         (require 'auto-complete-c-headers)
         (add-to-list 'ac-sources 'ac-source-c-headers)
         (add-to-list 'ac-sources 'ac-source-gtags)
         (add-to-list 'ac-sources 'ac-source-clang)
         (irony-mode))

       ;; replace the `completion-at-point' and `complete-symbol' bindings in
       ;; irony-mode's buffers by irony-mode's function
       (defun custom/irony-mode-hook ()
         (define-key irony-mode-map [remap completion-at-point]
           'irony-completion-at-point-async)
         (define-key irony-mode-map [remap complete-symbol]
           'irony-completion-at-point-async))

       (add-hook 'c++-mode-hook 'common-hooks/newline-hook)
       (add-hook 'c++-mode-hook 'custom/c-mode-common-hook)
       (add-hook 'c++-mode-hook 'irony-mode)
       (add-hook 'c-mode-common-hook 'common-hooks/prog-helpers)
       (add-hook 'c-mode-hook 'common-hooks/newline-hook)
       (add-hook 'c-mode-hook 'custom/c-mode-common-hook)
       (add-hook 'c-mode-hook 'irony-mode)
       (add-hook 'irony-mode-hook 'custom/irony-mode-hook)
     #+END_SRC
**** auto-mode setup
***** common
      #+BEGIN_SRC emacs-lisp
        (add-to-list 'auto-mode-alist '("\\.ipp?$" . c++-mode))
        (add-to-list 'auto-mode-alist '("\\.h$" . c++-mode))
        ;; (add-to-list 'auto-mode-alist '("/usr/include/qt4" . c++-mode))
        (add-to-list 'auto-mode-alist '("/usr/include/qt4/Qt" . c++-mode))
        (add-to-list 'auto-mode-alist '("/usr/include/qt4/QtNetwork" . c++-mode))
        (add-to-list 'auto-mode-alist '("/usr/include/boost" . c++-mode))
        (add-to-list 'auto-mode-alist '("/usr/include/c++/4.3" . c++-mode))

        (add-to-list 'auto-mode-alist '("CMakeLists\\.txt\\'" . cmake-mode))
        (add-to-list 'auto-mode-alist '("\\.cmake\\'" . cmake-mode))
      #+END_SRC
***** PostgreSQL specialized
      #+BEGIN_SRC emacs-lisp
        (add-to-list 'auto-mode-alist '("\\(postgres\\|pgsql\\).*\\.[ch]\\'" . pgsql-c-mode))
        (add-to-list 'auto-mode-alist '("\\(postgres\\|pgsql\\).*\\.cc\\'" . pgsql-c-mode))
      #+END_SRC
**** TBD
***** BACKLOG review and maybe rebind keys
***** BACKLOG bind helm-gtags-find-{rtags,symbol}
**** semanticdb
     #+BEGIN_SRC emacs-lisp :tangle no
       (when (cedet-gnu-global-version-check t)
         (semanticdb-enable-gnu-global-databases 'c-mode)
         (semanticdb-enable-gnu-global-databases 'c++-mode))
     #+END_SRC
*** perl
    #+BEGIN_SRC emacs-lisp :tangle no
      (fset 'perl-mode 'cperl-mode)

      (req-package cperl
        :defer t
        :command perl-mode
        :config
        (setq cperl-hairy t)
        (setq cperl-auto-newline-after-colon t)
        (setq cperl-autoindent-on-semi t)
        (setq cperl-extra-newline-before-brace nil)
        (setq cperl-indent-parens-as-block t)
        (setq cperl-auto-newline t)
        (setq cperl-brace-offset 0)
        (setq cperl-close-paren-offset -4)
        (setq cperl-continued-brace-offset 0)
        (setq cperl-continued-statement-offset 4)
        (setq cperl-extra-newline-before-brace-multiline nil)
        (setq cperl-indent-level 4)
        (setq cperl-label-offset -4)
        (setq cperl-merge-trailing-else nil)
        (setq cperl-tab-always-indent t))

      (defun custom/perl-mode-hook ()
        (cperl-mode 1)
        (setq compile-command (concat "perl -cw " buffer-file-name))
        (setq indent-tabs-mode nil)
        (setq tab-width 4)
        (turn-on-eldoc-mode)
        (yas-minor-mode t)
        (setf prettify-symbols-alist '(("->" . ?→)
                                       (">=" . ?≥)
                                       ("<=" . ?≤)))
        ;; ("<>" . ?≠)  ("=>" . ?⇒)
        (prettify-symbols-mode t))

      (add-hook 'cperl-mode-hook 'custom/perl-mode-hook)
      (add-hook 'cperl-mode-hook 'common-hooks/prog-helpers)
      (add-hook 'cperl-mode-hook 'common-hooks/newline-hook)
      (add-hook 'cperl-mode-hook 'ws-butler-mode)
    #+END_SRC
*** php
    #+BEGIN_SRC emacs-lisp :tangle no
      (req-package php-mode
        :init
        :config
        (setq php-manual-path "/home/octocat/documentation/php-chunked-xhtml/")
        (defun custom/php-mode-hook ()
          ;; style customization
          (setq tab-width 4) ;; was 4
          (setq indent-tabs-mode nil)
          (setq c-basic-offset 4)
          (setq show-trailing-whitespace t) ;; show trailing whitespace
          )
        (add-hook 'php-mode-hook 'custom/php-mode-hook)
        (add-hook 'php-mode-hook 'set-up-php-ac)
        (add-hook 'php-mode-hook 'common-hooks/prog-helpers))

      (req-package php-electric
        :require php-mode
        :disabled t) ;; autocompletion, not present in xLPA

      (req-package ac-php :require php-mode)
    #+END_SRC
*** other
    Languages without much extra customization are going precisely here
    #+BEGIN_SRC emacs-lisp
      (req-package actionscript-mode :defer t)
      (req-package go-mode :defer t)
      (req-package json-mode :require json-reformat json-snatcher)
      (req-package lua-mode :defer t)
      (req-package rust-mode :defer t)
    #+END_SRC
** webdev
*** major modes
    #+BEGIN_SRC emacs-lisp
      (req-package sgml-mode
        :config
        (bind-key "C-c C-w" 'html-wrap-in-tag html-mode-map))

      (req-package markdown-mode
        :require cl-lib
        :config
        (bind-key "C-c C-v" 'markdown-preview markdown-mode-map)
        (bind-key "C-<tab>" 'yas/expand markdown-mode-map))

      (req-package web-mode
        :defer t
        :mode "\\.html?\\'"
        :config
        (setq web-mode-enable-current-element-highlight t)
        (setq web-mode-ac-sources-alist
              '(("css" . (ac-source-css-property))
                ("html" . (ac-source-words-in-buffer ac-source-abbrev)))))

      (req-package yaml-mode)
    #+END_SRC
*** xml
    #+BEGIN_SRC emacs-lisp
      (defun custom/nxml-mode-hook ()
        (auto-fill-mode)
        (hs-minor-mode 1)
        (rng-validate-mode)
        (setq ispell-skip-html t)
        (unify-8859-on-decoding-mode)
        )

      (setq nxml-auto-insert-xml-declaration-flag t)
      (setq nxml-bind-meta-tab-to-complete-flag t)
      (setq nxml-slash-auto-complete-flag t)

      (push '("<\\?xml" . nxml-mode) magic-mode-alist)

      (add-to-list 'hs-special-modes-alist
                   '(nxml-mode
                     "\\|<[^/>]&>\\|<[^/][^>]*[^/]>"
                     ""
                     nil))

      (add-hook 'nxml-mode-hook 'common-hooks/newline-hook)
      (add-hook 'nxml-mode-hook 'custom/nxml-mode-hook)

      ;; TODO: integrate docbook-menu into el-get, probable relevant links below
      ;; http://www.emacswiki.org/emacs/UsingNxmlModeWithDocBook
      ;; http://www.emacswiki.org/emacs/DocbookXmlMode
    #+END_SRC
*** multiple major modes
    #+BEGIN_SRC emacs-lisp
      (req-package web
        :require dash s
        :defer t)

      (setq mumamo-background-colors nil)
      (setq mumamo-submode-indent-offset 4)

      (add-hook 'css-mode-hook (lambda () (rainbow-mode)))
      (add-hook 'django-html-mumamo-mode-hook
                (lambda ()
                  (setq django-indent-width 4)
                  (setq sgml-basic-offset 4)))
    #+END_SRC
*** color helper
    #+BEGIN_SRC emacs-lisp
      (req-package rainbow-mode :defer t)
    #+END_SRC
*** emmet mode setup
    #+BEGIN_SRC emacs-lisp
      (req-package emmet-mode
        :defer t
        :config
        (add-hook 'sgml-mode-hook 'ac-emmet-html-setup)
        (add-hook 'css-mode-hook 'ac-emmet-css-setup)
        (add-hook 'web-mode-hook 'ac-emmet-html-setup)
        (bind-key "C-j" nil emmet-mode-keymap)
        (bind-key "<C-return>" nil emmet-mode-keymap)
        (bind-key "C-c C-j" 'emmet-expand-line emmet-mode-keymap)
        (bind-key "C-c C-h" 'helm-emmet emmet-mode-keymap)
        (setq emmet-move-cursor-between-quotes t)
        (add-hook 'sgml-mode-hook 'emmet-mode)
        (add-hook 'nxml-mode-hook 'emmet-mode)
        (add-hook 'django-mode 'emmet-mode)
        (add-hook 'sgml-mode-hook 'emmet-mode)
        (add-hook 'css-mode-hook 'emmet-mode)
        (add-hook 'emmet-mode-hook
                  (lambda () (setq emmet-indentation 2))))

      (req-package ac-emmet
        :require emmet-mode auto-complete
        :defer t
        :config
        (push 'html-mode ac-modes)
        (push 'web-mode ac-modes))

      (req-package helm-emmet
        :require helm emmet-mode
        defer t)
    #+END_SRC
*** try
    #+BEGIN_SRC emacs-lisp :tangle no
      ;; from FAQ at http://web-mode.org/ for smartparens
      (defun my/web-mode-hook ()
        (setq web-mode-enable-auto-pairing nil))

      (defun my/sp-web-mode-is-code-context (id action context)
        (when (and (eq action 'insert)
                   (not (or (get-text-property (point) 'part-side)
                            (get-text-property (point) 'block-side))))
          t))
    #+END_SRC
* clients
** restclient
   #+BEGIN_SRC emacs-lisp
     (defun custom/create-restclient-sandbox ()
       (interactive)
       (let ((restbuffer (generate-new-buffer "*restclient-sandbox*")))
         (switch-to-buffer restbuffer)
         (restclient-mode)))

     (req-package restclient
       :defer t
       :bind ("C-c C-r C-s" . custom/create-restclient-sandbox))
   #+END_SRC
** ERC
*** some handy navigation functions
    #+BEGIN_SRC emacs-lisp
      (define-namespace custom/

      ;; FIXME should be able to quit server
      ;; being invoked from barely any buffer
      (defun leave-irc-server ()
        (interactive)
        (erc-quit-server "Leaving"))

      (defun select-erc-buffer ()
        (interactive)
        (switch-to-buffer
         (helm-comp-read
          "Select ERC buffer:" (mapcar #'buffer-name (erc-buffer-list)))))

      (defun select-erc-unread-buffer ()
        (interactive)
        (switch-to-buffer
         (helm-comp-read
          "Select unread ERC buffer:"
          (mapcar #'buffer-name
                  (mapcar (lambda (x) (nth 0 x)) erc-modified-channels-alist)))))
      ;;TODO: check if '(mapcar #'buffer-name (erc-buffer-list #'buffer-modified-p)) works

      (defun insert-erc-nick (&optional atsign)
        (interactive)
        (insert
         (concatenate 'string
                      (when atsign
                        "@")
                      (helm-comp-read "nick: " (pcomplete-erc-nicks)) ": ")
         ))

      )
    #+END_SRC
*** connect to Slack IRC gate (work chats)
    For obvious reasons it's better to use ZNC to connect to IRC, especially at work
    #+BEGIN_SRC emacs-lisp
      (defun custom/connect-slack-irc-znc ()
        (interactive)
        (erc
         :server private/irc-server-mira-slack-znc
         :port 6697
         :full-name private/irc-full-name
         :nick private/irc-nick-mira-slack
         :password private/irc-password-mira-slack-znc))
    #+END_SRC
*** setup
    #+BEGIN_SRC emacs-lisp
      (req-package erc
        :force t
        :init
        ;;TODO: try using 'erc-modules
        (req-package erc-pcomplete)
        (req-package erc-join)
        (req-package erc-lang)
        (req-package erc-fill)
        (req-package erc-log)
        (req-package erc-autoaway)
        (req-package erc-services)
        (req-package erc-ring)
        (req-package erc-match)
        (req-package erc-services
          :config
          (setq erc-nickserv-passwords
                '((freenode ((private/irc-nick-main . private/irc-password-main)
                             (private/irc-nick-work . private/irc-password-work)))))
          (setq erc-prompt-for-nickserv-password nil)
          (erc-nickserv-mode 1))
        (req-package erc-log
          :config
          (setq erc-log-channels-directory custom/irc-logs-directory)
          (setq erc-log-channels t)
          (erc-log-enable))
        ;;TODO: find a way to use erc extra modules on behalf of package.el (resurrect erc-nicklist)
        :config
        (erc-pcomplete-mode 1)
        (setq erc-track-exclude-types '("JOIN" "NICK" "PART" "QUIT" "MODE"
                                        "324" "329" "332" "333" "353" "477"))
        (setq erc-kill-queries-on-quit t)
        (setq erc-kill-server-buffer-on-quit t)
        (setq erc-track-shorten-function nil)
        (setq erc-autojoin-channels-alist
              '(("irc.freenode.net" "#git" "#stumpwm" "#emacsconf")
                ))
        (setq erc-keywords '((".*Online.*" (:foreground "green"))
                             (".*Busy" (:foreground "red"))
                             (".*Away" (:foreground "red"))
                             (".*Idle" (:foreground "orange"))
                             ))
        (setq erc-nick private/irc-nick-main)
        (setq erc-track-priority-faces-only 'all)
        (setq erc-autoaway-message "I'm gone (autoaway after %i seconds)")
        (setq erc-auto-query 'buffer)
        (setq erc-max-buffer-size 20000)

        (erc-autojoin-mode t)
        (erc-fill-mode t)
        (erc-ring-mode t)
        (erc-match-enable)
        (erc-match-mode 1)
        (erc-timestamp-mode t)

        (defhydra hydra-erc (:color blue)
          "
        IRC   ^Connection^ ^Tools^
        ------------------------
        _s_lack      _q_ leave server
        select _b_uffer
        select _u_nread buffer
        _i_nsert nick
        "
          ("s" custom/connect-slack-irc-znc)
          ("q" custom/leave-irc-server)
          ("b" custom/select-erc-buffer)
          ("u" custom/select-erc-unread-buffer)
          ("i" (lambda () (interactive) (custom/insert-erc-nick t))))
        (global-set-key (kbd "C-q") 'hydra-erc/body))

      (req-package erc-hl-nicks)
      (req-package ercn
        :config
        (req-package erc-menu)) ;TODO: add notifications handler function
    #+END_SRC
*** BACKLOG [#B] make freenode connection via ZNC also
** circe
*** definitions
    #+BEGIN_SRC emacs-lisp :tangle no
      (defun circe-network-connected-p (network)
        "Return non-nil if there's any Circe server-buffer whose
                 `circe-server-netwok' is NETWORK."
        (catch 'return
          (dolist (buffer (circe-server-buffers))
            (with-current-buffer buffer
              (if (string= network circe-server-network)
                  (throw 'return t))))))

      (defun circe-maybe-connect (network)
        "Connect to NETWORK, but ask user for confirmation if it's
                 already been connected to."
        (interactive "sNetwork: ")
        (if (or (not (circe-network-connected-p network))
                (y-or-n-p (format "Already connected to %s, reconnect?" network)))
            (circe network)))

      (defun my-circe-prompt ()
        (lui-set-prompt
         (concat (propertize (concat (buffer-name) ">")
                             'face 'circe-prompt-face)
                 " ")))

      (defun my-circe-set-margin ()
        (setq right-margin-width 5))

      (defun my-lui-setup ()
        (setq
         fringes-outside-margins t
         right-margin-width 5
         word-wrap t
         wrap-prefix "    "))
    #+END_SRC
*** setup
    #+BEGIN_SRC emacs-lisp :tangle no
      (req-package circe
        :require cl-lib
        :config
        (defun start-irc ()
          "Connect to IRC"
          (interactive)
          (circe-maybe-connect "Freenode")
          (circe-maybe-connect "Mirantis Slack"))
        (setq circe-network-options
              `(("Freenode"
                 :host "irc.freenode.net"
                 :port (6667 . 6697)
                 :nickserv-nick ,private/irc-nick-main
                 :nickserv-password ,private/irc-password-main
                 :channels ("#git" "#stumpwm" "#emacsconf"))))
        (setq circe-reduce-lurker-spam t)
        (require 'lui-autopaste)
        (add-hook 'circe-channel-mode-hook 'enable-lui-autopaste)
        (add-hook 'circe-chat-mode-hook 'my-circe-prompt)
        (eval-after-load 'circe '(require 'circe-chanop))
        (require 'lui-logging)
        (enable-lui-logging-globally)
        (setq
         lui-time-stamp-position 'right-margin
         lui-time-stamp-format "%H:%M")
        (add-hook 'lui-mode-hook 'my-circe-set-margin)
        (setq
         lui-time-stamp-position 'right-margin
         lui-fill-type nil)
        (add-hook 'lui-mode-hook 'my-lui-setup)
        (setq lui-highlight-keywords '((".*Online.*" (:foreground "green"))
                                       (".*Busy" (:foreground "red"))
                                       (".*Away" (:foreground "red"))
                                       (".*Idle" (:foreground "orange"))
                                       ))
        (setq lui-track-bar-behavior 'before-switch-to-buffer)
        (enable-lui-track-bar)
        (eval-after-load 'lui
          '(define-key lui-mode-map (kbd "C-c C-b") 'lui-track-bar-move)))
    #+END_SRC
** jabber
*** definitions
**** common utils
     #+BEGIN_SRC emacs-lisp
       (define-namespace custom/

       (defvar use-zenburn-in-jabber t "Paint jabber-el buffers with zenburn colors")

       (defun jabber-connect-hook (jc)
         (jabber-send-presence "" "I'm online" 10)
         (let* ((state-data (fsm-get-state-data jc))
                (server (plist-get state-data :server)))
           (message "%s" server)))

       (defun jabber-muc-sendto (&optional other-window)
         "Insert MUC participant nick into chat."
         (interactive)
         (end-of-buffer)
         (insert (concat (helm-comp-read "Send to: "
                                         (jabber-muc-nicknames)) ": ")))


       (defvar helm-source-jabber-contact-jids
         '((name . "Jabber Contacts")
           (init . (lambda () (require 'jabber)))
           (candidates . (lambda () (mapcar 'cdr (helm-jabber-online-contacts))))
           (action . (lambda (x)
                       (jabber-chat-with
                        (jabber-read-account)
                        x)))))

       (defun helm-jabber-chat-with (arg)
         (interactive "P")
         (if (= (prefix-numeric-value arg) 4)
             (helm-other-buffer '(helm-source-jabber-contact-jids)
                                "*jabber: chat with*")
           (helm-other-buffer '(helm-source-jabber-contacts)
                              "*jabber: chat with*")))

       (defun jabber-abbrev ()
         (interactive)
         (clipboard-kill-ring-save (region-beginning) (region-end))
         (end-of-buffer)
         (helm-yas-complete))

       (defun notify (title message)
         "Notify the user using either the dbus based API or the `growl' one"
         (unless (and (fboundp 'dbus-register-signal)
                      ;; avoid a bug in Emacs 24.0 under darwin
                      (ignore-errors (require 'notifications nil t)))
           ;; else try notify.el
           (unless (fboundp 'notify)
             (ignore-errors (require 'notify nil 'noerror))))
         (condition-case nil
             (cond
              ;; Graphical notification
              ((fboundp 'notifications-notify) (notifications-notify :title title
                                                                     :app-name "emacs"
                                                                     :body message))
              ((fboundp 'notify) (notify title message))
              ;; Fallback
              (t                               (error "Fallback to `message'")))
           ;; when notification function errored out, degrade gracefully to `message'
           (error (message "%s: %s" title message))))

       )
     #+END_SRC
**** darwin
    #+BEGIN_SRC emacs-lisp :tangle (if (eq system-type 'darwin) "yes" "no")
      (define-namespace custom/

      (defun darwin-jabber-notify-hook (from buf text proposed-alert)
        (when (or jabber-message-alert-same-buffer
                  (not (memq (selected-window) (get-buffer-window-list buf))))
          (if (jabber-muc-sender-p from)
              (custom/notify (format "(PM) %s"
                                     (jabber-jid-displayname (jabber-jid-user from)))
                             (format "%s: %s" (jabber-jid-resource from) text))
            (custom/notify (format "%s" (jabber-jid-displayname from)) text))))

      (defun darwin-jabber-muc-notify-hook (nick group buf text proposed-alert)
        (when (or jabber-message-alert-same-buffer
                  (not (memq (selected-window) (get-buffer-window-list buf))))
          (if nick
              (when (or jabber-muc-alert-self
                        (not (string=
                              nick (cdr (assoc group *jabber-active-groupchats*)))))
                (custom/notify (format "%s" (jabber-jid-displayname group))
                               (format "%s: %s" nick text)))
            (custom/notify (format "%s" (jabber-jid-displayname group)) text))))

      )
    #+END_SRC
**** linux
    #+BEGIN_SRC emacs-lisp :tangle (if (eq system-type 'gnu/linux) "yes" "no")
      (define-namespace custom/

      (defun linux-jabber-notify-hook (from buffer text proposed-alert)
          (custom/notify from text))

      (defun x-urgency-hint (frame arg &optional source)
        (let* ((wm-hints (append (x-window-property
                                  "WM_HINTS" frame "WM_HINTS"
                                  (if source
                                      source
                                    (string-to-number
                                     (frame-parameter frame 'outer-window-id)))
                                  nil t) nil))
               (flags (car wm-hints)))
          (setcar wm-hints
                  (if arg
                      (logior flags #x00000100)
                    (logand flags #xFFFFFEFF)))
          (x-change-window-property "WM_HINTS" wm-hints frame "WM_HINTS" 32 t)))

      (defun jabber-urgency-hint ()
        (let ((count (length jabber-activity-jids)))
          (unless (= jabber-activity-jids-count count)
            (if (zerop count)
                (x-urgency-hint (selected-frame) nil)
              (x-urgency-hint (selected-frame) t))
            (setq jabber-activity-jids-count count))))

      ;; depends on s
      (defun jabber-presence-urgency (who oldstatus newstatus statustext proposed-alert)
        (when (remove-if (lambda (jid) (not (s-starts-with? (symbol-name who) jid))) *urgency-presence-jids*)
          (custom/notify "jabber" (format "Presence changed for %s: %s"
                                          who (if (get who 'connected) "online" "offline")))))

      )

      ;; Jabber urgency hints
      (defvar jabber-activity-jids-count 0)
      (defvar jabber-libnotify-icon ""
        "*Icon to be used on the notification pop-up. Default is empty")
      (defvar jabber-libnotify-timeout "7000"
        "*Specifies the timeout of the pop up window in millisecond")
    #+END_SRC
*** setup
**** common
     #+BEGIN_SRC emacs-lisp
       (req-package jabber
         :force t
         :require fsm
         :init
         (load "jabber-autoloads") ;; For 0.7.90 and above:
         (req-package jabber-bookmarks)
         (req-package jabber-autoaway)
         :config
         (when custom/use-zenburn-in-jabber
           (set-face-attribute 'jabber-roster-user-chatty nil :foreground "#f0dfaf" :weight 'bold)
           (set-face-attribute 'jabber-roster-user-online nil :foreground "#dfaf8f" :weight 'bold)
           (set-face-attribute 'jabber-roster-user-away nil :foreground "#8fb28f")
           (set-face-attribute 'jabber-roster-user-xa nil :foreground "#7f9f7f")
           (set-face-attribute 'jabber-roster-user-offline nil :foreground "#606060")
           (set-face-attribute 'jabber-roster-user-dnd nil :foreground "#94bff3" :weight 'bold)
           (set-face-attribute 'jabber-roster-user-error nil :foreground "#e37170" :background "#332323")
           (set-face-attribute 'jabber-title-small nil :inherit 'variable-pitch :weight 'bold :height 1.2)
           (set-face-attribute 'jabber-title-medium nil :inherit 'variable-pitch :weight 'bold :height 1.2)
           (set-face-attribute 'jabber-title-large nil :inherit 'variable-pitch :weight 'bold :height 1.2)
           (set-face-attribute 'jabber-chat-prompt-local nil :foreground "#f0dfaf" :weight 'bold)
           (set-face-attribute 'jabber-chat-prompt-foreign nil :foreground "#dfaf8f" :weight 'bold)
           (set-face-attribute 'jabber-rare-time-face nil :foreground "#8fb28f"))
         (custom-set-faces '(jabber-chat-prompt-system ((t (:foreground "darkgreen" :weight bold)))))

         ;; Message alert hooks
         (define-jabber-alert echo "Show a message in the echo area"
           (lambda (msg)
             (unless (minibuffer-prompt)
               (message "%s" msg))))

         (defhydra hydra-jabber ()
           "
         ^insert^         ^navigate^
         -------------------------------------------------
         _8_ :-*          _r_oster
         _l_ *IN LOVE*    _s_witch to recently active
         _y_ :-[          _j_ump to contact
         _t_ (c)          open _m_uc
         _a_bbreviation
         "
           ("8" (lambda () (interactive) (insert ":-* ")) ":-*")
           ("l" (lambda () (interactive) (insert "*IN LOVE* ")) "*IN LOVE*")
           ("y" (lambda () (interactive) (insert ":-[ ")) ":-[")
           ("t" (lambda () (interactive) (insert "(c) ")) "(c)")
           ("6" (lambda () (interactive) (insert "^^^")) "^^^")
           ("5" (lambda () (interactive) (insert "🎓")) "🎓") ;;TODO: select over this ad hoc solution and something using code points
           ("a" custom/jabber-abbrev)
           ("r" jabber-switch-to-roster-buffer)
           ("s" jabber-activity-switch-to :color blue)
           ("j" custom/helm-jabber-chat-with)
           ("m" custom/jabber-muc-sendto)
           ;;TODO: move other insertions here, for example, current time, etc.
           ("q" nil "cancel"))
         (global-set-key (kbd "<f6>") 'hydra-jabber/body)
         (setq fsm-debug nil)
         (setq gnutls-algorithm-priority "NORMAL:+COMP-DEFLATE")
         (setq jabber-account-list custom/jabber-account-list)
         (setq jabber-auto-reconnect t)
         (setq jabber-backlog-number 100)
         (setq jabber-chat-buffer-format "*-jc-%n-*")
         (setq jabber-groupchat-buffer-format "*-jg-%n-*")
         (setq jabber-history-dir (at-homedir "/.emacs-jabber"))
         (setq jabber-history-enabled t)
         (setq jabber-mode-line-mode t)
         (setq jabber-muc-private-buffer-format "*-jmuc-priv-%g-%n-*")
         (setq jabber-nickname (capitalize global-username))
         (setq jabber-rare-time-format "%e %b %Y %H:00")
         (setq jabber-resource "laptoptop")
         (setq jabber-roster-buffer "*-jroster-*")
         (setq jabber-roster-line-format " %c %-25n %u %-8s  %S")
         (setq jabber-use-global-history nil)
         (setq jabber-message-alert-same-buffer nil)
         (setq jabber-message-alert-same-buffer t))
         (setq jabber-alert-presence-message-function (lambda (who oldstatus newstatus statustext) nil))
         (add-hook 'jabber-chat-mode-hook 'goto-address)
         (add-hook 'jabber-post-connect-hook 'jabber-autoaway-start)
         (add-hook 'jabber-post-connect-hooks 'custom/jabber-connect-hook)
         (add-hook 'jabber-alert-message-hooks 'jabber-message-beep)
         (add-hook 'jabber-alert-message-hooks 'jabber-message-scroll)
         (add-hook 'jabber-alert-presence-hooks 'jabber-presence-update-roster)
     #+END_SRC
**** darwin
     #+BEGIN_SRC emacs-lisp :tangle (if (eq system-type 'darwin) "yes" "no")
       (setq notify-method 'notify-via-growl)
       (add-hook 'jabber-alert-message-hooks 'custom/darwin-jabber-notify-hook)
       (add-hook 'jabber-alert-muc-hooks 'custom/darwin-jabber-muc-notify-hook)
     #+END_SRC
**** linux
     #+BEGIN_SRC emacs-lisp :tangle (if (eq system-type 'gnu/linux) "yes" "no")
       ;; (setq notify-method 'notify-via-dbus)
       ;; (defvar notify-method nil "Notification method among
       ;; 'notify-via-dbus, 'notify-via-libnotify, 'notify-via-message or
       ;; 'notify-via-growl")
       (add-hook 'jabber-activity-update-hook 'custom/jabber-urgency-hint)
       (add-hook 'jabber-alert-presence-hooks 'custom/jabber-presence-urgency)
       (add-hook 'jabber-alert-message-hooks 'custom/linux-jabber-notify-hook)
     #+END_SRC
** terminal
*** common
    #+BEGIN_SRC emacs-lisp
      (req-package ansi-color
        :config
        (defun custom/colorize-compilation ()
          "Colorize from `compilation-filter-start' to `point'."
          (let ((inhibit-read-only t))
            (ansi-color-apply-on-region
             compilation-filter-start (point))))
        (add-hook 'compilation-filter-hook
                  #'custom/colorize-compilation))
    #+END_SRC
*** comint
    #+BEGIN_SRC emacs-lisp
      (define-namespace custom/

      ;;TODO: parametrize shell for terminal
      (defun terminal ()
        "Switch to terminal. Launch if nonexistent."
        (interactive)
        (if (get-buffer "*ansi-term*")
            (switch-to-buffer "*ansi-term*")
          (ansi-term "/bin/zsh"))
        (get-buffer-process "*ansi-term*"))

      (defalias 'tt 'terminal)

      (defun comint-clear-buffer ()
        (interactive)
        (let ((comint-buffer-maximum-size 0))
          (comint-truncate-buffer)))

      (defun term-exec-hook ()
        (let* ((buff (current-buffer))
               (proc (get-buffer-process buff)))
          (set-process-sentinel
           proc
           `(lambda (process event)
              (if (string= event "finished\n")
                  (kill-buffer ,buff))))))

      )

      (req-package term
        :defer t
        :config
        (add-hook 'term-exec-hook 'custom/term-exec-hook)
        (define-key term-raw-map (kbd "C-c C-y") 'term-paste)
        (setq explicit-shell-file-name "/bin/zsh"))

      (define-key comint-mode-map "\C-c\M-o" #'custom/comint-clear-buffer)
    #+END_SRC
*** shell/check syntax
    #+BEGIN_SRC emacs-lisp
      (define-namespace custom/

      (defun sh-check-finish-hook (buf msg)
        "Function, that is executed at the end of sh check"
        (when (not (string-match "finished" msg))
          (next-error 1 t)))

      (defun sh-check-syntax ()
        "Check syntax of current file"
        (interactive)
        (when (string-match "^\\(ba\\|z\\)sh" (symbol-name sh-shell))
          (save-some-buffers t)
          (compilation-start (concat (symbol-name sh-shell) " -n " (buffer-file-name))
                             'sh-check-mode)))

      )

      (define-compilation-mode sh-check-mode "SH"
        "Mode for check sh source code."
        (set (make-local-variable 'compilation-disable-input) t)
        (set (make-local-variable 'compilation-scroll-output) nil)
        (set (make-local-variable 'compilation-finish-functions)
             (list 'custom/sh-check-finish-hook)))

      (define-key shell-mode-map (kbd "C-c l") 'custom/sh-check-syntax)
    #+END_SRC
**** BACKLOG try to leverage shellcheck util usage
*** eshell
    #+BEGIN_SRC emacs-lisp
      (req-package eshell
        :defer t
        :config
        (defun eshell-handle-ansi-color ()
          (ansi-color-apply-on-region eshell-last-output-start
                                      eshell-last-output-end))
        (add-to-list 'eshell-output-filter-functions 'eshell-handle-ansi-color))
    #+END_SRC
*** hooks
    #+BEGIN_SRC emacs-lisp
      (add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
      (add-hook 'shell-mode-hook 'common-hooks/newline-hook)
      (add-hook 'shell-mode-hook 'common-hooks/prog-helpers)
    #+END_SRC
** Twitter
   #+BEGIN_SRC emacs-lisp
     (req-package twittering-mode
       :defer t
       :commands twit
       :init
       (setq twittering-use-master-password t)
       (setq twittering-private-info-file (expand-file-name "~/docs/enc/cred/.twittering-mode.gpg")))
   #+END_SRC
** internal browser (w3m/eww)
   #+BEGIN_SRC emacs-lisp
     (req-package w3m
       :defer t
       :commands w3m
       :init
       (req-package w3m-search
         :config
         (add-to-list 'w3m-search-engine-alist
                      '("emacs-wiki" "http://www.emacswiki.org/cgi-bin/wiki.pl?search=%s")))
       (add-hook 'w3m-display-hook
                 (lambda (url)
                   (rename-buffer
                    (format "*w3m: %s*" (or w3m-current-title
                                            w3m-current-url)) t)))
       :config
       (setq w3m-coding-system 'utf-8)
       (setq w3m-file-coding-system 'utf-8)
       (setq w3m-file-name-coding-system 'utf-8)
       (setq w3m-input-coding-system 'utf-8)
       (setq w3m-output-coding-system 'utf-8)
       (setq w3m-terminal-coding-system 'utf-8)
       (setq w3m-use-cookies t)
       ;; special chars
       (standard-display-ascii ?\200 [15])
       (standard-display-ascii ?\201 [21])
       (standard-display-ascii ?\202 [24])
       (standard-display-ascii ?\203 [13])
       (standard-display-ascii ?\204 [22])
       (standard-display-ascii ?\205 [25])
       (standard-display-ascii ?\206 [12])
       (standard-display-ascii ?\210 [23])
       (standard-display-ascii ?\211 [14])
       (standard-display-ascii ?\212 [18])
       (standard-display-ascii ?\214 [11])
       (standard-display-ascii ?\222 [?\'])
       (standard-display-ascii ?\223 [?\"])
       (standard-display-ascii ?\224 [?\"])
       (standard-display-ascii ?\227 " -- "))
   #+END_SRC
** MPD
   #+BEGIN_SRC emacs-lisp
     (req-package mingus
       :commands mingus
       :require libmpdee
       :config
       (bind-key "<Backspace>" 'mingus-del mingus-playlist-map))

     (defhydra hydra-mingus ()
       "
       Control               Playlist
       ------------------------------
       _<up>_ volume up        _s_ show playlist
       _<down>_ volume down    _/_ search for tracks
       _<right>_ seek forward
       _<left>_ seek backward
       "
       ("s" mingus "open mingus")
       ("/" mingus-search "Search")
       ("<up>" (dotimes (i 5) (mingus-vol-up)) "Louder")
       ("<down>" (dotimes (i 5) (mingus-vol-down)) "Quieter")
       ("<right>" mingus-seek "seek forward")
       ("<left>" mingus-seek-backward "seek backward")
       ("q" nil "cancel"))
     (global-set-key (kbd "C-c m") 'hydra-mingus/body)
   #+END_SRC
** open files in external apps
   #+BEGIN_SRC emacs-lisp
     (req-package openwith
       :defer t
       :config
       (setq openwith-associations
             '(("\\.pdf\\'" "zathura" (file))
               ("\\.djvu\\'" "zathura" (file))
               ("\\.\\(?:mpe?g\\|avi\\|wmv\\|mkv\\|flv\\|mp4\\)\\'" "vlc" (file))
               ("\\.\\(?:jp?g\\|png\\)\\'" "feh" (file))
               ("\\.doc\\'" "abiword" (file))
               ("\\.swf\\'" "swfdec-player" (file))
               ))
       (add-to-list  'mm-inhibit-file-name-handlers 'openwith-file-handler))

     (req-package launch
       :config
       (global-launch-mode +1))
   #+END_SRC
** email
*** common
    #+BEGIN_SRC emacs-lisp
      (defvar custom/gmail-accounts '("aaermolov@gmail.com" "aermolov@mirantis.com"))

      (req-package footnote)
    #+END_SRC
*** send mail
    #+BEGIN_SRC emacs-lisp
      (req-package smtpmail
        :config
        (setq message-send-mail-function 'smtpmail-send-it)
        (setq starttls-use-gnutls t)
        (setq smtpmail-smtp-server "smtp.gmail.com")
        (setq smtpmail-smtp-service 587)
        (setq smtpmail-debug-info t)
        (setq smtpmail-debug-verb t)

        ;; don't keep message buffers around
        (setq message-kill-buffer-on-exit t))
    #+END_SRC
*** notmuch
    #+BEGIN_SRC emacs-lisp
      (req-package notmuch
        :config
        (setq mm-text-html-renderer nil)
        (setq notmuch-identities custom/gmail-accounts)
        (setq notmuch-fcc-dirs
              '(("aaermolov@gmail.com" . "aaermolov@gmail.com/Sent")
                ("aermolov@mirantis.com" . "aermolov@mirantis.com/Sent")))
        (define-key notmuch-search-mode-map "!"
          (lambda (&optional beg end)
            "mark thread as spam"
            (interactive (notmuch-search-interactive-region))
            (notmuch-search-tag (list "-spam" "-unread") beg end)
            (next-line)))
        ;; stores postponed messages to the specified directory
        ;; (setq message-directory "MailLocation/Drafts") ;TODO: customize with if/cond
        (setq notmuch-saved-searches
              '((:name "all unread" :query "tag:unread" :key "a")
                (:name "personal" :query "to:aaermolov@gmail.com tag:unread" :key "p")
                (:name "work / weekly reports" :query "from:mirantis.com subject:weekly AND tag:unread" :key "W")
                (:name "gerrit notifications" :query "from:gerrit AND tag:unread" :key "g")
                (:name "work" :query "(to:aermolov@mirantis.com OR to:mos-dev@mirantis.com OR from:mirantis.com) tag:unread" :key "w")
                (:name "TODO items" :query "tag:todo" :key "t")
                (:name "notmuch maillist" :query "notmuch@notmuchmail.org tag:unread" :key "n")
                (:name "stumpwm maillist" :query "stumpwm-devel@nongnu.org tag:unread" :key "s")
                (:name "emacs maillist" :query "emacs-devel@gnu.org tag:unread" :key "e")
                (:name "orgmode maillist" :query "emacs-orgmode@gnu.org tag:unread" :key "o")
                (:name "postgresql maillist" :query "pgsql-hackers@postgresql.org tag:unread" :key "P")))
        (add-hook 'notmuch-hello-refresh-hook
                  (lambda ()
                    (if (and (eq (point) (point-min))
                             (search-forward "Saved searches:" nil t))
                        (progn
                          (forward-line)
                          (widget-forward 1))
                      (if (eq (widget-type (widget-at)) 'editable-field)
                          (beginning-of-line)))))
        ;; Reading mail settings:
        (setq notmuch-crypto-process-mime t) ; Automatically check signatures
        ;; Crypto Settings
        (add-hook 'message-setup-hook 'mml-secure-sign-pgpmime)
        (add-hook 'message-setup-hook 'mml-secure-message-sign-pgpmime)
        ;;Settings for main screen
        (setq notmuch-hello-hide-tags (quote ("killed")))
        (require 'org-notmuch))

      (req-package helm-notmuch
        :require helm notmuch)
    #+END_SRC
*** hydra
    #+BEGIN_SRC emacs-lisp
      (defhydra hydra-email (:exit t :color red)
        "Read mail"
        ("n" notmuch nil))
      (global-set-key (kbd "C-c 4") 'hydra-email/body)
    #+END_SRC
** various useful packages
   #+BEGIN_SRC emacs-lisp
     (req-package tramp
       :init
       (setq tramp-default-method "ssh")
       :config
       ;; Allow to use: /sudo:user@host:/path/to/file
       (setq tramp-ssh-controlmaster-options "")
       (add-to-list 'tramp-default-proxies-alist
                    '(".*" "\\`.+\\'" "/ssh:%h:")))

     (req-package google-translate
       :defer t
       :init
       (req-package google-translate-default-ui))

     (imagemagick-register-types)

     (req-package notify)

     (req-package wttrin
       :require xterm-color
       :config
       (setq wttrin-default-cities '("Moscow")))
   #+END_SRC
* pim
** bbdb
   the code below need to be reorganized, it seems to not work
   req-package is not usable before it
   #+BEGIN_SRC emacs-lisp :tangle no
     (req-package bbdb-loaddefs
       :defer t
       :commands bbdb
       :init
       (req-package bbdb)
       :config
       (setq bbdb-change-hook 'bbdb-timestamp-hook)
       (setq bbdb-complete-name-allow-cycling t)
       (setq bbdb-completion-display-record nil)
       (setq bbdb-dwim-net-address-allow-redundancy t)
       (setq bbdb-file '"~/.database.bbdb")
       (setq bbdb-north-american-phone-numbers-p nil)
       (setq bbdb-notice-hook 'bbdb-auto-notes-hook)
       (setq bbdb-offer-save 'savenoprompt) ;'automatic
       (setq bbdb-phone-style 'nil)
       (setq bbdb-quiet-about-name-mismatches t)
       (setq bbdb-readonly-p nil)
       (setq bbdb-sounds-directory nil)
       (setq bbdb-use-alternate-names nil)
       (setq bbdb-use-pop-up nil)
       (setq bbdb/mail-auto-create-p 'bbdb-ignore-most-messages-hook)
       (setq news-reply-header-hook nil)
       (add-to-list 'file-coding-system-alist (cons "\\.bbdb"  'utf-8))
       (define-coding-system-alias 'utf-8-emacs 'utf-8) ; needed by bbdb...
       (bind-key "<tab>" 'custom/my-bbdb-tab-complete message-mode-map)
       (bind-key "C-c C-e" 'bbdb-edit-current-field bbdb-mode-map)
       (bind-key "C-c C-f d" 'bbdb-delete-current-field-or-record bbdb-mode-map)
       (bind-key "C-c C-f i" 'bbdb-insert-new-field bbdb-mode-map))
   #+END_SRC
** calendars
   #+BEGIN_SRC emacs-lisp
     (req-package calfw
       :require google-maps
       :defer t
       :init
       (req-package calfw-ical)
       (req-package calfw-org)
       :config
       (setq calendar-week-start-day 1) ; 0:Sunday, 1:Monday
       ;; Unicode characters
       (setq cfw:fchar-junction ?╬
             cfw:fchar-vertical-line ?║
             cfw:fchar-horizontal-line ?═
             cfw:fchar-left-junction ?╠
             cfw:fchar-right-junction ?╣
             cfw:fchar-top-junction ?╦
             cfw:fchar-top-left-corner ?╔
             cfw:fchar-top-right-corner ?╗)
       ;; Week days
       (setq calendar-day-name-array
             ["Воскресенье" "Понедельник" "Вторник" "Среда" "Четверг" "Пятница" "Суббота"])
       ;; Month
       (setq calendar-month-name-array
             ["Январь" "Февраль" "Март" "Апрель" "Май" "Июнь" "Июль" "Август" "Сентябрь"
              "Октябрь" "Ноябрь" "Декабрь"])
       (custom-set-faces
        '(cfw:face-title ((t (:foreground "#f0dfaf" :weight bold :height 2.0 :inherit variable-pitch))))
        '(cfw:face-header ((t (:foreground "#d0bf8f" :weight bold))))
        '(cfw:face-sunday ((t :foreground "#cc9393" :background "grey10" :weight bold)))
        '(cfw:face-saturday ((t :foreground "#8cd0d3" :background "grey10" :weight bold)))
        '(cfw:face-holiday ((t :background "grey10" :foreground "#8c5353" :weight bold)))
        '(cfw:face-grid ((t :foreground "DarkGrey")))
        '(cfw:face-default-content ((t :foreground "#bfebbf")))
        '(cfw:face-periods ((t :foreground "cyan")))
        '(cfw:face-day-title ((t :background "grey10")))
        '(cfw:face-default-day ((t :weight bold :inherit cfw:face-day-title)))
        '(cfw:face-annotation ((t :foreground "RosyBrown" :inherit cfw:face-day-title)))
        '(cfw:face-disable ((t :foreground "DarkGray" :inherit cfw:face-day-title)))
        '(cfw:face-today-title ((t :background "#7f9f7f" :weight bold)))
        '(cfw:face-today ((t :background: "grey10" :weight bold)))
        '(cfw:face-select ((t :background "#2f2f2f")))
        '(cfw:face-toolbar ((t :foreground "Steelblue4" :background "Steelblue4")))
        '(cfw:face-toolbar-button-off ((t :foreground "Gray10" :weight bold)))
        '(cfw:face-toolbar-button-on ((t :foreground "Gray50" :weight bold))))
       (defun custom/calfw-open-calendar ()
         (interactive)
         (cfw:open-calendar-buffer
          :contents-sources
          (list
           (cfw:org-create-source "Green")  ; orgmode source
           (cfw:ical-create-source "gcal" private/google-calendar-url "IndianRed") ; google calendar ICS
           (cfw:ical-create-source "gcal" private/google-family-calendar-url "IndianRed")))))

     (req-package calfw-gcal
       :defer t
       :require calfw)

     (req-package org-gcal
       :require request-deferred alert cl-lib org
       :defer t
       :config
       (setq org-gcal-client-id private/org-gcal-client-id)
       (setq org-gcal-client-secret private/org-gcal-client-secret)
       (setq org-gcal-file-alist private/org-gcal-file-alist))
   #+END_SRC
** deft
*** definitions
    #+BEGIN_SRC emacs-lisp
      (define-namespace custom/deft/

      ;;advise deft to save window config
      (defun save-windows (orig-fun &rest args)
        (setq custom/pre-deft-window-config (current-window-configuration))
        (apply orig-fun args))

      ;;function to quit a deft edit cleanly back to pre deft window
      (defun quit-deft ()
        "Save buffer, kill buffer, kill deft buffer, and restore
        window config to the way it was before deft was invoked"
        (interactive)
        (save-buffer)
        (kill-this-buffer)
        (switch-to-buffer "*Deft*")
        (kill-this-buffer)
        (when (window-configuration-p custom/pre-deft-window-config)
          (set-window-configuration custom/pre-deft-window-config)))
      )
    #+END_SRC
*** setup
    #+BEGIN_SRC emacs-lisp
      (req-package deft
        :defer t
        :config
        (setq deft-directory (at-homedir "/deft"))
        (setq deft-extension "org")
        (setq deft-text-mode 'org-mode)
        (setq deft-use-filename-as-title t)
        (advice-add 'deft :around #'custom/deft/save-windows))
    #+END_SRC
** orgmode
*** preface
    org-mode is already loaded because we needed to tangle
    emacs-config.org, so no need to use use-package.
**** Notes about setting up org-capture
     update-desktop-database

     URL:
     javascript:location.href='org-protocol://capture://l/'+encodeURIComponent(location.href)+'/'+encodeURIComponent(document.title)+'/'+encodeURIComponent(window.getSelection())

     ~/.local/share/applications/mimeapps.list
     [Default Applications]
     x-scheme-handler/org-protocol=org-protocol.desktop

     ~/.local/share/applications/org-protocol.desktop
     [Desktop Entry]
     Name=org-protocol
     Exec=emacsclient %u
     Type=Application
     Terminal=false
     Categories=System;
     MimeType=x-scheme-handler/org-protocol;
*** definitions
**** process thing at point
     #+BEGIN_SRC emacs-lisp
       (define-namespace custom/

       (defun open-or-browse-at-point (arg)
         (interactive "P")
         (if arg
             (browse-url-at-point)
           (org-open-at-point)))

       (defadvice browse-url-at-point (before org-position-url activate)
         (when (derived-mode-p 'org-mode)
           (let ((end nil))
             (save-excursion
               (org-back-to-heading t)
               (setq end (save-excursion (outline-next-heading) (point))))
             (org-back-to-heading t)
             (re-search-forward custom/url-regexp end t))))

       )
     #+END_SRC
**** Org journalling and archiving
     :PROPERTIES:
     :ID:       ac9bd4a6-f167-4408-aa97-c58843003584
     :END:
     #+BEGIN_SRC emacs-lisp
       (defvar custom/org-journal-file (at-org-dir "/journal.org"))

       (setq org-archive-location (concat custom/org-journal-file "::datetree/"))
     #+END_SRC
**** open org agenda when we need it
     #+BEGIN_SRC emacs-lisp
       (define-namespace custom/

       (defun jump-to-org-agenda ()
         (interactive)
         (let ((buf (get-buffer "*Org Agenda*"))
               wind)
           (if buf
               (if (setq wind (get-buffer-window buf))
                   (select-window wind)
                 (if (called-interactively-p)
                     (progn
                       (select-window (display-buffer buf t t))
                       (org-fit-window-to-buffer)
                       ;; (org-agenda-redo)
                       )
                   (with-selected-window (display-buffer buf)
                     (org-fit-window-to-buffer)
                     ;; (org-agenda-redo)
                     )))
             (call-interactively 'org-agenda-list)))
         ;;(let ((buf (get-buffer "*Calendar*")))
         ;;  (unless (get-buffer-window buf)
         ;;    (org-agenda-goto-calendar)))
         )

       )
     #+END_SRC
**** timestamps utils
     #+BEGIN_SRC emacs-lisp
       (define-namespace custom/

       ;;TODO: use prefix arg
       (defun org-update-timestamp-with-time (&optional as-is)
         (interactive)
         (unless as-is
           (insert " "))
         (insert (format-time-string "%H:%M")))

       (defun get-org-timestamp ()
         (with-temp-buffer
           (call-interactively 'org-time-stamp-inactive)
           (buffer-string)))

       (defun strip-org-timestamp (ts)
         (let ((tslen (length ts)))
           (substring ts 1 (- tslen 4))))

       )
     #+END_SRC
**** navigation
     #+BEGIN_SRC emacs-lisp
       (define-namespace custom/

       ;; Exclude DONE state tasks from refile targets
       (defun verify-refile-target ()
         "Exclude todo keywords with a done state from refile targets"
         (not (member (nth 2 (org-heading-components)) org-done-keywords)))

       ;;TODO: customize "todo-only" parameter for "org-tags-view"
       (defun follow-tag-link (tag)
         "Display a list of TODO headlines with tag TAG.
         With prefix argument, also display headlines without a TODO keyword."
         (org-tags-view nil tag))              ;nil was (null current-prefix-arg) originally

       )
     #+END_SRC
**** utils
     #+BEGIN_SRC emacs-lisp
       (define-namespace custom/

       ;; Remove empty CLOCK drawers on clock out
       (defun remove-empty-drawer-on-clock-out ()
           (interactive)
           (save-excursion
               (beginning-of-line 0)
           (org-remove-empty-drawer-at "CLOCK" (point))))

       (defun org-use-speed-commands-for-headings-and-lists ()
         "Activate speed commands on list items too."
         (or (and (looking-at org-outline-regexp) (looking-back "^\**"))
             (save-excursion (and (looking-at (org-item-re)) (looking-back "^[ \t]*")))))

       (defun org-capture-refile-and-jump ()
         (interactive)
         (org-capture-refile)
         (org-refile-goto-last-stored))

       )
     #+END_SRC
**** custom sorting
     #+BEGIN_SRC emacs-lisp :tangle no
       (define-namespace custom/

       (defvar custom/priority-todos-for-sorting '("STARTED"))

       (defun custom/todo-to-started-first-int ()
         "Default todo order is modified by giving more priority to
       todo's from custom/priority-todos-for-sorting and entries
       without any todo keywords at all."
         (let* ((props (org-entry-properties))
                (item-todo (cdr (assoc "TODO" props)))
                (item-prio (- (aif (cdr (assoc "PRIORITY" props))
                                  (aref it 0)
                                org-default-priority)
                              org-highest-priority))
                (modified-todo-order
                 (append custom/priority-todos-for-sorting
                         (-remove #'(lambda (todo) (member todo custom/priority-todos-for-sorting)) org-todo-keywords-1)))
                (todo-idx (if item-todo (1+ (-elem-index item-todo modified-todo-order)) 0))
                (prio-range (1+ (- org-default-priority org-highest-priority))))
           (+ (* prio-range todo-idx) item-prio)))

       (defun org-sort-entries ()
         (interactive)
         (org-sort-entries nil ?f #'custom/todo-to-started-first-int))

       )
     #+END_SRC
**** pick up random Org task
     #+BEGIN_SRC emacs-lisp
       (defun org-random-entry (&optional arg)
         "Select and goto a random todo item from the global agenda"
         (interactive "P")
         (if org-agenda-overriding-arguments
             (setq arg org-agenda-overriding-arguments))
         (if (and (stringp arg) (not (string-match "\\S-" arg))) (setq arg nil))
         (let* ((today (org-today))
                (date (calendar-gregorian-from-absolute today))
                (kwds org-todo-keywords-for-agenda)
                (lucky-entry nil)
                (completion-ignore-case t)
                (org-agenda-buffer (when (buffer-live-p org-agenda-buffer)
                                     org-agenda-buffer))
                (org-select-this-todo-keyword
                 (if (stringp arg) arg
                   (and arg (integerp arg) (> arg 0)
                        (nth (1- arg) kwds))))
                rtn rtnall files file pos marker buffer)
           (when (equal arg '(4))
             (setq org-select-this-todo-keyword
                   (org-icompleting-read "Keyword (or KWD1|K2D2|...): "
                                         (mapcar 'list kwds) nil nil)))
           (and (equal 0 arg) (setq org-select-this-todo-keyword nil))
           (catch 'exit
             (org-compile-prefix-format 'todo)
             (org-set-sorting-strategy 'todo)
             (setq files (org-agenda-files nil 'ifmode)
                   rtnall nil)
             (while (setq file (pop files))
               (catch 'nextfile
                 (org-check-agenda-file file)
                 (setq rtn (org-agenda-get-day-entries file date :todo))
                 (setq rtnall (append rtnall rtn))))
             (when rtnall
               (setq lucky-entry
                     (nth (random
                           (safe-length
                            (setq entries rtnall)))
                          entries))
               (setq marker (or (get-text-property 0 'org-marker lucky-entry)
                                (org-agenda-error)))
               (setq buffer (marker-buffer marker))
               (setq pos (marker-position marker))
               (org-pop-to-buffer-same-window buffer)
               (widen)
               (goto-char pos)
               (when (derived-mode-p 'org-mode)
                 (org-show-context 'agenda)
                 (save-excursion
                   (and (outline-next-heading)
                        (org-flag-heading nil))) ; show the next heading
                 (when (outline-invisible-p)
                   (show-entry))                 ; display invisible text
                 (run-hooks 'org-agenda-after-show-hook))))))
     #+END_SRC
**** to be done
***** TODO some handle for getting 'done' tasks within particular time range
***** TODO some tag for those tasks not directly needed for job tasks (e.g. my own setups, ssh, etc)
***** TODO save done.org after refiling finisheda
***** TODO auto change status TODO --> DONE before refiling
*** setup
**** advices
     show desktop notifications for org-capture
     #+BEGIN_SRC emacs-lisp :tangle no
       (defadvice org-protocol-do-capture (around display-notify-after-capture)
         (let ((result ad-do-it))
           (if (and result
                    (file-executable-p "/usr/bin/notify-send"))
               (call-process "/usr/bin/notify-send" nil 0 nil
                             "--expire-time" "3000" "-u" "low"
                             "-i" (expand-file-name "~/.emacs.d/org.svg")
                             "Link captured"
                             (concat (caar org-stored-links)
                                     "\n"
                                     (cadar org-stored-links))))
           result))
     #+END_SRC
     and remove read-only props from yanked text (e.g. from jabber.el chat buffer)
     #+BEGIN_SRC emacs-lisp :tangle no
       (defadvice org-yank (after make-yank-writeable activate)
         (let ((inhibit-read-only t))
           (remove-text-properties (region-beginning) (region-end)
                                   '(read-only t))))
     #+END_SRC
**** additional packages
     #+BEGIN_SRC emacs-lisp
       (req-package icalendar :defer t)
       (req-package org-footnote :defer t)
       (req-package org-magit :require magit org)
       (req-package org-pomodoro :require alert cl-lib)

       (req-package ox-html)
       (req-package org-dashboard
         :require cl-lib
         :defer t)
       (req-package orgit :requires dash magit org)
       (req-package org-bullets)

       (req-package helm-org
         :require helm
         :commands helm-org
         :config
         (custom/advice-for-major-mode org-mode helm-org-in-buffer-headings))

       (req-package org-context
         :defer t
         :config
         ;;TODO: leverage real contexts
         (org-context-activate))

       (req-package orglink
         :require dash org
         :defer t
         :config
         ;; TODO: customize orglink-activate-in-modes
         (global-orglink-mode)
         (diminish 'orglink-mode "OL"))

       (req-package org-linkany
         :require log4e yaxception
         :defer t)

       (req-package org-bookmark-heading)

       (req-package org-random-todo)
     #+END_SRC
**** common 
     #+BEGIN_SRC emacs-lisp
       (add-to-list 'file-coding-system-alist (cons "\\.\\(org\\|org_archive\\|/TODO\\)$"  'utf-8))

       (setq org-list-demote-modify-bullet '(("+" . "-")
                                             ("*" . "-")
                                             ("1." . "-")
                                             ("1)" . "-")
                                             ("A)" . "-")
                                             ("B)" . "-")
                                             ("a)" . "-")
                                             ("b)" . "-")
                                             ("A." . "-")
                                             ("B." . "-")
                                             ("a." . "-")
                                             ("b." . "-")))

       ;; extend priorities set
       (setq org-lowest-priority 70)
     #+END_SRC
**** user speed commands
     #+BEGIN_SRC emacs-lisp
       (setq org-use-speed-commands 'custom/org-use-speed-commands-for-headings-and-lists)
       (setq org-use-speed-commands t)

       (add-to-list 'org-speed-commands-user '("x" org-todo "DONE"))
       (add-to-list 'org-speed-commands-user '("y" org-todo-yesterday "DONE"))
       (add-to-list 'org-speed-commands-user '("s" call-interactively 'org-schedule))
       (add-to-list 'org-speed-commands-user '("i" call-interactively 'org-clock-in))
       (add-to-list 'org-speed-commands-user '("o" call-interactively 'org-clock-out))
       (add-to-list 'org-speed-commands-user '("$" call-interactively 'org-archive-subtree))
     #+END_SRC
**** collect files for agenda
     #+BEGIN_SRC emacs-lisp
       ;; (setf org-agenda-files
       ;;      (-map #'f-expand
       ;;            (-filter #'f-exists?
       ;;                     '("~/org/personal.org"
       ;;                       "~/org/refile.org"
       ;;                       "~/org/subscriptions.org"
       ;;                       "~/org/mirantis.org"
       ;;                       "~/org/mira-cal.org"
       ;;                       "~/.rc/emacs-config.org"
       ;;                       "~/org/ference.org"))))


       (f-entries (at-org-dir)
                  (lambda (entry) (when (and (f-file? entry)
                                             (s-suffix? "org" entry)
                                             (file-exists-p entry))
                                    (push entry org-agenda-files)))
                  t)

       ;; TODO: maybe do it less straightforward
       (setq org-agenda-files (delete (at-org-dir "/journal.org") org-agenda-files))
     #+END_SRC
**** agenda customizations
     #+BEGIN_SRC emacs-lisp
       (setf org-agenda-clockreport-parameter-plist '(:link t :maxlevel 2 :narrow 60))
       (setq org-agenda-dim-blocked-tasks 'invisible)
       (setq org-agenda-include-all-todo t)
       (setq org-agenda-include-diary t)
       (setq org-agenda-inhibit-startup t)
       (setq org-agenda-persistent-filter t)
       (setq org-agenda-repeating-timestamp-show-all nil)
       (setq org-agenda-restore-windows-after-quit t)
       (setq org-agenda-show-all-dates t)
       (setq org-agenda-show-inherited-tags nil)
       (setq org-agenda-show-log t)
       (setq org-agenda-skip-additional-timestamps-same-entry t)
       (setq org-agenda-skip-deadline-if-done t)
       (setq org-agenda-skip-deadline-prewarning-if-scheduled 'pre-scheduled)
       (setq org-agenda-skip-scheduled-if-done t)
       (setq org-agenda-skip-timestamp-if-done t)
       (setq org-agenda-span 'month)
       (setq org-agenda-start-on-weekday 1) ;;was nil
       (setq org-agenda-sticky nil)            ;otherwise agenda behaves strangely on non-stuck projects
       (setq org-agenda-tags-todo-honor-ignore-options t)
       (setq org-agenda-todo-ignore-deadlines 'all)
       (setq org-agenda-todo-ignore-scheduled 'all)
       (setq org-agenda-todo-ignore-timestamp 'past)
       (setq org-agenda-todo-ignore-with-date t)
       (setq org-agenda-todo-list-sublevels nil)
       (setq org-agenda-use-tag-inheritance t)
       (setq org-agenda-window-setup 'current-window) ;; was 'only-window
       (setf agenda-opts-all-with-time
             '((org-agenda-todo-ignore-scheduled nil)
               (org-agenda-todo-ignore-deadlines nil)
               (org-agenda-todo-ignore-with-date nil)))


       (setq org-agenda-time-grid
             '((daily today require-timed remove-match)
               "----------------"
               (930 1000 1200 1400 1600 1800 2000 2200 2400 2500)))

       (setq org-agenda-custom-commands
             `(("d" . "some non-straightforward TODO statuses")
               ("db" todo "BACKLOG" nil)
               ("ds" todo "SOON" nil)
               ("dc" todo "CANCELLED" nil)
               ("dw" todo "WAITING|FEEDBACK" nil)
               ("dg" todo "GOING" ,agenda-opts-all-with-time)
               ("da" tags "+actual_p")
               ("c" . "by context")
               ("cp" tags "+@personal/GOING|WAITING|BACKLOG|SOON")
               ("cr" tags "+@project/GOING|WAITING|BACKLOG|SOON")
               ("cj" tags "+@job/GOING|WAITING|FEEDBACK|BACKLOG|SOON")
               ("cw" tags "+@workplace/GOING|WAITING|BACKLOG|SOON")
               ("ct" tags "+@phonecall/WAITING|BACKLOG|SOON")
               ("cs" tags "+@someday")
               ("cq" tags "+@quicknote")
               ("e" . "by essence")
               ;;TODO: find more handy shortcuts
               ("ec" tags "+current")
               ("ef" tags "+reference")
               ("em" tags "+master")
               ("eo" tags "+ordering")
               ("er" tags "+repair")
               ("ed" tags "+develop")
               ("ei" tags "+investigate")
               ("ee" tags "+entertainment")
               ("ey" tags "+family")
               ("eH" tags-todo "+housekeeping")
               ("eC" tags-todo "+current")
               ("eF" tags-todo "+reference")
               ("eM" tags-todo "+master")
               ("eO" tags-todo "+ordering")
               ("eR" tags-todo "+repair")
               ("eD" tags-todo "+develop")
               ("eI" tags-todo "+investigate")
               ("eE" tags-todo "+entertainment")
               ("u" . "unassigned")
               ("up" alltodo "Unprioritized TODO entries"
                ((org-agenda-skip-function
                  (lambda nil
                    (org-agenda-skip-entry-if 'regexp "\\[#[ABC]]")))
                 (org-tags-match-list-sublevels 'indented)
                 (org-agenda-sorting-strategy
                  '((agenda time-up tag-up) ))
                 ;; '(org-agenda-sorting-strategy '((agenda time-up priority-down tag-up) (todo tag-up)))
                 (org-agenda-overriding-header "Unprioritized TODO entries: ")))
               ("P" . "Prioritized tasks")
               ("Pa" "Prioritized tasks A"
                ((tags-todo "+PRIORITY=\"A\"") ))
               ("Pb" "Prioritized tasks B"
                ((tags-todo "+PRIORITY=\"B\"")))
               ("Pc" "Prioritized tasks C"
                ((tags-todo "+PRIORITY=\"C\"")))
               ("S" "Scheduled tasks" agenda ""
                ((org-agenda-time-grid nil)
                 (org-deadline-warning-days 32)
                 (org-agenda-entry-types '(:scheduled))
                 ))
               ("p" tags "+purchase")
               ("b" . "tickets")
               ("be" tags "+ticket+emacs")
               ("bs" tags "+ticket+stumpwm")
               ("jc" tags "+@job+current/GOING|FEEDBACK")
               ))

       (setq org-agenda-prefix-format '((agenda . " %i %-12:c%?-12t% s %b")
                                        (timeline . "  % s")
                                        (todo . " %i %-12:c")
                                        (tags . " %i %-12:c")
                                        (search . " %i %-12:c")))
     #+END_SRC
**** clocking customizations
     #+BEGIN_SRC emacs-lisp
       (setq org-clock-history-length 35)
       (setq org-clock-idle-time 3)
       (setq org-clock-in-resume t)
       (setq org-clock-in-switch-to-state "GOING")
       (setq org-clock-out-switch-to-state "HOLD")
       (setq org-clock-into-drawer "CLOCK")
       (setq org-clock-out-remove-zero-time-clocks t)
       (setq org-clock-persist t)
     #+END_SRC
**** refiling customizations
     #+BEGIN_SRC emacs-lisp
       (setq org-refile-allow-creating-parent-nodes 'confirm)
       (setq org-refile-target-verify-function 'custom/verify-refile-target)
       (setq org-refile-targets '((org-agenda-files :maxlevel . 5) (nil :maxlevel . 5)))
       (setq org-refile-use-outline-path 'file)

       (custom/advice-for-major-mode org-mode org-refile)
     #+END_SRC
**** various customizations
     #+BEGIN_SRC emacs-lisp
       (setf org-catch-invisible-edits 'show)
       (setf org-fast-tag-selection-include-todo nil)
       (setf org-id-link-to-org-use-id t)
       (setq appt-display-interval 5)
       (setq appt-message-warning-time 10)
       (setq calendar-date-style 'european)
       (setq org-align-all-tags t)
       (setq org-attach-directory (at-org-dir "/org-attach-data"))
       (setq org-blank-before-new-entry '((heading) (plain-list-item . auto)))
       (setq org-columns-default-format "%42ITEM %TODO %3Effort(E){:} %3CLOCKSUM_T(R) %SCHEDULED")
       (setq org-confirm-elisp-link-function 'y-or-n-p)
       (setq org-ctrl-k-protect-subtree t)
       (setq org-cycle-include-plain-lists 'integrate)
       (setq org-cycle-separator-lines 0)
       (setq org-deadline-warning-days 30)
       (setq org-default-notes-file (at-org-dir "/refile.org"))
       (setq org-ditaa-jar-path (at-config-basedir "resources/ditaa0_9.jar"))
       (when (featurep 'unicode-fonts)
         (setq org-ellipsis "⤵"))
       (setq org-enforce-todo-checkbox-dependencies t)
       (setq org-enforce-todo-dependencies t)  ;;TODO: try ORDERED/NOBLOCKING props : org-toggle-ordered-property
       (setq org-export-coding-system 'utf-8)
       (setq org-export-with-drawers t)
       (setq org-extend-today-until 2)
       (setq org-fast-tag-selection-single-key 'expert)
       (setq org-fontify-done-headline t)
       (setq org-global-properties '(("STYLE_ALL" . "habit")))
       (setq org-goto-max-level 10)
       (setq org-hide-leading-stars t)
       (setq org-indirect-buffer-display 'current-window)
       (setq org-insert-mode-line-in-empty-file t)
       (setq org-log-done t)
       (setq org-log-into-drawer t)
       (setq org-log-repeat 'time)
       (setq org-loop-over-headlines-in-active-region t)
       (setq org-outline-path-complete-in-steps nil)
       (setq org-read-date-prefer-future 'time)
       (setq org-return-follows-link t)
       (setq org-special-ctrl-a/e t)
       (setq org-special-ctrl-k t)
       (setq org-src-fontify-natively t)
       (setq org-startup-folded nil)
       (setq org-stuck-projects '("+LEVEL=1/-DONE" ("TODO" "GOING" "NEXT" "WAITING" "HOLD" "CANCELLED") nil ""))
       (setq org-tags-column -80)
       (setq org-track-ordered-property-with-tag t)
       (setq org-use-effective-time t)
       (setq org-use-property-inheritance t)
       (setq org-use-sub-superscripts nil)
       (setq org-yank-adjusted-subtrees t)
       ;; (setq org-columns-default-format "%50ITEM %12SCHEDULED %TODO %3PRIORITY %Effort{:} %TAGS")
       ;; (add-to-list 'org-global-properties
       ;;                          '("Effort_ALL". "0:05 0:15 0:30 1:00 2:00 3:00 4:00"))
       ;; (setq org-global-properties (quote (("Effort_ALL" . "0:10 0:30 1:00 2:00 3:00 4:00 5:00 6:00 7:00 8:00"))))
       ;; (setq org-drawers '("PROPERTIES" "LOGBOOK" "CLOCK" "FILES"))
     #+END_SRC
**** keywords setup
     #+BEGIN_SRC emacs-lisp
       (setq kw-seq-common '(sequence "BACKLOG(b)" "SOON(s)" "REPEAT(r)" "GOING(g!)" "NEXT(x)" "WAITING(w@/!)" "FEEDBACK"
                                      "|" "DONE(d!/@)" "CANCELLED(c@/!)" "OUTDATED(o)"))
       (setq org-todo-keywords
             `(,kw-seq-common))
       (setq org-todo-keywords-for-agenda '("BACKLOG(b)" "SOON(s)" "REPEAT(r)" "GOING(g!)" "NEXT(x)" "WAITING(w@/!)" "FEEDBACK"))
       (setq org-done-keywords-for-agenda '("DONE(d)" "CANCELLED(c)" "OUTDATED(o)"))
     #+END_SRC
**** faces
     #+BEGIN_SRC emacs-lisp
       (setq org-todo-keyword-faces
             '(("BACKLOG" . (:foreground "gray" :weight bold))
               ("SOON" . (:foreground "magenta" :weight bold))
               ("REPEAT" . (:foreground "blue" :weight bold))
               ("NEXT" . (:foreground "red" :weight bold))
               ("WAITING" . (:foreground "orange" :weight bold))
               ("FEEDBACK" . (:foreground "yellow" :weight bold))
               ("CANCELLED" . (:foreground "cyan" :weight bold))
               ("DONE" . (:foreground "green" :weight bold))))

       (setq org-priority-faces
             '((?A :foreground "red" :weight bold)
               (?B :foreground "#94bff3" :weight bold)
               (?C :foreground "#6f6f6f")
               (?D :foreground "#c390d4")
               (?E :foreground "#90c3d4")
               (?F :foreground "#a1d490")))

       (set-face-attribute 'org-done nil :foreground "PaleGreen" :weight 'normal :strike-through t)
       (set-face-attribute 'org-headline-done nil :foreground "LightSalmon" :weight 'normal :strike-through t)
     #+END_SRC
**** tags
     #+BEGIN_SRC emacs-lisp
       (setq org-tag-alist '(("current" . ?c)
                             ("reference" . ?f)
                             ("orgmode" . ?g)
                             ("purchase" . ?p)
                             ("master" . ?m)
                             ("ordering" . ?o)
                             ("housekeeping" . ?h)
                             ("entertainment" . ?e)
                             ("interesting" . ?i)
                             ("repair" . ?r)
                             ))
       (setq org-tags-exclude-from-inheritance '("project"))

       (setq org-todo-state-tags-triggers
             '(("GOING" ("current" . t))
               ("DONE" ("current"))))
     #+END_SRC
***** BACKLOG review whole tags cloud (in org corpus) and update org-tag-alist accordingly
**** org-habit
     #+BEGIN_SRC emacs-lisp
       (setq org-habit-graph-column 50)
       (setq org-habit-preceding-days 10)
       (setq org-habit-following-days 4)
       (setq org-habit-show-habits-only-for-today nil)
     #+END_SRC
**** org-capture
     org-id usage example for the future:
     "* TODO___ %a\n  :PROPERTIES:\n  :ID: %(org-id-new)\n  :END:\n  %U\n\n  %i"
     #+BEGIN_SRC emacs-lisp
       (setq org-capture-templates
             '(("d" "todo")
               ("dp" "personal tasks" entry (file (at-org-dir "/tasks.org")) "* BACKLOG [#C] %? %U :@personal:")
               ("dw" "workplace tasks" entry (file (at-org-dir "/tasks.org")) "* BACKLOG [#C] %? %U :@workplace:")
               ("dc" "phonecalls" entry (file (at-org-dir "/tasks.org")) "* SOON [#C] %? %U :@phonecall:")
               ("dq" "quick notes (uncategorized)" entry (file (at-org-dir "/refile.org")) "* %? %U :@quicknote:")
               ("de" "emacs todo" entry (file+headline (at-org-dir "/configs/emacs.org") "tickets") "* BACKLOG [#C] %? %U :emacs:ticket:")
               ("dE" "emacs todo" entry (file+headline (at-org-dir "/configs/emacs.org") "tickets") "* BACKLOG %? %U :emacs:code_snippet:\n#+BEGIN_SRC emacs-lisp\n %i%?\n#+END_SRC\n")
               ("ds" "stumpwm todo" entry (file (at-org-dir "/configs/stumpwm.org")) "* BACKLOG [#C] %? %U :stumpwm:ticket:")
               ("t" "try")
               ("tw" "workplace try" entry (file (at-org-dir "/workspace_totry.org")) "* %? %U :@workplace:try")
               ("te" "emacs try" entry (file+headline (at-org-dir "/configs/emacs.org") "to try") "* %? %U :emacs:try:")
               ("i" "sink")
               ("ip" "project ideas" entry (file (at-org-dir "/sink.org")) "* %? %U :project/idea:")
               ("ia" "newspaper articles" entry (file (at-org-dir "/sink.org")) "* %? %U :newspaper:toread:")
               ("ic" "code snippet" entry (file (at-org-dir "/sink.org"))
                "* %^{title} %^g :code_snippet:\n :PROPERTIES:\n :CREATED: %U\n :END:\n\n#+BEGIN_SRC %^{lang}\n %i%?\n#+END_SRC\n")
               ("is" "search" entry (file (at-org-dir "/sink.org")) "* %? %U :search:")
               ("l" "links" entry (file (at-org-dir "/links.org")) "* %? %U :links:send:")
               ("g" "github")
               ("gc" "common" entry (file (at-org-dir "/github.org")) "* %? %U :github:")
               ("gd" "dotfiles" entry (file (at-org-dir "/github.org")) "* %? %U :github:dotfiles:")
               ("ge" "emacs config" entry (file (at-org-dir "/github.org")) "* %? %U :github:emacs-config:")
               ("ga" "awesome config" entry (file (at-org-dir "/github.org")) "* %? %U :github:awesome-config:")
               ("gs" "stumpwm config" entry (file (at-org-dir "/github.org")) "* %? %U :github:stumpwm-config:")
               ("gl" "CL repo to review" entry (file (at-org-kb-dir "/cl-repos.org")) "* %? %U :github:common_lisp:")
               ("g5" "Starred repos" entry (file (at-org-dir "/github.org")) "* %? %U :github:starred:")
               ("m" "mastering" entry (file+headline (at-org-dir "/mastering.org") "inbox") "* %? %U")
               ("p" "new project" entry (file (at-org-dir "/projects.org")) "* %? %U :@project:")
               ("j" "job tasks")
               ("jc" "current" entry (file (at-org-dir private/job-tasks-file)) "* SOON %? %U :@job:current:")
               ("jb" "bug" entry (file (at-org-dir private/job-tasks-file)) "* SOON %? %U :@job:bug:")
               ("jr" "reference item" entry (file (at-org-dir private/job-tasks-file)) "* %? %U :@job:reference:")
               ("jp" "project" entry (file (at-org-dir private/job-tasks-file)) "* BACKLOG %? %U :@job:project:")
               ))

       (defadvice org-protocol-do-capture (around display-notify-after-capture activate)
         (let ((result ad-do-it))
           (custom/notify "Link captured"
                          (concat (caar org-stored-links)
                                  "\n"
                                  (cadar org-stored-links))))
         result)
     #+END_SRC
**** holidays
     #+BEGIN_SRC emacs-lisp
       (setq holiday-orthodox-holidays nil) ; Orthodox holidays to some extent
       (setq holiday-personal-holidays nil) ; personal anniversaries, etc.

       (setq holiday-other-holidays
             (append holiday-orthodox-holidays holiday-personal-holidays))

       (setq calendar-holidays
             (append holiday-other-holidays
                     holiday-solar-holidays))
     #+END_SRC
**** hooks
     #+BEGIN_SRC emacs-lisp
       (add-hook 'org-mode-hook 'turn-on-font-lock)
       (add-hook 'org-mode-hook 'org-bullets-mode)
       (add-hook 'org-clock-out-hook 'custom/remove-empty-drawer-on-clock-out 'append)
       (add-hook 'org-after-refile-insert-hook 'save-buffer)
     #+END_SRC
**** run some commands
     #+BEGIN_SRC emacs-lisp
       (appt-activate t)
       (run-at-time nil 60 'org-save-all-org-buffers)
       (org-add-link-type "tag" 'custom/follow-tag-link)
       (ignore-errors (org-agenda-to-appt))
       (add-hook 'org-finalize-agenda-hook 'org-agenda-to-appt)
       (org-clock-persistence-insinuate) ;; Resume clocking tasks when emacs is restarted
       (run-at-time "06:00" 86400 '(lambda () (setq org-habit-show-habits t)))
       (run-with-idle-timer 300 t 'custom/jump-to-org-agenda)
       (set-charset-priority 'unicode)
       (turn-on-orgtbl)

       (org-babel-do-load-languages
        'org-babel-load-languages
        '((css . t)
          (dot . t)
          (ditaa . t)
          (emacs-lisp . t)
          (js . t)
          (latex . t)
          (org . t)
          (plantuml . t)
          (scheme . t)
          (sh . t)))
     #+END_SRC
**** keybindings
     #+BEGIN_SRC emacs-lisp
       (define-key org-agenda-mode-map (kbd "<f7> .") 'org-agenda-clock-in)
       (define-key org-agenda-mode-map (kbd "<f7> ,") 'org-agenda-clock-out)
       (define-key org-agenda-mode-map (kbd "<f7> o") 'ace-link-org)
       (define-key org-mode-map (kbd "M-o") 'ace-link-org)

       (define-key org-mode-map (kbd "C-'") nil)
       (define-key org-mode-map (kbd "C-c [") nil)
       (define-key org-mode-map (kbd "C-c ]") nil)
       (define-key org-mode-map (kbd "C-c C-o") nil)
     #+END_SRC
*** try
**** excerpt from sachac
     #+BEGIN_SRC emacs-lisp :tangle no
       ;; review
       (use-package org
         :init
         (setq org-clock-idle-time nil)
         (setq org-log-done 'time)
         (setq org-clock-continuously nil)
         (setq org-clock-persist t)
         (setq org-clock-in-switch-to-state "STARTED")
         (setq org-clock-in-resume nil)
         (setq org-show-notification-handler 'message)
         (setq org-clock-report-include-clocking-task t)
         :config
         (org-clock-persistence-insinuate))

       (add-hook 'org-clock-in-prepare-hook
                 'my/org-mode-ask-effort)

       (defun my/org-mode-ask-effort ()
         "Ask for an effort estimate when clocking in."
         (unless (org-entry-get (point) "Effort")
           (let ((effort
                  (completing-read
                   "Effort: "
                   (org-entry-get-multivalued-property (point) "Effort"))))
             (unless (equal effort "")
               (org-set-property "Effort" effort)))))

       (defun my/org-agenda-new ()
         "Create a new note or task at the current agenda item.
       Creates it at the same level as the previous task, so it's better to use
       this with to-do items than with projects or headings."
         (interactive)
         (org-agenda-switch-to)
         (org-capture 0))
       ;; New key assignment
       (define-key org-agenda-mode-map "N" 'my/org-agenda-new)

       (setq org-agenda-sorting-strategy
             '((agenda time-up priority-down tag-up effort-up category-keep)
               (todo user-defined-up todo-state-up priority-down effort-up)
               (tags user-defined-up)
               (search category-keep)))

       (defun my/org-gcal-notify (title mes)
         (message "%s - %s" title mes))
       (use-package org-gcal
         :load-path "~/elisp/org-gcal.el"
         :init (fset 'org-gcal-notify 'my/org-gcal-notify))

       (setq org-export-with-section-numbers nil)
       (setq org-html-include-timestamps nil)
       (setq org-export-with-sub-superscripts nil)
       (setq org-export-with-toc nil)
       (setq org-html-toplevel-hlevel 2)
       (setq org-export-htmlize-output-type 'css)

       (if (string= system-name "webdev")
               (setq my/emacs-notes-directory "~/code/dev/emacs-notes")
           (setq my/emacs-notes-directory "c:/sacha/code/dev/emacs-notes"))
       (setq org-publish-project-alist
                   '(("public"
                        :base-directory "c:/sacha/Dropbox/public"
                        :publishing-directory "c:/sacha/Dropbox/public"
                        :publishing-function my/org-html-publish-to-html-trustingly
                        )
                       ("sharing"
                        :base-directory "c:/sacha/Dropbox/public/sharing"
                        :publishing-directory "c:/sacha/Dropbox/public/sharing"
                        :publishing-function my/org-html-publish-to-html-trustingly
                        )
                       ("emacs-config"
                        :base-directory "~/.emacs.d"
                        :publishing-directory "~/.emacs.d"
                        :publishing-function my/org-html-publish-to-html-trustingly
                        )
                       ("book-notes"
                        :base-directory "c:/sacha/Dropbox/books"
                        :publishing-directory "c:/sacha/Dropbox/books/html"
                        :publishing-function my/org-html-publish-to-html-trustingly
                        :makeindex t)))
       (load "~/code/dev/emacs-chats/build-site.el" t)
       (load "~/code/dev/emacs-notes/build-site.el" t)

       (defun my/org-publish-maybe ()
         (interactive)
         (save-excursion
           (if (org-publish-get-project-from-filename
                        (buffer-file-name (buffer-base-buffer)) 'up)
                       (org-publish-current-file t)
                   (my/org-html-export-trustingly))))
       (bind-key "C-c C-p C-p" 'my/org-publish-maybe org-mode-map)

       (defun my/org-publish-and-browse ()
         (interactive)
         (save-buffer)
         (my/org-publish-maybe)
         (browse-url (org-export-output-file-name ".html" nil default-directory)))
       (bind-key "<apps> b" 'my/org-publish-and-browse)

       (setq org-html-checkbox-type 'unicode)
       (setq org-html-checkbox-types
                   '((unicode (on . "<span class=\"task-done\">&#x2611;</span>")
                                        (off . "<span class=\"task-todo\">&#x2610;</span>")
                                        (trans . "<span class=\"task-in-progress\">[-]</span>"))))

       (setq org-attach-store-link-p 'attached)

       (setq org-startup-with-inline-images t)

       (add-hook 'org-babel-after-execute-hook 'org-display-inline-images)

       (defun my/org-summarize-task-status ()
         "Count number of tasks by status.
       Probably should make this a dblock someday."
         (interactive)
         (let (result)
           (org-map-entries
            (lambda ()
              (let ((todo (elt (org-heading-components) 2)))
                (if todo
                    (if (assoc todo result)
                        (setcdr (assoc todo result)
                                (1+ (cdr (assoc todo result))))
                      (setq result (cons (cons todo 1) result)))))))
           (message "%s" (mapconcat (lambda (x) (format "%s: %d" (car x) (cdr x)))
                                    result "\n"))))

       (setq org-src-window-setup 'current-window)

       (defun my/copy-code-as-org-block-and-gist (beg end)
         (interactive "r")
         (let ((filename (file-name-base))
               (mode (symbol-name major-mode))
               (contents
                (if (use-region-p) (buffer-substring beg end) (buffer-string)))
               (gist (if (use-region-p) (gist-region beg end) (gist-buffer))))
           (kill-new
            (format "\n[[%s][Gist: %s]]\n#+begin_src %s\n%s\n#+end_src\n"
                    (oref (oref gist :data) :html-url) filename
                    (replace-regexp-in-string "-mode$" "" mode)
                    contents))))

       (defun my/org-archive-done-tasks ()
         "Archive finished or cancelled tasks."
         (interactive)
         (org-map-entries
          (lambda ()
            (org-archive-subtree)
            (setq org-map-continue-from (outline-previous-heading)))
          "TODO=\"DONE\"|TODO=\"CANCELLED\"" (if (org-before-first-heading-p) 'file 'tree)))

       ;;TODO: think of autosaving org files after refiling/status changes/etc

       (use-package org-fstree
         :ensure t
         :defer t
         :commands (org-fstree-apply-maybe org-fstree-show-entry-maybe)
         :idle
         (progn (add-hook 'org-ctrl-c-ctrl-c-hook 'org-fstree-apply-maybe)
                (add-hook 'org-pre-cycle-hook 'org-fstree-show-entry-maybe)))

       (use-package ox-reveal :disabled t)

       ;;TODO: bind org-store-link and org-insert-link-global
     #+END_SRC
** hydras
   #+BEGIN_SRC emacs-lisp
     ;;TODO: clusterize various extensions
     (defhydra hydra-pim ()
       "
       BBDB                        Various
       --------------------------------------------------------
       _b_ as it is                _o_ calendar
       _c_ create                  _k_ show keys frequencies
       _u_ delete current record   _d_ deft
       _D_ quit deft
       "
       ("b" bbdb)
       ("c" bbdb-create)
       ("u" bbdb-delete-current-record)
       ("o" custom/calfw-open-calendar)
       ("k" keyfreq-show)
       ("d" deft)
       ("D" custom/deft/quit-deft)
       ("q" nil))
     (global-set-key (kbd "C-c c") 'hydra-pim/body)

     (defhydra hydra-org-sandbox ()
       ("c" org-table-create)
       ("s" org-sparse-tree))

     (defhydra hydra-org-global (:color teal)
       "
         ^Navigation^               ^Agenda^                  ^Clock^             ^Properties^        ^Capture^
         ---------------------------------------------------------------------------------------------------------------
         _<up>_:     up heading     show _a_genda             _._ clock in        set _p_roperty      captur_e_
         _C-<down>_: next heading   _s_chedule                _,_ clock out       _d_elete property   _w_ store link
         _C-<up>_:   prev heading   dead_l_ine                cloc_k_ display                       _y_ insert link
         ace-link for _o_rg         agenda _c_olumns          _g_oto last clock
         _O_pen at point            foot_n_ote action         estimate effor_t_
         show _A_ll                 add t_i_me to timestamp   _c_ancel clock
         clock _r_eport
         po_m_odoro
         "
       ("<up>" outline-up-heading "")
       ("C-<down>" outline-next-heading "")
       ("C-<up>" outline-previous-heading "")
       ("g" org-clock-goto)
       ("p" org-set-property)
       ("d" org-delete-property)
       ("D" org-dashboard-display :color blue)
       ("s" org-schedule :color blue)
       ("l" org-deadline :color blue)
       ("." org-clock-in)
       ("," org-clock-out)
       ("t" org-clock-modify-effort-estimate)
       ("c" org-clock-cancel)
       ("r" org-clock-report)
       ("?" (org-info "Clocking commands"))
       ("k" org-clock-display)
       ("n" org-footnote-action)
       ("w" org-store-link)
       ("y" org-insert-link)
       ("Y" org-insert-link-global)
       ;;TODO: add org-open-at-point-global
       ;;TODO: add org-reveal
       ;;TODO: add org-show-todo-tree
       ("i" custom/org-update-timestamp-with-time)
       ("o" ace-link-org :color blue)
       ("O" custom/open-or-browse-at-point)
       ("e" org-capture :color blue)
       ("a" org-agenda :color blue)
       ("A" show-all)
       ("t" org-toggle-timestamp-type)
       ("m" org-pomodoro)
       ("r" org-refile "refile")
       ("q" nil "cancel"))
     (global-set-key (kbd "<f7>") 'hydra-org-global/body)

     (defhydra hydra-org-movement (:color red :columns 3)
       "Org Mode Movements"
       ("n" outline-next-visible-heading "next heading")
       ("p" outline-previous-visible-heading "prev heading")
       ("N" org-forward-heading-same-level "next heading at same level")
       ("P" org-backward-heading-same-level "prev heading at same level")
       ("u" outline-up-heading "up heading")
       ("g" org-goto "goto" :exit t))
     ;;TODO: bind hydra-org-movement to a key
   #+END_SRC
* publishing
** setup
   #+BEGIN_SRC emacs-lisp :tangle no
     (req-package tex-site)
     (req-package preview-latex)
     (req-package cdlatex)
     (req-package bib-cite)
     (req-package whizzytex)
     (req-package auctex)
     (req-package latex-preview-pane)
     (req-package pdf-tools :require tablist let-alist)

     (setq-default TeX-master nil)
     (setq TeX-parse-self t)
     (setq TeX-auto-save t)
     (setq TeX-default-mode 'latex-mode)
     (setq TeX-open-quote "``")
     (setq TeX-close-quote "''")
     (setq TeX-PDF-mode t)
     (setq font-latex-title-fontify 'color)      ; this gets rid of the large fonts
     (setq font-latex-fontify-sectioning 'color) ; in sections etc
     (setq reftex-enable-partial-scans t)
     (setq reftex-save-parse-info t)
     (setq reftex-use-multiple-selection-buffers t)
     (setq-default whizzy-viewers '(("-dvi" "xdvi") ("-ps" "gv")))
     (setq ps-multibyte-buffer 'bdf-font-except-latin)

     (add-to-list 'safe-local-variable-values '(TeX-open-quote . "<<"))
     (add-to-list 'safe-local-variable-values '(TeX-close-quote . ">>"))

     (defvar ps-print-path "~/ps-print"
       "Path for ps-print output")

     (defun custom/tex-mode-hook ()
       (TeX-fold-mode 1)
       (turn-on-bib-cite)
       (setq bib-cite-use-reftex-view-crossref t))

     (add-hook 'TeX-mode-hook 'custom/tex-mode-hook)
     (add-hook 'LaTeX-mode-hook 'TeX-PDF-mode)
     (add-hook 'LaTeX-mode-hook 'custom/tex-mode-hook)
     (add-hook 'LaTeX-mode-hook 'visual-line-mode)
     (add-hook 'LaTeX-mode-hook 'flyspell-mode)
     (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
     (add-hook 'LaTeX-mode-hook 'turn-on-cdlatex)   ; with AUCTeX LaTeX mode
     (add-hook 'latex-mode-hook 'turn-on-cdlatex)   ; with Emacs latex mode
     (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
     (add-hook 'latex-mode-hook 'turn-on-reftex)


     ;;TODO: plan docstring or reorganize hydra
     (defhydra hydra-publishing ()
       ("w" whizzytex-mode)
       ("p" custom/ps-print-buffer-with-faces)
       ("P" custom/ps-print-region-with-faces)
       ("s" pdf-save-buffer-with-faces)
       ("S" pdf-save-region-with-faces)
       ("q" nil))
     (global-set-key (kbd "C-c n") 'hydra-publishing/body)

     ;; TODO: investigate TEXT_INPUTS usage
     ;; TODO: fix encoding issues (questions marks instead of russian letters)
     ;; TODO: investigate how to deal with bright letters on bright
     ;; background being printed (in such cases letters are almost invisible)
   #+END_SRC
** linux traits
   #+BEGIN_SRC emacs-lisp :tangle (if (eq system-type 'gnu/linux) "no" "no")
     (setq TeX-output-view-style '(("^pdf$" "." "zathura %s.pdf")
                                   ("^html?$" "." "open %o")))
   #+END_SRC
** darwin traits
   #+BEGIN_SRC emacs-lisp :tangle (if (eq system-type 'darwin) "no" "no")
     (setq TeX-output-view-style '(("^pdf$" "." "open -a preview %s.pdf")
                                   ("^html?$" "." "open %o")))
   #+END_SRC
* help
  #+BEGIN_SRC emacs-lisp
    (req-package info)
    (req-package help+)
    (req-package discover-my-major
      :require makey
      :disabled t)

    (add-to-list 'Info-directory-list "/usr/share/info")

    (push "/usr/share/info" Info-directory-list)
    (setenv "MANPATH" "/usr/share/man:/usr/local/man")

    (defun custom/open-info (topic bname)
      "Open info on TOPIC in BNAME."
      (if (get-buffer bname)
          (progn
            (switch-to-buffer bname)
            (unless (string-match topic Info-current-file)
              (Info-goto-node (format "(%s)" topic))))
        (info topic bname)))

    (setq Info-additional-directory-list
          (list (concat home-directory "/help/info")))

    (defalias 'man 'woman) ;'Woman' offers completion better than 'man'.

    (defhydra hydra-apropos (:color blue)
      "
      Apropos
      ---------------
      _a_s it is =)
      _d_ocumentation
      _v_ariable
      _c_ommand
      _l_ibrary
      _u_ser option
      _i_nfo
      _t_ags
      valu_e_
      _m_an pages
      "
      ("a" apropos)
      ("d" apropos-documentation)
      ("v" apropos-variable)
      ("c" apropos-command)
      ("l" apropos-library)
      ("u" apropos-user-option)
      ("i" info-apropos "info")
      ("t" tags-apropos "tags")
      ("e" apropos-value)
      ("m" helm-man-woman))
    (global-set-key (kbd "C-c h") 'hydra-apropos/body)

    (defhydra hydra-info-to (:hint nil :color teal)
      "
      _o_rg _e_lisp e_m_acs _h_yperspec"
      ("o" (custom/open-info "org" "*org info*"))
      ("e" (custom/open-info "elisp" "*elisp info*"))
      ("m" (custom/open-info "emacs" "*emacs info*"))
      ("h" (custom/open-info "gcl" "*hyperspec*")))
    (global-set-key (kbd "C-c C-h") 'hydra-info-to/body)
  #+END_SRC
* staging
  #+BEGIN_SRC emacs-lisp
    (req-package sauron
      :disabled t ; TODO play extensively with package, then likely enable
      :config
      (setq sauron-separate-frame nil)
      (setq sauron-hide-mode-line t)
      (setq sauron-max-line-length 200)
      (setq sauron-modules
            '(sauron-erc sauron-dbus sauron-org sauron-notifications))
      (add-hook 'sauron-event-added-functions 'sauron-fx-notify)
      (bind-key "C-c r t" 'sauron-toggle-hide-show)
      (bind-key "C-c r c" 'sauron-clear)
      (sauron-start))

    ;; TODO: extract emacs init file name
    ;; TODO: deal with emacs server someway
    (defun custom/test-emacs-config ()
      (interactive)
      (require 'async)
      (async-start
       (lambda () (shell-command-to-string
                   "emacs --batch --eval \"
      (condition-case e
      (progn
      (load \\\"~/.emacs.d/init.el\\\")
      (message \\\"-OK-\\\"))
      (error
      (message \\\"ERROR!\\\")
      (signal (car e) (cdr e))))\""))
       `(lambda (output)
          (if (string-match "-OK-" output)
              (when ,(called-interactively-p 'any)
                (message "All is well"))
            (switch-to-buffer-other-window "*startup error*")
            (delete-region (point-min) (point-max))
            (insert output)
            (search-backward "ERROR!")))))

    (defvar custom/transform-whole-words nil)

    (defadvice upcase-word (before upcase-word-advice activate)
      (when (and (not (looking-back "\\b")) custom/transform-whole-words)
        (backward-word)))

    (defadvice downcase-word (before downcase-word-advice activate)
      (when (and (not (looking-back "\\b")) custom/transform-whole-words)
        (backward-word)))

    (defadvice capitalize-word (before capitalize-word-advice activate)
      (when (and (not (looking-back "\\b")) custom/transform-whole-words)
        (backward-word)))

    (defun fix-screwed-up-paragraphs(beg end)
      (interactive "r")
      (shell-command-on-region beg end "fmt -w2000" nil t))

    (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))

    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))

    (req-package typing
      :disabled t
      :init
      (autoload 'typing-of-emacs "typing" nil t)
      :config
      (setq toe-starting-length 6)
      (setq toe-starting-time-per-word 2)
      (setq toe-max-length 20))
  #+END_SRC
* auto-modes
  #+BEGIN_SRC emacs-lisp
    (add-to-list 'auto-mode-alist '("\\.dsl$" . scheme-mode))
    (add-to-list 'auto-mode-alist '("\\.scm$" . scheme-mode))

    ;; ;; JavaScript
    (add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))
    (add-to-list 'auto-mode-alist '("\\.json$" . json-mode))

    (add-to-list 'auto-mode-alist
                 (cons (concat "\\."
                               (regexp-opt '("xml" "xsd" "sch" "rng" "xslt" "svg" "rss" "rdf") t) "\\'")
                       'nxml-mode))

    ;; (add-to-list 'auto-mode-alist '("\\.html$" . django-html-mumamo-mode))
    (add-to-list 'auto-mode-alist '("\\.html$" . html-mode))

    ;; HTML
    (add-to-list 'auto-mode-alist '("\\.tag$" . html-mode))
    (add-to-list 'auto-mode-alist '("\\.vm$" . html-mode))

    (add-to-list 'auto-mode-alist '("\\.wl$" . emacs-lisp-mode))

    (add-to-list 'auto-mode-alist '("\\.muse$" . muse-mode))
    (add-to-list 'auto-mode-alist '("\\.tex$" . latex-mode))

    (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
    (add-to-list 'auto-mode-alist '("\\.org_archive$" . org-mode))
    (add-to-list 'auto-mode-alist '("\\.tagged\\'" . tagger-mode))

    (add-to-list 'auto-mode-alist '("\\.spec$" . rpm-spec-mode))
    (add-to-list 'auto-mode-alist '("\\.po$\\|\\.po\\." . po-mode))
    (add-to-list 'auto-mode-alist '("\\.log$" . auto-revert-mode))

    (add-to-list 'auto-mode-alist '("\\.doku?$" . simple-dokuwiki-mode))
    (add-to-list 'auto-mode-alist '("\\.properties$" . java-properties-generic-mode))

    (add-to-list 'auto-mode-alist '("\\.erl?$" . erlang-mode))
    (add-to-list 'auto-mode-alist '("\\.hrl?$" . erlang-mode))

    (add-to-list 'auto-mode-alist '("\\.hsc$" . haskell-mode))
    (add-to-list 'auto-mode-alist '("\\.[hg]s$"  . haskell-mode))
    (add-to-list 'auto-mode-alist '("\\.hi$"     . haskell-mode))
    (add-to-list 'auto-mode-alist '("\\.l[hg]s$" . literate-haskell-mode))

    (add-to-list 'auto-mode-alist '("\\.el" . emacs-lisp-mode))
    (add-to-list 'auto-mode-alist '("\\.emacs$" . emacs-lisp-mode))
    (add-to-list 'auto-mode-alist '("\\.gnus$" . emacs-lisp-mode))

    (add-to-list 'auto-mode-alist '("\\.rst$" . rst-mode))
    (add-to-list 'auto-mode-alist '("\\.rest$" . rst-mode))

    ;; CSS
    (add-to-list 'auto-mode-alist '("\\.scss$" . css-mode))

    ;; Clojure
    (autoload 'clojure-mode "clojure-mode")
    (add-to-list 'auto-mode-alist '("\\.clj$" . clojure-mode))

    ;; SVG
    (add-to-list 'auto-mode-alist '("\\.svg$" . image-mode))

    ;; Snippets
    (add-to-list 'auto-mode-alist '("yasnippet/snippets" . snippet-mode))
    (add-to-list 'auto-mode-alist '("\\.yasnippet$" . snippet-mode))

    ;; Markdown
    (add-to-list 'auto-mode-alist '("\\.markdown$" . markdown-mode))
    (add-to-list 'auto-mode-alist '("\\.md$" . markdown-mode))
    (add-to-list 'auto-mode-alist '("\\.mkd$" . markdown-mode))
    (add-to-list 'auto-mode-alist '("\\.pdc$" . markdown-mode))
    (add-to-list 'auto-mode-alist '("\\bREADME$" . markdown-mode))

    ;; Highlighting in editmsg-buffer for magit
    (add-to-list 'auto-mode-alist '("COMMIT_EDITMSG" . conf-javaprop-mode))

    (push '("<\\?xml" . nxml-mode) magic-mode-alist)

    ;; (add-to-list 'auto-mode-alist '("\\.plg$" . prolog-mode))

    (add-to-list 'auto-mode-alist '("bashrc$" . sh-mode))
    (add-to-list 'auto-mode-alist '("bash_profile$" . sh-mode))
    (add-to-list 'auto-mode-alist '("bash_aliases$" . sh-mode))
    (add-to-list 'auto-mode-alist '("bash_local$" . sh-mode))
    (add-to-list 'auto-mode-alist '("bash_completion$" . sh-mode))
    (add-to-list 'auto-mode-alist '(".powenv$" . sh-mode))

    ;; Use gdb-script-mode for files ending in .gdb
    (setq auto-mode-alist
          (cons '("\\.gdb$" . gdb-script-mode) auto-mode-alist))

    (add-to-list 'auto-mode-alist '("\\.php" . php-mode))

    (add-to-list 'auto-mode-alist '("\\.stumpwmrc\\'" . lisp-mode))

    (add-to-list 'auto-mode-alist '("cron" . crontab-mode))
    (add-to-list 'auto-mode-alist '("crontab" . crontab-mode))

    (add-to-list 'auto-mode-alist '("COMMIT" . git-commit-mode))

    (add-to-list 'auto-mode-alist '("nginx" . nginx-mode))

    (add-to-list 'auto-mode-alist '("diff" . diff-mode))
  #+END_SRC
* try
** kenobi
   #+BEGIN_SRC emacs-lisp :tangle no
     ;; https://gist.github.com/nyergler/6100112

     (add-hook 'hack-local-variables-hook 'run-local-vars-mode-hook)
     (defun run-local-vars-mode-hook ()
       "Run a hook for the major-mode after the local variables have been processed."
       (run-hooks (intern (concat (symbol-name major-mode) "-local-vars-hook"))))


     (defun detect_buffer_venv (buffer-name)
       (let ((buffer-dir (file-name-directory buffer-name)))
         (while (and (not (file-exists-p
                           (concat buffer-dir "py27/bin/activate")))
                     buffer-dir)
           (setq buffer-dir
                 (if (equal buffer-dir "/")
                     nil
                   (file-name-directory (directory-file-name buffer-dir)))))
         ;; return the buffer-dir (or nil)
         (concat buffer-dir "py27")))

     (defun detect_buffer_eggs_dirs (buffer-name)
       (let ((buffer-dir (file-name-directory buffer-name)))
         (while (and (not (file-exists-p
                           (concat buffer-dir "eggs")))
                     buffer-dir
                     )
           (setq buffer-dir
                 (if (equal buffer-dir "/")
                     nil
                   (file-name-directory (directory-file-name buffer-dir)))))
         (if buffer-dir
             (directory-files (concat buffer-dir "eggs") t ".\.egg")
           nil)))

     (setq additional_paths nil)

     (defun setup-jedi-extra-args ()
       (let ((venv (detect_buffer_venv buffer-file-name))
             (egg-dirs (detect_buffer_eggs_dirs buffer-file-name)))
         (make-local-variable 'jedi:server-args)
         (when venv (set 'jedi:server-args (list "--virtual-env" venv)))
         (when egg-dirs
           (dolist (egg egg-dirs)
             (set 'jedi:server-args (append jedi:server-args (list "--sys-path" egg))))))
       (make-local-variable 'additional_paths)
       (when additional_paths
         (dolist (path additional_paths)
           (set 'jedi:server-args (append jedi:server-args (list "--sys-path" path))))))

     (setq jedi:setup-keys t)

     (add-hook 'python-mode-local-vars-hook 'setup-jedi-extra-args)
     (add-hook 'python-mode-local-vars-hook 'jedi:setup)
   #+END_SRC
** the rest
   #+BEGIN_SRC emacs-lisp
     (define-namespace custom/

     ;;TODO: maybe make org-protocol solution instead
     (defun youtube-dl ()
       (interactive)
       (let* ((str (current-kill 0))
              (default-directory "~/Downloads")
              (proc (get-buffer-process (ansi-term "/bin/bash"))))
         (term-send-string
          proc
          (concat "cd ~/Downloads && youtube-dl " str "\n"))))

     )
   #+END_SRC
