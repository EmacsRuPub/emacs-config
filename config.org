#+TITLE: Wiedzmin's literate Emacs configuration
#+OPTIONS: toc:4 h:4

* bootstrapping
** basic utils
   It's good to have centralized working datasets storage,
   to prevent pollution of Emacs config directory.
   #+BEGIN_SRC emacs-lisp :tangle yes
     ;;TODO: consolidate related extensions setup here
     (use-package no-littering
       :ensure t
       :custom
       (no-littering-var-directory (expand-file-name "data/" user-emacs-directory)))
   #+END_SRC
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package subr-x)

     (setq home-directory (getenv "HOME"))
     (setq config-basedir
           (file-name-directory
            (or (buffer-file-name) load-file-name)))

     (defun concat-normalize-slashes (prefix suffix)
       (concat "/"
               (string-join
                (split-string
                 (string-join (list prefix suffix) "/") "/" t) "/")))

     (defun at-homedir (&optional suffix)
       (concat-normalize-slashes home-directory suffix))

     (defun at-org-dir (&optional suffix)
       (concat-normalize-slashes (at-homedir "/docs/org")
                                 suffix))

     (defun at-org-kb-dir (&optional suffix)
       (concat-normalize-slashes (at-homedir "/docs/org-kb")
                                 suffix))

     (defun at-config-basedir (&optional suffix)
       (concat-normalize-slashes config-basedir suffix))

     (defun at-user-data-dir (&optional suffix)
       (concat-normalize-slashes no-littering-var-directory suffix))

     (cl-defmacro with-unmanaged-errors (&rest body)
       `(let ((debug-on-error-orig debug-on-error)
              (debug-on-quit-orig debug-on-quit))
          (setq debug-on-error nil)
          (setq debug-on-quit nil)
          ,@body
          (setq debug-on-error debug-on-error-orig)
          (setq debug-on-quit debug-on-quit-orig)))
   #+END_SRC
** essential packages and tweaks
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package auto-compile
       :ensure t
       :config
       (auto-compile-on-load-mode 1)
       (auto-compile-on-save-mode 1)
       :custom
       (auto-compile-display-buffer nil)
       (auto-compile-mode-line-counter t))

     (use-package f
       :ensure t
       :after (s dash))

     (use-package names :ensure t)
     (use-package anaphora :ensure t)
     (use-package noflet :ensure t)

     (use-package delight :ensure t)

     (use-package pcre2el
       :ensure t
       :config
       (pcre-mode))

     (use-package notifications)

     (setq custom-file (at-config-basedir "customizations.el"))
     (setq diredp-hide-details-initially-flag nil) ;; otherwise we'll have very clipped dired info
     (fset 'yes-or-no-p 'y-or-n-p)
   #+END_SRC
** input methods
   Set default input method
   #+BEGIN_SRC emacs-lisp :tangle yes
     (setq default-input-method 'russian-computer)
   #+END_SRC
   Reverse input method makes Emacs with non-English system keyboard layout
   to behave correctly with keybindings. It definitely makes sense while
   using Emacs in such X WMs when there is no chance to hook into keyboard
   layouts switching (those are probably all, except StumpWM/XMonad, AFAIK)
   #+BEGIN_SRC emacs-lisp :tangle (if (not (member (getenv "CURRENT_WM") '("stumpwm" "xmonad"))) "yes" "no")
     (use-package reverse-im
       :ensure t
       :config
       (reverse-im-activate "russian-computer"))
   #+END_SRC
** Encryption and security
*** packages
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package epa
        :after (epg)
        :config
        (epa-file-enable)
        :custom
        (epa-pinentry-mode 'loopback))

      (use-package epg-config
        :custom
        (epg-gpg-program "gpg2")
        (epg-gpg-home-directory "~/.gnupg"))

      (use-package password-cache
        :custom
        (password-cache-expiry nil)
        (password-cache t))

      (use-package keychain-environment
        :ensure t
        :config
        (keychain-refresh-environment))
    #+END_SRC
*** load encrypted credentials
    #+BEGIN_SRC emacs-lisp :tangle yes
      (load (at-config-basedir "credentials.el.gpg"))
    #+END_SRC
** GC tweaks
   #+BEGIN_SRC emacs-lisp :tangle yes
     (setq gc-cons-percentage 0.3)

     (setq gc-cons-threshold 64000000)
     (add-hook 'after-init-hook #'(lambda ()
                                    (setq gc-cons-threshold 800000)))

     (add-hook 'minibuffer-setup-hook (lambda () (setq gc-cons-threshold most-positive-fixnum)))
     (add-hook 'minibuffer-exit-hook (lambda () (setq gc-cons-threshold 800000)))
   #+END_SRC
* appearance
** fonts
   #+BEGIN_SRC emacs-lisp :tangle yes
     (setq font-lock-maximum-decoration t)
     (setq scalable-fonts-allowed t)

     (use-package unicode-fonts
       :ensure t
       :after (persistent-soft)
       :disabled
       :config
       (unicode-fonts-setup))
   #+END_SRC
** setup smart modeline
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package spaceline :ensure t)

     (use-package spaceline-config
       :after (spaceline)
       :config
       (spaceline-emacs-theme))
   #+END_SRC
** load themes and choose one
   Also some other good-looking theme is "material-theme"
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package nimbus-theme :ensure t :disabled)
     (use-package nord-theme :ensure t :disabled)
     (use-package kaolin-themes :ensure t :disabled)
     (use-package material-theme :ensure t :disabled)
     (use-package challenger-deep-theme :ensure t :disabled)
     (use-package hc-zenburn-theme :ensure t :disabled)
     (use-package sunburn-theme :ensure t :disabled)
     (use-package labburn-theme :ensure t :disabled)
     (use-package darcula-theme :ensure t :disabled)
     (use-package cyberpunk-theme :ensure t :disabled)

     (use-package darkburn-theme
       :ensure t
       :config
       (load-theme 'darkburn t))

     ;; Providing dark enough colors, unless we are using an appropriate theme, Darkburn, for example
     (when (boundp 'zenburn-colors-alist)
       (set-face-attribute 'default nil :background "#1A1A1A")
       (set-face-attribute 'region nil :background (cdr (assoc "zenburn-bg-2" zenburn-colors-alist))))
   #+END_SRC
** frames
   #+BEGIN_SRC emacs-lisp :tangle yes
     (setq frame-title-format "emacs - %b %f")

     (setq inhibit-startup-echo-area-message "octocat")
     (setq inhibit-startup-message t)
     (setq inhibit-startup-screen t)
     (setq initial-scratch-message nil)

     (setq resize-mini-windows t)
     (setq max-mini-window-height 0.33)
     (setq use-dialog-box nil)
     (setq visible-bell t)
     (setq ring-bell-function 'ignore)
     (setq split-width-threshold nil)
     (setq enable-recursive-minibuffers t)
     (setq echo-keystrokes 0.1)
     (setq truncate-partial-width-windows nil)

     (blink-cursor-mode 0)
     (column-number-mode 1)
     (display-battery-mode 1)
     (global-font-lock-mode 1)
     (line-number-mode 1)
     (menu-bar-mode -1)
     (size-indication-mode 1)
     (tool-bar-mode 0)
     (tooltip-mode 0)
     (when (fboundp 'scroll-bar-mode)
       (scroll-bar-mode 0))
     (when (>= emacs-major-version 25)
       (horizontal-scroll-bar-mode -1))

     (use-package popwin :ensure t)
     (use-package vline :ensure t)

     (use-package volatile-highlights
       :ensure t
       :delight 'volatile-highlights-mode
       :config
       (volatile-highlights-mode 1))

     (use-package time
       :config
       (display-time)
       :custom
       (display-time-day-and-date t)
       ;; (display-time-form-list (list 'time 'load))
       (display-time-mail-file t)
       (display-time-string-forms '( day " " monthname " (" dayname ") " 24-hours ":" minutes)))
   #+END_SRC
** uniquify buffer names
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package uniquify
       :custom
       (uniquify-buffer-name-style 'post-forward)
       (uniquify-separator ":")
       (uniquify-ignore-buffers-re "^\\*")
       (uniquify-strip-common-suffix nil))
   #+END_SRC
* persistence
** save history
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package savehist
       :config
       (savehist-mode t)
       :custom
       (savehist-save-minibuffer-history t)
       (savehist-autosave-interval 60)
       (history-length t)
       (history-delete-duplicates t)
       (savehist-additional-variables
             '(kill-ring
               search-ring
               regexp-search-ring)))
   #+END_SRC
** maintain recent files
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package recentf
       :no-require t
       :config
       (use-package recentf-ext :ensure t)
       (add-to-list 'recentf-exclude no-littering-var-directory)
       (add-to-list 'recentf-exclude no-littering-etc-directory)
       (recentf-mode t)
       :custom
       (recentf-max-saved-items 250)
       (recentf-max-menu-items 15))
   #+END_SRC
** backups
   #+BEGIN_SRC emacs-lisp :tangle yes
     (setf auto-save-default nil)
     (when (> emacs-major-version 25)
       (auto-save-visited-mode 1))

     (setq backup-by-copying t)
     (setq backup-by-copying-when-linked t)
     (setq delete-old-versions -1)
     (setq version-control t)

     (use-package backup-walker
       :ensure t
       :commands backup-walker-start) ;TODO: bind to key and other stuff

     (setq delete-by-moving-to-trash t)
   #+END_SRC
** concurrency and caching
   Simultaneous edits still will be detected when saving is made. But disabling lock files prevents our working
   dirs from being clobbered with.
   #+BEGIN_SRC emacs-lisp :tangle yes
     (setf create-lockfiles nil)
   #+END_SRC
   If you're saving an elisp file, likely the .elc is no longer valid.
   #+BEGIN_SRC emacs-lisp :tangle yes
     (add-hook 'after-save-hook
               (lambda ()
               (if (and (equal major-mode 'emacs-lisp-mode)
                        (file-exists-p (concat buffer-file-name "c")))
                     (delete-file (concat buffer-file-name "c")))))
   #+END_SRC
* common
** emacs server
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package server
       :hook (server-visit-hook . (lambda () (local-set-key (kbd "C-c C-c") 'custom/server-save-edit)))
       :config
       (defun custom/server-save-edit ()
         (interactive)
         (save-buffer)
         (server-edit))
       (defun custom/save-buffer-clients-on-exit ()
         (interactive)
         (if (and (boundp 'server-buffer-clients) server-buffer-clients)
             (server-save-edit)
           (save-buffers-kill-emacs t)))
       (unless (and (string-equal "root" (getenv "USER"))
                    (server-running-p))
         (require 'server)
         (server-start))
       (advice-add 'save-buffers-kill-terminal :before 'custom/save-buffer-clients-on-exit))
   #+END_SRC
** some ubiquitous packages
*** hydra
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package hydra
        :ensure t
        :config
        (set-face-attribute 'hydra-face-blue nil :foreground "#00bfff"))
    #+END_SRC
*** ivy-based
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package ivy
        :ensure t
        :delight ivy-mode
        :bind (("C-x b" . ivy-switch-buffer)
               ("M-<f12>" . ivy-switch-buffer)
               ("<f10>" . ivy-resume)
               ("C-c v" . ivy-push-view)
               ("C-c V" . ivy-pop-view))
        :config
        (ivy-mode 1)
        :custom
        (ivy-display-style 'fancy)
        (ivy-use-virtual-buffers t) ;; add 'recentf-mode’and bookmarks to 'ivy-switch-buffer'.
        (ivy-height 20) ;; number of result lines to display
        (ivy-count-format "") ;; do not count candidates
        (ivy-initial-inputs-alist nil) ;; no regexp by default
        (ivy-re-builders-alist
         ;; allow input not in order
         '((t . ivy--regex-ignore-order))))

      (use-package amx
        :ensure t
        :bind ("M-x" . amx)
        :custom
        (amx-backend 'ivy)
        (amx-save-file (at-user-data-dir "amx-items")))

      (use-package counsel
        :ensure t
        :after (swiper)
        :bind (("C-x C-f" . counsel-find-file)
               ("C-h f" . counsel-describe-function)
               ("C-h v" . counsel-describe-variable)
               ("C-h l" . counsel-locate)
               ("C-h L" . counsel-find-library)
               ("C-x C-r" . counsel-recentf)
               ("C-x C-d" . counsel-descbinds)
               ("C-c C-." . counsel-fzf))
        :custom
        (counsel-grep-base-command "rg -i -M 120 --no-heading --line-number --color never '%s' %s"))

      (use-package ivy-hydra
        :ensure t
        :after (ivy))

      (use-package ivy-rich
        :ensure t
        :after (ivy)
        :config
        (ivy-set-display-transformer 'ivy-switch-buffer 'ivy-rich-switch-buffer-transformer))

      (use-package ivy-dired-history
        :ensure t
        :after (dired savehist)
        :config
        (add-to-list 'savehist-additional-variables 'ivy-dired-history-variable))

      (defun custom/open-encrypted-document ()
        (interactive)
        (ivy-read "Various documents: "
                  (funcall #'(lambda () (f-files (at-homedir "/docs/enc") nil t)))
                  :action #'(lambda (candidate)
                              (find-file candidate))
                  :require-match t
                  :caller 'custom/open-encrypted-document))

      (defun custom/open-org-file ()
        (interactive)
        (ivy-read "Org files: "
                  (funcall #'(lambda () (f-files (at-org-dir) nil t)))
                  :action #'(lambda (candidate)
                              (find-file candidate))
                  :require-match t
                  :caller 'custom/open-org-file))

      (defun custom/open-org-kb-file ()
        (interactive)
        (ivy-read "Org files: "
                  (funcall #'(lambda () (f-files (at-org-kb-dir) nil t)))
                  :action #'(lambda (candidate)
                              (find-file candidate))
                  :require-match t
                  :caller 'custom/open-org-kb-file))

      ;; CREDITS: https://github.com/nathankot/dotemacs
      (defvar counsel-flycheck-history nil
        "History for `counsel-flycheck'")

      (defun counsel-flycheck ()
        (interactive)
        (if (not (bound-and-true-p flycheck-mode))
            (message "Flycheck mode is not available or enabled")
          (ivy-read "Error: "
                    (let ((source-buffer (current-buffer)))
                      (with-current-buffer (or (get-buffer flycheck-error-list-buffer)
                                               (progn
                                                 (with-current-buffer
                                                     (get-buffer-create flycheck-error-list-buffer)
                                                   (flycheck-error-list-mode)
                                                   (current-buffer))))
                        (flycheck-error-list-set-source source-buffer)
                        (flycheck-error-list-reset-filter)
                        (revert-buffer t t t)
                        (split-string (buffer-string) "\n" t " *")))
                    :action (lambda (s &rest _)
                              (-when-let* ( (error (get-text-property 0 'tabulated-list-id s))
                                            (pos (flycheck-error-pos error)) )
                                (goto-char (flycheck-error-pos error))))
                    :history 'counsel-flycheck-history)))

      (defhydra hydra-custom-counsel (:idle 1.0)
        ("e" custom/open-encrypted-document "open encrypted document")
        ("o" custom/open-org-file "open Org file")
        ("k" custom/open-org-kb-file "open Org KB file")
        ("q" nil "cancel"))
      (global-set-key (kbd "C-c r") 'hydra-custom-counsel/body)
    #+END_SRC
*** other
    #+BEGIN_SRC emacs-lisp :tangle yes
      ;;TODO: automate insertion of tramp[+docker] links (yasnippet/whatever)
      (use-package tramp
        :config
        (add-to-list 'tramp-default-proxies-alist
                     '(".*" "\\`.+\\'" "/ssh:%h:"))
        :custom
        (tramp-default-method "ssh")
        (tramp-ssh-controlmaster-options ""))

      (use-package crux :ensure t)

      (use-package paradox
        :ensure t
        :after (seq let-alist spinner hydra)
        :commands paradox-list-packages
        :custom
        (paradox-execute-asynchronously t)
        (paradox-github-token private/paradox-github-token))
    #+END_SRC
** some keyboard related stuff
   #+BEGIN_SRC emacs-lisp :tangle yes
     (defun custom/keys-describe-prefixes ()
       (interactive)
       (with-output-to-temp-buffer "*Bindings*"
         (dolist (letter-group (list
                                (cl-loop for c from ?a to ?z
                                         collect (string c))
                                (cl-loop for c from ?α to ?ω
                                         collect (string c))))
           (dolist (prefix '("" "C-" "M-" "C-M-"))
             (princ (mapconcat
                     (lambda (letter)
                       (let ((key (concat prefix letter)))
                         (format ";; (global-set-key (kbd \"%s\") '%S)"
                                 key
                                 (key-binding (kbd key)))))
                     letter-group
                     "\n"))
             (princ "\n\n")))))

     (use-package speed-type
       :ensure t
       :commands speed-type-region speed-type-buffer speed-type-text)

     (use-package which-key
       :ensure t
       :config
       (which-key-setup-side-window-right)
       (which-key-mode))
   #+END_SRC
** tweaks
   Enable functions that are disabled by default
   #+BEGIN_SRC emacs-lisp :tangle yes
     (put 'dired-find-alternate-file 'disabled nil)
     (put 'downcase-region 'disabled nil)
     (put 'erase-buffer 'disabled nil)
     (put 'narrow-to-region 'disabled nil)
     (put 'scroll-left 'disabled nil)
     (put 'scroll-right 'disabled nil)
     (put 'set-goal-column 'disabled nil)
     (put 'upcase-region 'disabled nil)

     (setq disabled-command-function nil)
   #+END_SRC
   world time
   #+BEGIN_SRC emacs-lisp :tangle yes
     (setq display-time-world-list
           '(("Europe/Moscow" "Moscow")))
   #+END_SRC
   local variables processing
   #+BEGIN_SRC emacs-lisp :tangle yes
     (setq enable-local-variables nil)
   #+END_SRC
   warnings processing
   #+BEGIN_SRC emacs-lisp :tangle yes
     (setq warning-suppress-types nil)
   #+END_SRC
** mode lists for formatting reference
   #+BEGIN_SRC emacs-lisp :tangle yes
     ;; clean trailing whitespaces automatically
     (setq custom/trailing-whitespace-modes
           '(
             c++-mode
             c-mode
             haskell-mode
             emacs-lisp-mode
             lisp-mode
             python-mode
             js-mode
             js2-mode
             html-mode
             lua-mode
             yaml-mode
             ))
     ;; untabify some modes
     (setq custom/untabify-modes
           '(
             haskell-mode
             emacs-lisp-mode
             lisp-mode
             python-mode
             ))
     ;; sexp-based editing modes list
     (setq custom/sexp-editing-modes
           '(
             lisp-mode
             emacs-lisp-mode
             ))

     (defun common-hooks/trailing-whitespace-hook ()
       (when (member major-mode custom/trailing-whitespace-modes)
         (delete-trailing-whitespace)))

     (defun common-hooks/untabify-hook ()
       (when (member major-mode custom/untabify-modes)
         (untabify (point-min) (point-max))))

     (add-hook 'before-save-hook 'common-hooks/trailing-whitespace-hook)
     (add-hook 'before-save-hook 'common-hooks/untabify-hook)
   #+END_SRC
** encodings
   #+BEGIN_SRC emacs-lisp :tangle yes
     (setq locale-coding-system 'utf-8)

     (define-coding-system-alias 'UTF-8 'utf-8)
     (define-coding-system-alias 'utf-8-emacs 'utf-8) ; needed by bbdb...
     (define-coding-system-alias 'utf_8 'utf-8)

     (prefer-coding-system 'utf-8)

     (set-buffer-file-coding-system 'utf-8 'utf-8-unix)
     (set-default buffer-file-coding-system 'utf-8-unix)
     (set-default-coding-systems 'utf-8)
     (set-keyboard-coding-system 'utf-8)
     (set-selection-coding-system 'utf-8)
     (set-terminal-coding-system 'utf-8)
   #+END_SRC
** OS-specific stuff
   Besides the common part of the common setup (sic!) there is also
   a little part of customizations being specific to OS Emacs is
   running on. So here they are (conditionally loaded):
*** linux specific
    #+BEGIN_SRC emacs-lisp :tangle (if (eq system-type 'gnu/linux) "yes" "no")
      (setq x-alt-keysym 'meta)

      (setq browse-url-browser-function 'browse-url-generic)
      (setq browse-url-generic-program "xdg-open")
    #+END_SRC
*** darwin specific
    #+BEGIN_SRC emacs-lisp :tangle (if (eq system-type 'darwin) "yes" "no")
      ;; key bindings
      (cua-mode t)
      (setq mac-option-key-is-meta t)
      (setq mac-command-key-is-meta nil)
      (setq process-connection-type nil)
      (setq mac-command-modifier 'hyper)    ;meta|super
      (setq mac-pass-command-to-system nil)   ;;avoid hiding with M-h
      (global-set-key [(hyper x)] 'cua-cut-region)
      (global-set-key [(hyper c)] 'cua-copy-region)
      (global-set-key [(hyper v)] 'cua-paste)
      (global-set-key [kp-delete] 'delete-char) ;; sets fn-delete to be right-delete
      (setq mac-control-modifier 'control)

      ;; Ignore .DS_Store files with ido mode
      (add-to-list 'ido-ignore-files "\\.DS_Store")

      (setq locate-command "mdfind")

      (prefer-coding-system 'utf-8-unix)
      (set-default-coding-systems 'utf-8-unix)
      (if (< emacs-major-version 23)
          (set-keyboard-coding-system 'utf-8))
      (set-clipboard-coding-system 'utf-8)
      (set-terminal-coding-system 'utf-8)
    #+END_SRC
** debug snippets
*** show last command in minibuffer
     #+BEGIN_SRC emacs-lisp :tangle yes
       (defun custom/print-last-command ()
         (message "last command was: %s" last-command))

       (defvar last-command-debug-p nil)

       (let ((last-command-debug-p nil))
         (global-set-key (kbd "C-c C-g")
                         (lambda ()
                           (interactive)
                           (if last-command-debug-p
                               (progn
                                 (add-hook 'post-command-hook 'custom/print-last-command)
                                 (setq last-command-debug-p nil))
                             (progn
                               (remove-hook 'post-command-hook 'custom/print-last-command)
                               (setq last-command-debug-p t))))))

     #+END_SRC
* navigate
** URLs, links and TAPs
   #+BEGIN_SRC emacs-lisp :tangle yes
     (define-namespace custom/

     ;;TODO: make implemetation less straightforward or find "right way" to do it
     (defun process-thing-at-point ()
       (interactive)
       (cond
        ((equal major-mode 'ag-mode) (compile-goto-error))
        ((or (equal major-mode 'org-agenda-mode)
             (equal major-mode 'org-mode)) (org-return))
        ((or (equal major-mode 'jabber-chat-mode)
             (equal major-mode 'erc-mode)) (browse-url (thing-at-point 'url t)))
        (t (browse-url (thing-at-point 'url t)))))

     ;;TODO: find a common way for all url-browsing functionality in config
     ;;to handle special cases like spaces in urls, etc.
     (defun open-urls-in-region (beg end)
       "Open URLs between BEG and END."
       (interactive "r")
       (save-excursion
         (save-restriction
           (let ((urls))
             (narrow-to-region beg end)
             (goto-char (point-min))
             (while (re-search-forward org-plain-link-re nil t)
               (push (thing-at-point 'url) urls))
             (dolist (url (reverse urls))
               (browse-url url))))))

     (defun find-url-backward ()
       (interactive)
       (re-search-backward org-plain-link-re nil t)
       (forward-word))

     (defun find-url-forward ()
       (interactive)
       (re-search-forward org-plain-link-re nil t)
       (re-search-backward org-plain-link-re nil t)
       (forward-word))

     )

     (use-package link-hint :ensure t)
   #+END_SRC
** cursor positioning
   #+BEGIN_SRC emacs-lisp :tangle yes
     (define-namespace custom/

     ;;Make cursor stay in the same column when scrolling using pgup/dn.
     ;;Previously pgup/dn clobbers column position, moving it to the
     ;;beginning of the line.
     ;;<http://www.dotemacs.de/dotfiles/ElijahDaniel.emacs.html>
     (defadvice scroll-up (around ewd-scroll-up first act)
       "Keep cursor in the same column."
       (let ((col (current-column)))
         ad-do-it
         (move-to-column col)))
     (defadvice scroll-down (around ewd-scroll-down first act)
       "Keep cursor in the same column."
       (let ((col (current-column)))
         ad-do-it
         (move-to-column col)))

     )

     (setq scroll-preserve-screen-position 'always)

     (use-package saveplace
       :disabled
       :config
       (save-place-mode 1))
   #+END_SRC
** frames spawning
    #+BEGIN_SRC emacs-lisp :tangle yes
      (defun custom/update-frames (heads-count)
        (let* ((frames-count (length (frame-list)))
               (diff-count (- heads-count frames-count))
               (diff-count-abs (abs diff-count)))
          (cond
           ((plusp diff-count)
            (dotimes (i diff-count-abs)
              (make-frame-command)))
           ((minusp diff-count)
            (let ((frame (selected-frame)))
              (dolist (fr (frame-list))
                (unless (eq fr frame) (condition-case nil (delete-frame fr) (error nil))))))
           (t t))))
    #+END_SRC
** unset keybindings
    #+BEGIN_SRC emacs-lisp :tangle yes
      (global-unset-key (kbd "C-s"))
      (global-unset-key (kbd "C-r"))
      (global-unset-key (kbd "C-M-s"))
      (global-unset-key (kbd "C-M-r"))
      (global-unset-key (kbd "C-x C-b"))
    #+END_SRC
** special modes navigation
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package beginend
       :ensure t
       :delight beginend-global-mode beginend-prog-mode beginend-magit-status-mode
       :config
       (beginend-global-mode))
   #+END_SRC
** projects
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package projectile
       :ensure t
       :delight (projectile-mode " prj")
       :bind ("C-x j j" . projectile-switch-project)
       :demand t
       :custom
       (projectile-enable-caching t)
       (projectile-require-project-root nil)
       (projectile-completion-system 'ivy)
       (projectile-tags-command "find %s -type f -print | egrep -v \"/[.][a-zA-Z]\" | etags -")
       :config
       (def-projectile-commander-method ?d
         "Open project root in dired."
         (projectile-dired))
       (def-projectile-commander-method ?g
         "Search in project."
         (counsel-rg))
       (add-to-list 'projectile-other-file-alist '("html" "js"))
       (add-to-list 'projectile-other-file-alist '("js" "html"))
       (projectile-global-mode 1))

     (use-package counsel-projectile
       :ensure t
       :after (swiper projectile)
       :config
       (setq projectile-switch-project-action 'counsel-projectile-switch-project))

   #+END_SRC
** dired
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package dired
       :commands dired
       :hook (dired-mode-hook . auto-revert-mode)
       :bind (:map dired-mode-map
              ("C-c C-m" . custom/get-file-md5)
              ("e" . (lambda ()
                       (interactive)
                       (when (derived-mode-p 'dired-mode)
                         (eww-open-file (dired-get-file-for-visit)))))
              ("C-x C-k" . dired-do-delete))
       :custom
       (dired-recursive-deletes 'top) ;; Allows recursive deletes
       (dired-dwim-target t)
       (dired-listing-switches "-lah1v --group-directories-first")
       :config
       (use-package dired-filetype-face :ensure t)
       (use-package dired+
         :ensure t
         :custom
         (diredp-ignored-file-name 'green-face)
         (diredp-other-priv 'white-face)
         (diredp-rare-priv 'white-red-face)
         (diredp-compressed-file-suffix 'darkyellow-face))
       (use-package wdired
         :bind (:map dired-mode-map
                ("r" . wdired-change-to-wdired-mode))
         :custom
         (wdired-allow-to-change-permissions 'advanced))
       (use-package dired-narrow
         :ensure t
         :bind (:map dired-mode-map
                ("/" . dired-narrow)))
       (use-package dired-quick-sort
         :ensure t
         :config
         (dired-quick-sort-setup))
       (use-package diredfl
         :ensure t
         :config
         (diredfl-global-mode))
       (use-package dired-x))

     ;; Reload dired after making changes
     (--each '(dired-do-rename
               dired-create-directory
               wdired-abort-changes)
       (eval `(defadvice ,it (after revert-buffer activate)
                (revert-buffer))))
   #+END_SRC
** search
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package occur-context-resize
       :ensure t
       :hook (occur-mode-hook . occur-context-resize-mode))

     (use-package phi-search
       :ensure t
       :commands phi-search phi-search-backward
       :hook (isearch-mode-hook . phi-search-from-isearch-mc/setup-keys)
       :config
       (use-package phi-search-mc
         :ensure t
         :config
         (phi-search-mc/setup-keys)))

     ;;TODO: try to make analog of counsel-ag(?) in terms of ivy-occur(?) activation (to process to wgrep afterwards)
     (use-package socyl
       :ensure t
       :commands socyl-search-regexp
       :custom
       (socyl-backend 'ripgrep))

     (use-package wgrep
       :ensure t
       :bind (:map grep-mode-map
              ("C-x C-q" . wgrep-change-to-wgrep-mode)
              ("C-c C-c" . wgrep-finish-edit)))

     (defadvice occur-mode-goto-occurrence (after close-occur activate)
       (delete-other-windows))

     (use-package imenu-anywhere
       :ensure t
       :disabled ;;TODO: rebind and reenable
       :commands ivy-imenu-anywhere
       :bind ("C->" . ivy-imenu-anywhere))
   #+END_SRC
** operations with windows/frames
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package windmove
       :bind
       (("C-s-<up>" . windmove-up)
        ("C-s-<down>" . windmove-down)
        ("C-s-<left>" . windmove-left)
        ("C-s-<right>" . windmove-right)))

     (use-package winner
       :config
       (winner-mode 1))

     (use-package golden-ratio
       :ensure t
       :delight golden-ratio-mode
       :init
       (golden-ratio-mode 1))

     (use-package framemove
       :ensure t
       :custom
       (framemove-hook-into-windmove t))

     (use-package windsize
       :ensure t
       :disabled ; have no sense with golden-ratio enabled
       :bind
       (("C-s-k" . windsize-up)
        ("C-s-j" . windsize-down)
        ("C-s-h" . windsize-left)
        ("C-s-l" . windsize-right)))

     (use-package ace-window
       :ensure t
       :after (avy)
       :commands ace-window
       :init
       (setq aw-background nil)
       (setq aw-leading-char-style 'char)
       :config
       (set-face-attribute 'aw-mode-line-face nil :foreground "white")
       :custom-face (aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))

     (use-package tile
       :ensure t
       :commands tile)

     (use-package transpose-frame
       :ensure t
       :commands transpose-frame)
   #+END_SRC
** scope
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package ibuffer
       :commands ibuffer
       :bind (:map ibuffer-mode-map
              ("/ ." . (lambda (qualifier)
                         (interactive "sFilter by extname: ")
                         (ibuffer-filter-by-filename (concat "\\." qualifier "$"))))
              ("M-o" . other-window)) ; was ibuffer-visit-buffer-1-window
       :hook (ibuffer-mode-hook . (lambda ()
                                    ;; Make sure we're always using our buffer groups
                                    (ibuffer-switch-to-saved-filter-groups "default")))
       :custom
       (ibuffer-default-sorting-mode 'major-mode) ;recency
       (ibuffer-always-show-last-buffer :nomini)
       (ibuffer-default-shrink-to-minimum-size t)
       (ibuffer-jump-offer-only-visible-buffers t)
       (ibuffer-saved-filters
        '(("dired" ((mode . dired-mode)))
          ("foss" ((filename . "foss")))
          ("pets" ((filename . "pets")))
          ("jabberchat" ((mode . jabber-chat-mode)))
          ("orgmode" ((mode . org-mode)))
          ("elisp" ((mode . emacs-lisp-mode)))
          ("fundamental" ((mode . fundamental-mode)))
          ("haskell" ((mode . haskell-mode)))))
       (ibuffer-saved-filter-groups custom/ibuffer-saved-filter-groups))

     (use-package ibuffer-vc
       :ensure t
       :hook (ibuffer-hook . (lambda ()
                               (ibuffer-vc-set-filter-groups-by-vc-root)
                               (unless (eq ibuffer-sorting-mode 'alphabetic)
                                 (ibuffer-do-sort-by-alphabetic)))))

     (use-package recursive-narrow :ensure t)
   #+END_SRC
** warping
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package swiper
       :ensure t
       :commands swiper swiper-multi swiper-occur
       :bind ("C-s" . swiper)
       :custom
       (swiper-include-line-number-in-search t)
       :custom-face (swiper-match-face-1 ((t (:background "#dddddd"))))
       :custom-face (swiper-match-face-2 ((t (:background "#bbbbbb" :weight bold))))
       :custom-face (swiper-match-face-3 ((t (:background "#bbbbff" :weight bold))))
       :custom-face (swiper-match-face-4 ((t (:background "#ffbbff" :weight bold)))))

     (use-package avy
       :ensure t
       :custom
       (avy-timeout-seconds 0.5)
       :custom-face (avy-goto-char-timer-face ((nil (:foreground "green" :weight bold)))))

     (use-package filecache)
   #+END_SRC
** hydras and keybindings
   #+BEGIN_SRC emacs-lisp :tangle yes
     ;;TODO: plan docstring
     (defhydra hydra-window (:idle 1.0)
       "window"
       ("<left>" windmove-left "left" :color blue)
       ("<down>" windmove-down "down" :color blue)
       ("<up>" windmove-up "up" :color blue)
       ("<right>" windmove-right "right" :color blue)
       ("w" ace-window "ace" :color blue)
       ("=" text-scale-increase)
       ("-" text-scale-decrease)
       ("t" tile :color blue)
       ("T" transpose-frame "transpose")
       ("i" flip-frame "flip")
       ("o" flop-frame "flop")
       ("r" rotate-frame "rotate")
       ("n" make-frame-command "create frame" :color blue)
       ("k" delete-frame "delete frame" :color blue)
       ("s" delete-other-frames "delete other frames" :color blue)
       ("q" nil "cancel"))
     (global-set-key (kbd "<f2>") 'hydra-window/body)

     (defhydra hydra-errors ()
       ("c" counsel-flycheck :color blue)
       ("<up>" flycheck-previous-error "previous error")
       ("<down>" flycheck-next-error "next error")
       ("<left>" previous-error "previous error")
       ("<right>" next-error "next error")
       ("q" nil "cancel"))
     (global-set-key (kbd "C-q") 'hydra-errors/body)

     (defhydra hydra-history ()
       ("y" counsel-yank-pop)
       ("m" counsel-mark-ring)
       ("c" counsel-command-history)
       ("e" counsel-expression-history)
       ("p" counsel-package)
       ("b" backup-walker-start)
       ("q" nil "cancel"))
     (global-set-key (kbd "<f9>") 'hydra-history/body)

     (defhydra hydra-projects (:color teal :idle 1.0)
       "
       PROJECT: %(projectile-project-root)
       Project               More                              Search
       --------------------------------------------------------------------------------
       _i_nvalidate cache    _c_ommander                       _r_egexp
       _I_buffer             _d_ired                           a_g_
       _k_ill buffers        recent_f_                         _m_ulti-swoop
                             _s_witch project
                             _h_elm-projectile
       "
       ("I" ibuffer)
       ("i" projectile-invalidate-cache)
       ("k" projectile-kill-buffers)
       ("c" projectile-commander)
       ("d" projectile-dired)
       ("f" projectile-recentf)
       ("s" projectile-switch-project)
       ("h" projectile-find-file)
       ("r" socyl-search-regexp)
       ("g" counsel-rg)
       ("G" (lambda () (interactive)
              (counsel-rg (thing-at-point 'symbol) (projectile-project-root))))
       ("l" counsel-git-log)
       ("m" swiper-multi))
     (global-set-key (kbd "<f8>") 'hydra-projects/body)

     (defhydra hydra-navigate ()
       "
       Locate                  Narrow/widen               Links
       -----------------------------------------------------------------------
       _i_ search TAP          _r_egion                   _f_ hint & open
       _o_ search query        _d_efun                    _y_ hint & copy
       <prior> URL backward    defun + _C_omments         select w_3_m buffer
       <next>  URL forward     _w_iden                    open _u_rls in region
       _>_ reposition buffer   recursive _N_arrow DWIM
       counsel-_I_menu         recursive wi_D_en DWIM

       _<return>_ Execute TAP
       "
       ("i" (lambda () (interactive) (swiper (thing-at-point 'symbol))) :color blue)
       ("o" (lambda () (interactive) (swiper "")) :color blue)
       ("<prior>" custom/find-url-backward "previous url")
       ("<next>" custom/find-url-forward "next url")
       (">" reposition-window :color blue)
       ("r" narrow-to-region :color blue)
       ("d" narrow-to-defun :color blue)
       ("C" narrow-to-defun+comments-above :color blue)
       ("w" widen :color blue)
       ("N" recursive-narrow-or-widen-dwim)
       ("D" recursive-widen-dwim)
       ("f" link-hint-open-link :color blue)
       ("y" link-hint-copy-link :color blue)
       ("3" w3m-select-buffer :color blue)
       ("u" custom/open-urls-in-region :color blue)
       ("I" counsel-imenu :color blue)
       ("<return>" custom/process-thing-at-point "execute ;)" :color blue))
     (global-set-key (kbd "<f3>") 'hydra-navigate/body)

     (global-set-key (kbd "C-x k") 'kill-buffer)
   #+END_SRC
* editing
** custom utils
   #+BEGIN_SRC emacs-lisp :tangle yes
     (define-namespace custom/

     ;; TODO implement variant with path for some VCS-controlled tree
     (defun copy-file-name-to-clipboard ()
       "Copy the current buffer file name to the clipboard."
       (interactive)
       (let ((filename (if (equal major-mode 'dired-mode)
                           default-directory
                         (buffer-file-name))))
         (when filename
           (kill-new filename)
           (message "Copied buffer file name '%s' to the clipboard." filename))))

     (defun get-file-md5 ()
       (interactive)
       (when (derived-mode-p 'dired-mode)
         (let ((abs-file-name (dired-get-filename)))
           (unless (file-directory-p abs-file-name)
             (with-temp-buffer
               (let ((prefix-arg t))
                 (shell-command (format "md5sum %s" abs-file-name))
                 (buffer-string)))))))

     (defun insert-current-date-time()
       "Insert the current date and time at point."
       (interactive "*")
       (insert (format-time-string "[%d.%m.%Y - %H:%M]" (current-time))))

     ;; see http://endlessparentheses.com/fill-and-unfill-paragraphs-with-a-single-key.html
     (defun fill-or-unfill ()
       "Like `fill-paragraph', but unfill if used twice."
       (interactive)
       (let ((fill-column
              (if (eq last-command custom/fill-or-unfill)
                  (progn (setq this-command nil)
                         (point-max))
                fill-column)))
         (call-interactively #'fill-paragraph)))

     )

     (use-package persistent-scratch
       :ensure t
       :mode ("^*scratch*$" . lisp-interaction-mode)
       :hook ((after-init-hook . persistent-scratch-restore)
              (kill-emacs-hook . persistent-scratch-save)))
   #+END_SRC
** common hooks
   #+BEGIN_SRC emacs-lisp :tangle yes
     (add-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p)
     (add-hook 'text-mode-hook 'turn-on-auto-fill)
     (add-hook 'text-mode-hook 'text-mode-hook-identify)

     (defun common-hooks/newline-hook ()
       (local-set-key (kbd "C-m") 'newline-and-indent)
       (local-set-key (kbd "<return>") 'newline-and-indent))
   #+END_SRC
** case folding
   #+BEGIN_SRC emacs-lisp :tangle no
     (defvar custom/transform-whole-words nil)

     (defun ensure-region-active (oldfun &rest args)
       (when (region-active-p)
         (apply oldfun args)))

     (defun maybe-backward-word (oldfun &rest args)
       (when (and (not (looking-back "\\b")) custom/transform-whole-words)
         (backward-word)))

     (advice-add 'upcase-region :around 'ensure-region-active)
     (advice-add 'downcase-region :around 'ensure-region-active)
     (advice-add 'capitalize-region :around 'ensure-region-active)

     (advice-add 'upcase-region :before 'maybe-backward-word)
     (advice-add 'downcase-region :before 'maybe-backward-word)
     (advice-add 'capitalize-region :before 'maybe-backward-word)
   #+END_SRC
** move and bend text around
*** definitions
    This override for transpose-words fixes what I consider to be a flaw with the default implementation in simple.el. To transpose chars or lines, you always put the point on the second char or line
    to transpose with the previous char or line. The default transpose-words implementation does the opposite by flipping the current word with the next word instead of the previous word. The new
    implementation below instead makes transpose-words more consistent with how transpose-chars and trasponse-lines behave.
    #+BEGIN_SRC emacs-lisp :tangle yes
      (defun custom/transpose-words (arg)
        "[Override for default transpose-words in simple.el]
        Interchange words around point, leaving point at end of
        them. With prefix arg ARG, effect is to take word before or
        around point and drag it backward past ARG other words (forward
        if ARG negative). If ARG is zero, the words around or after
        point and around or after mark are interchanged."
        (interactive "*p")
        (if (eolp) (forward-char -1))
        (transpose-subr 'backward-word arg)
        (forward-word (+ arg 1)))
    #+END_SRC
*** setup
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package anchored-transpose
        :ensure t
        :commands anchored-transpose)

      (use-package snakehump
        :quelpa
        (snakehump :repo "aes/snakehump" :fetcher github :version original)
        :commands snakehump-next-at-point snakehump-prev-at-point)

      (use-package adaptive-wrap :ensure t)

      (use-package hungry-delete
        :ensure t
        :commands hungry-delete-forward hungry-delete-backward)

      (use-package replace+ :ensure t)

      (use-package multiple-cursors
        :ensure t
        :after (region-bindings-mode)
        :bind (:map region-bindings-mode-map
               ("C->" . mc/mark-next-like-this)
               ("C-<" . mc/mark-previous-like-this)
               ("C-c C-o" . mc/mark-all-like-this)
               ("C-{" . mc/edit-beginnings-of-lines)
               ("C-}" . mc/edit-ends-of-lines)
               ("M-+" . mc/mark-more-like-this-extended)
               ("C-c a" . mc/mark-all-in-region)
               ("C-c d" . mc/mark-all-like-this-in-defun)
               ("C-c D" . mc/mark-all-like-this-dwim)
               ("`" . mc/sort-regions)
               ("C-+" . mc/insert-numbers))
        :config
        (use-package mc-extras
          :ensure t
          :after (multiple-cursors region-bindings-mode)
          :bind (:map region-bindings-mode-map  ; should we use this keymap or bind elsewhere?
                 ("M-." . mc/mark-next-sexps)
                 ("M-," . mc/mark-previous-sexps)
                 ("C-|" . mc/move-to-column)
                 ("C-." . mc/remove-current-cursor)))
        (use-package mc-cycle-cursors
          :bind (:map mc/keymap
                 ("C-n" . mc/cycle-forward)
                 ("C-p" . mc/cycle-backward))))
    #+END_SRC
** regions and rectangles
*** definitions
    #+BEGIN_SRC emacs-lisp :tangle yes
      (define-namespace custom/

      (defadvice whole-line-or-region-kill-region
          (before whole-line-or-region-kill-read-only-ok activate)
        (interactive "p")
        (unless kill-read-only-ok (barf-if-buffer-read-only)))

      (defun cite-region (arg)
        (clipboard-kill-ring-save (region-beginning) (region-end))
        (with-temp-buffer
          (let ((comment-start "> "))
            (yank)
            (comment-region (point-min) (point-max))
            (when (> arg 1)
              (beginning-of-buffer)
              (insert "\n"))
            (clipboard-kill-region (point-min) (point-max)))))

      (defun append-cited-region (arg)
        (interactive "P")
        (let ((numarg (prefix-numeric-value arg)))
          (custom/cite-region numarg)
          (when (> numarg 1)
            (end-of-buffer))
          (yank)))

      ;; Compliment to kill-rectangle (just like kill-ring-save compliments
      ;; kill-region)
      ;; http://www.emacsblog.org/2007/03/17/quick-tip-set-goal-column/#comment-183
      (defun kill-save-rectangle (start end &optional fill)
        "Save the rectangle as if killed, but don't kill it. See
        `kill-rectangle' for more information."
        (interactive "r\nP")
        (kill-rectangle start end fill)
        (goto-char start)
        (yank-rectangle))

      )
    #+END_SRC
*** setup
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package expand-region
        :ensure t
        :bind ("C-=" . er/expand-region))

      (use-package region-bindings-mode
        :ensure t
        :config
        (setq region-bindings-mode-disable-predicates '((lambda () buffer-read-only)))
        (region-bindings-mode-enable))

      (use-package rectangular-region-mode
        :bind ("H-SPC" . set-rectangular-region-anchor))

      (use-package whole-line-or-region ;; if no region is active, act on current line
        :ensure t
        :delight (whole-line-or-region-mode " WLR")
        :custom
        (whole-line-or-region-extensions-alist
         '((comment-dwim whole-line-or-region-comment-dwim-2 nil)
           (copy-region-as-kill whole-line-or-region-copy-region-as-kill nil)
           (kill-region whole-line-or-region-kill-region nil)
           (kill-ring-save whole-line-or-region-kill-ring-save nil)
           (yank whole-line-or-region-yank nil)))  
        :config
        (whole-line-or-region-mode 1))
    #+END_SRC
** commenting
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package newcomment
       :custom
       (comment-style 'indent))

     (use-package comment-dwim-2
       :ensure t
       :bind ("M-]" . comment-dwim-2))

     (use-package rebox2
       :ensure t
       :commands rebox-dwim rebox-cycle)
   #+END_SRC
** clipboard and killring
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package savekill :ensure t)

     (setq save-interprogram-paste-before-kill t)
   #+END_SRC
** undo/redo
   #+BEGIN_SRC emacs-lisp :tangle yes
     (setq undo-limit 1000000)

     (use-package undo-tree
       :ensure t
       :delight undo-tree-mode
       :commands undo-tree-undo undo-tree-redo
       :custom
       (undo-tree-visualizer-timestamps t)
       (undo-tree-visualizer-diff t)
       :config
       (global-undo-tree-mode t))
   #+END_SRC
   Should undo process things [nearly] char-by-char?
   #+BEGIN_SRC emacs-lisp :tangle no
     ;;; https://stackoverflow.com/a/41560712/2112489
     (advice-add 'undo-auto--last-boundary-amalgamating-number :override #'ignore)
   #+END_SRC
*** try
    #+BEGIN_SRC emacs-lisp :tangle no
      (defhydra hydra-undo-tree (:color yellow :hint nil )
        " _p_: undo _n_: redo _s_: save _l_: load "
        ("p" undo-tree-undo)
        ("n" undo-tree-redo)
        ("s" undo-tree-save-history)
        ("l" undo-tree-load-history)
        ("u" undo-tree-visualize "visualize" :color blue)
        ("q" nil "quit" :color blue))
      (global-set-key (kbd "M-,") 'hydra-undo-tree/undo-tree-undo) ;; or whatever
    #+END_SRC
** utils
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package table)
     (use-package epoch-view :disabled)

     (use-package yatemplate
       :ensure t
       :after (yasnippet)
       :init
       (auto-insert-mode)
       :custom
       (yatemplate-dir (at-config-basedir "resources/auto-insert"))
       :config
       (yatemplate-fill-alist))

     (use-package whitespace
       :custom
       (whitespace-style '(tabs trailing tab-mark face lines-tail)))

     (use-package page-break-lines
       :ensure t
       :disabled
       :config
       (turn-on-page-break-lines-mode))

     (use-package macro-math
       :ensure t
       :bind (("\C-x~" . macro-math-eval-and-round-region)
              ("\C-x=" . macro-math-eval-region)))

     ;;TODO: consolidate all whitespaces utils
     ;;TODO: think of activating ws-butler in some modes, just for hands-on testing
     (use-package ws-butler
       :ensure t
       :commands ws-buttler-mode)

     (use-package mwim
       :ensure t
       :bind (([remap move-beginning-of-line] . mwim-beginning-of-code-or-line)
              ([remap move-end-of-line] . mwim-end-of-code-or-line)))

     (use-package with-editor
       :hook ((shell-mode-hook term-mode-hook eshell-mode-hook) . with-editor-export-editor))

     (use-package archive-rpm :ensure t) ;;TODO: check if there is any additional setup needed
   #+END_SRC
** major modes
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package rst
       :mode ("\\.rst$" . rst-mode))

     (use-package vimrc-mode
       :ensure t
       :mode ((".vim\\(rc\\)?$" . vimrc-mode)
              ("*pentadactyl*" . vimrc-mode)))

     (use-package sh-script
       :mode (("bashrc$" . sh-mode)
              ("bash_profile$" . sh-mode)
              ("bash_aliases$" . sh-mode)
              ("bash_local$" . sh-mode)
              ("bash_completion$" . sh-mode)
              (".powenv$" . sh-mode)))

     (use-package nginx-mode
       :ensure t
       :mode ("nginx" . nginx-mode))

     (use-package fic-mode :ensure t)

     (use-package csv-mode
       :ensure t
       :mode ("\\.csv" . csv-mode))

     (use-package yaml-mode
       :ensure t
       :mode (("\\.yml\\'" . yaml-mode)
              ("\\.yaml\\'" . yaml-mode))
       :hook (yaml-mode-hook . common-hooks/newline-hook))
   #+END_SRC
*** docker
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package dockerfile-mode
        :ensure t
        :mode  ("\\Dockerfile" . dockerfile-mode))

      (use-package docker-compose-mode
        :ensure t
        :mode ("docker-compose" . docker-compose-mode))
    #+END_SRC
** sexps
   #+BEGIN_SRC emacs-lisp :tangle yes
     ;;TODO: maybe relocate
     (use-package highlight-sexp
       :quelpa
       (highlight-sexp :repo "daimrod/highlight-sexp" :fetcher github :version original)
       :delight highlight-sexp-mode
       :hook ((lisp-mode-hook emacs-lisp-mode-hook) . highlight-sexp-mode))

     (use-package smartparens
       :ensure t
       :after (dash)
       :demand t
       :hook (((prog-mode-hook yaml-mode-hook) . smartparens-mode)
              ((lisp-mode-hook emacs-lisp-mode-hook markdown-mode-hook) . smartparens-strict-mode))
       :bind (:map smartparens-mode-map
              ;;TODO: try to make more brief keybindings
              ("C-M-t" . sp-transpose-sexp)
              ("M-F" . nil)
              ("M-B" . nil)
              ("M-<backspace>" . nil)
              ("C-S-a" . sp-beginning-of-sexp)
              ("C-S-d" . sp-end-of-sexp)
              (")" . sp-up-sex)
              ("C-<left_bracket>" . sp-select-previous-thing)
              ("C-c / r n" . sp-narrow-to-sexp)
              ("C-c / t" . sp-prefix-tag-object)
              ("C-c / p" . sp-prefix-pair-object)
              ("C-c / y" . sp-prefix-symbol-object)
              ("C-c / c" . sp-convolute-sexp)
              ("C-c / a" . sp-absorb-sexp)
              ("C-c / w" . sp-rewrap-sexp)
              ("C-c / e" . sp-emit-sexp)
              ("C-c / p" . sp-add-to-previous-sexp)
              ("C-c / n" . sp-add-to-next-sexp)
              ("C-c / j" . sp-join-sexp)
              ("C-c / s" . sp-split-sexp))
       :config
       (use-package smartparens-config)
       (show-smartparens-global-mode t)
       (sp-use-smartparens-bindings))
   #+END_SRC
** indentation
   #+BEGIN_SRC emacs-lisp :tangle yes
     (setq indent-tabs-mode nil)
     (set-default 'indent-tabs-mode nil);; Never insert tabs, !!!DO NOT REMOVE!!!
     (setq-default tab-width 4)

     (defun custom/kill-back-to-indentation ()
       "Kill from point back to the first non-whitespace character on the line."
       (interactive)
       (let ((prev-pos (point)))
         (back-to-indentation)
         (kill-region (point) prev-pos)))

     (use-package dtrt-indent
       :ensure t
       :config
       (dtrt-indent-mode))

     (bind-key "C-M-<backspace>" 'custom/kill-back-to-indentation)
   #+END_SRC
** Using settings from .editorconfig
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package editorconfig
       :ensure t
       :delight (editorconfig-mode " EC")
       :hook ((prog-mode-hook text-mode-hook) . editorconfig-mode))
   #+END_SRC
** setup basic minor modes
   #+BEGIN_SRC emacs-lisp :tangle yes
     (auto-compression-mode t)
     (delete-selection-mode t)
     (electric-indent-mode -1)
     (transient-mark-mode 1)
     (put 'transient-mark-mode 'permanent-local t)

     (use-package paren
       :custom
       (show-paren-delay 0)
       :config
       (show-paren-mode t))

     (use-package autorevert
       :disabled
       :mode ("\\.log$" . auto-revert-mode)
       :custom
       (auto-revert-verbose nil)
       (global-auto-revert-non-file-buffers t)
       :config
       (global-auto-revert-mode 1))
   #+END_SRC
** set variables
   #+BEGIN_SRC emacs-lisp :tangle yes
     (setq kill-whole-line t)
     (setq kmacro-ring-max 16)
     (setq mark-even-if-inactive t)
     (setq next-line-add-newlines nil)
     (setq sentence-end-double-space nil)
     (setq tab-always-indent t)
     (setq user-full-name (capitalize private/real-name))
     (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
     ;; don't let the cursor go into minibuffer prompt
     (setq minibuffer-prompt-properties
           '(read-only t point-entered minibuffer-avoid-prompt face minibuffer-prompt))

     (setq-default fill-column 200)
     (setq-default indicate-empty-lines t)
     (setq-default truncate-lines t)

     (setq x-stretch-cursor t)
     (setq blink-matching-paren nil)
     (setq mouse-wheel-scroll-amount '(1 ((shift) . 1)))
     (setq mouse-wheel-progressive-speed nil)
     ;; (setq set-mark-command-repeat-pop t)

     (setq whitespace-style '(indentation::space
                              space-after-tab
                              space-before-tab
                              trailing
                              lines-tail
                              tab-mark
                              face
                              tabs))
   #+END_SRC
** hydras and keys
   #+BEGIN_SRC emacs-lisp :tangle yes
     (defhydra hydra-edit (:color blue :idle 1.0)
       "
       Editing                         Kill/yank                 Buffers
       -------------------------------------------------------------------------------------
       just _o_ne space between        _y_ank to register        _`_ redraw display
       _2_ duplicate + comment         _p_ut from register       create _S_cratch
       _/_ make comment box            _f_ilename -> clipboard   _d_iff buffer <-> file
       _SPC_ untabify                  _k_ yank rectangle        re_n_ame buffer+file
       _TAB_ tabify                    append next _K_ill        query/replace rege_x_p
       delete trailing _w_hitespaces   _a_ppend cited region
       _s_ort lines
       keep _u_nique lines
       _4_ snakehump TAP

       Custom:
       _i_nsert current date+time
       _t_ranslate TAP with Google
       _T_ranslate query with Google
       "
       ("o" just-one-space)
       ("2" crux-duplicate-and-comment-current-line-or-region)
       ("/" comment-box)
       ("SPC" untabify)
       ("TAB" tabify)
       ("w" delete-trailing-whitespace)
       ("s" sort-lines)
       ("u" delete-duplicate-lines)
       ("4" snakehump-next-at-point)
       ("r" rebox-dwim :color blue)
       ("c" rebox-cycle "cycle box styles")
       ("y" copy-to-register)
       ("p" insert-register)
       ("f" custom/copy-file-name-to-clipboard)
       ("k" custom/kill-save-rectangle)
       ("K" append-next-kill)
       ("a" custom/append-cited-region)
       ("`" redraw-display)
       ("S" scratch)
       ("d" diff-buffer-with-file)
       ("n" crux-rename-file-and-buffer)
       ("x" query-replace-regexp)
       ("i" custom/insert-current-date-time)
       ("t" google-translate-at-point)
       ("T" google-translate-query-translate)
       ("q" nil "cancel"))
     (global-set-key (kbd "C-z") 'hydra-edit/body)

     (defhydra hydra-toggle (:color blue)
       "
       TOGGLE: de_b_ug on error (%(format \"%S\" debug-on-error))
       _w_hitespace mode
       "
       ("b" toggle-debug-on-error "debug on error")
       ("w" whitespace-mode "whitespace mode")
       ("W" global-whitespace-mode "*global* whitespace mode")
       ("B" subword-mode)
       ("v" view-mode)
       ("h" highlight-sexp-mode "toggle highlight-sexp mode")
       ("q" toggle-debug-on-quit "toggle debug-on-quit mode")
       ("p" toggle-projectile-global-mode "toggle projectile-global-mode"))
     (global-set-key (kbd "<f11>") 'hydra-toggle/body)

     (global-unset-key (kbd "M-t")) ;; Transpose stuff with M-t // which used to be transpose-words

     (defhydra hydra-transpose ()
       "
       ___ undo last
       transpose _w_ords
       transpose _s_exps
       _a_nchored transpose
       "
       ("_" undo-tree-undo "undo last")
       ("w" custom/transpose-words "on words")
       ("s" transpose-sexps "on sexps")
       ("a" anchored-transpose "anchored")
       ("q" nil "cancel"))
     (global-set-key (kbd "M-t") 'hydra-transpose/body)

     (global-set-key [remap fill-paragraph] #'custom/fill-or-unfill)

     (global-set-key (kbd "M-g") 'goto-line) ;;TODO: bind goto-char
     (global-set-key (kbd "M-\"") 'eval-region)
     (global-set-key (kbd "C-x f") 'find-file) ; I never use set-fill-column and I hate hitting it by accident.
     (global-set-key (kbd "M-SPC") 'cycle-spacing) ;; TODO: maybe place into some hydra
   #+END_SRC
* completion
** snippets
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package yasnippet ;;TODO: make more declarative
       :ensure t
       :delight yas-minor-mode
       :config
       ;; snippets editing mode
       (--each '("yasnippet/snippets"
                 "\\.yasnippet$")
         (eval `(add-to-list 'auto-mode-alist '(,it . snippet-mode))))
       ;; hook for automatic reloading of changed snippets
       (defun custom/update-yasnippets-on-save ()
         (when (string-match "/resources/yasnippet" buffer-file-name)
           (yas-load-directory (at-config-basedir "resources/"))))
       ;; Inter-field navigation
       (defun custom/yas-goto-end-of-active-field ()
         (interactive)
         (let* ((snippet (car (yas--snippets-at-point)))
                (position (yas--field-end (yas--snippet-active-field snippet))))
           (if (= (point) position)
               (move-end-of-line)
             (goto-char position))))
       (defun custom/yas-goto-start-of-active-field ()
         (interactive)
         (let* ((snippet (car (yas--snippets-at-point)))
                (position (yas--field-start (yas--snippet-active-field snippet))))
           (if (= (point) position)
               (move-beginning-of-line)
             (goto-char position))))
       (defun custom/do-yas-expand ()
         (let ((yas/fallback-behavior 'return-nil))
           (yas/expand)))
       (defun custom/tab-indent-or-complete ()
         (interactive)
         (if (minibufferp)
             (minibuffer-complete)
           (if (or (not yas/minor-mode)
                   (null (custom/do-yas-expand)))
               (if (check-expansion)
                   (company-complete-common)
                 (indent-for-tab-command)))))
       (setq yas-snippet-dirs nil)
       (push yas-installed-snippets-dir yas-snippet-dirs)
       (push (at-config-basedir "resources/yasnippet/") yas-snippet-dirs)
       (push (at-config-basedir "resources/yasnippet-private/") yas-snippet-dirs)
       (setq yas-key-syntaxes '("w" "w_" "w_." "^ " "w_.()" yas-try-key-from-whitespace))
       (setq yas-expand-only-for-last-commands '(self-insert-command))
       (setq yas-prompt-functions
             '(yas-completing-prompt
               yas-x-prompt
               yas-no-prompt))
       ;; Wrap around region
       (setq yas-wrap-around-region t)
       (yas-global-mode 1)
       (add-hook 'hippie-expand-try-functions-list 'yas-hippie-try-expand)
       (add-hook 'after-save-hook 'custom/update-yasnippets-on-save)
       ;; FIXME: fix unsetting clauses and uncomment
       ;; unsetting Tab, removing ALL translations
       ;; (with-unmanaged-errors
       ;;  (unbind-key [(tab)] yas-minor-mode-map)
       ;;  (unbind-key [(tab)] yas-keymap)
       ;;  (unbind-key [(shift tab)] yas-keymap)
       ;;  (unbind-key [backtab] yas-keymap)
       ;;  (unbind-key (kbd "<tab>") yas-minor-mode-map)
       ;;  (unbind-key (kbd "TAB") yas-minor-mode-map)
       ;;  (unbind-key (kbd "TAB") yas-keymap))
       (bind-key (kbd "<return>") 'yas-exit-all-snippets yas-keymap)
       (bind-key (kbd "C-e") 'custom/yas-goto-end-of-active-field yas-keymap)
       (bind-key (kbd "C-a") 'custom/yas-goto-start-of-active-field yas-keymap)
       (bind-key (kbd "C-n") 'yas-next-field-or-maybe-expand yas-keymap)
       (bind-key (kbd "C-p") 'yas-prev-field yas-keymap))

     (use-package auto-yasnippet
       :ensure t
       :after (yasnippet))

     (defhydra hydra-yasnippet (:color teal)
       "
       _c_reate auto snippet
       _e_xpand auto snippet
       _p_ersist auto snippet
       _v_isit snippets file
       _i_nsert snippet
       "
       ("c" aya-create)
       ("e" aya-expand)
       ("p" aya-persist-snippet)
       ("v" yas-visit-snippet-file)
       ("i" yas-insert-snippet)
       ("q" nil))
     (global-set-key (kbd "<f5>") 'hydra-yasnippet/body)

     (use-package eacl
       :ensure t
       :disabled
       :config
       (defhydra hydra-eacl ()
         "
         complete _s_nippets
         complete _t_ag
         complete _l_ine
         complete state_m_ent
         "
         ("s" eacl-complete-snippet :color blue)
         ("t" eacl-complete-tag :color blue)
         ("l" eacl-complete-line :color blue)
         ("m" eacl-complete-statement :color blue)
         ("q" nil))
       (global-set-key (kbd "<C-tab>") 'hydra-eacl/body))
   #+END_SRC
**** BACKLOG try https://github.com/abrochard/org-sync-snippets
** company
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package company
        :ensure t
        :demand t
        :delight (company-mode " γ")
        :bind (:map company-active-map
               ("\C-n" . company-select-next)
               ("\C-p" . company-select-previous)
               ("\C-d" . company-show-doc-buffer)
               ("M-." . company-show-location))
        :custom
        (company-idle-delay t)
        (company-tooltip-align-annotations t)
        (company-show-numbers t)
        :config
        (use-package company-flx
          :ensure t
          :no-require t
          :after (company)
          :config
          (company-flx-mode +1))
        (use-package company-quickhelp
          :ensure t
          :no-require t
          :after (company)
          :bind (:map company-active-map
                 ("C-c h" . company-quickhelp-manual-begin))
          :config
          (company-quickhelp-mode 1))
        (use-package company-statistics
          :ensure t
          :after (company)
          :config
          (company-statistics-mode))
        (global-company-mode))
    #+END_SRC
*** specialized uses
**** ansible
     #+BEGIN_SRC emacs-lisp :tangle yes
       (use-package company-ansible
         :ensure t
         :after (company)
         :config
         (add-to-list 'company-backends 'company-ansible))
     #+END_SRC
*** try 3rdparty packages
**** https://github.com/nsf/gocode
**** https://github.com/sebastiw/distel-completion
**** https://github.com/iquiw/company-ghc
**** https://github.com/iquiw/company-cabal
**** https://github.com/iquiw/company-restclient
**** https://github.com/Valloric/ycmd + https://github.com/abingham/emacs-ycmd
** abbrevs
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package hippie-exp
       :bind ("C-S-<iso-lefttab>" . hippie-expand)
       :custom
       (setq hippie-expand-try-functions-list
             '(yas-hippie-try-expand
               try-expand-all-abbrevs
               try-complete-file-name-partially
               try-complete-file-name
               try-expand-dabbrev
               try-expand-dabbrev-from-kill
               try-expand-dabbrev-all-buffers
               try-expand-list
               try-expand-line
               try-complete-lisp-symbol-partially
               try-complete-lisp-symbol)))

     (use-package abbrev
       :delight (abbrev-mode " Abv")
       :config
       (setq-default abbrev-mode t))

     (setq save-abbrevs 'silently)

     (bind-key "\C-i" 'crux-ispell-word-then-abbrev ctl-x-map)
   #+END_SRC
* programming
** common
*** flycheck
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package flycheck
        :ensure t
        :after (dash pkg-info let-alist seq)
        :custom
        (flycheck-global-modes '(not emacs-lisp-mode))
        (flycheck-display-errors-delay 0.4)
        (flycheck-check-syntax-automatically '(mode-enabled save idle-change new-line))
        :custom-face (flycheck-warning ((t (:foreground "yellow" :background "red"))))
        :config
        (global-flycheck-mode)
        (add-to-list 'display-buffer-alist
                     `(,(rx bos "*Flycheck errors*" eos)
                       (display-buffer-reuse-window
                        display-buffer-in-side-window)
                       (side            . bottom)
                       (reusable-frames . visible)
                       (window-height   . 0.33))))

      (use-package flycheck-pos-tip
        :ensure t
        :after (flycheck)
        :config
        (flycheck-pos-tip-mode))
    #+END_SRC
**** BACKLOG review concrete checkers functionality and usage
*** virtualization
**** navigation
     #+BEGIN_SRC emacs-lisp :tangle yes
       (use-package counsel-tramp
         :ensure t
         :after (docker-tramp vagrant-tramp)
         :bind ("C-c s" . counsel-tramp))
     #+END_SRC
**** methods
     #+BEGIN_SRC emacs-lisp :tangle yes
       (use-package docker
         :ensure t
         :after (dash docker-tramp magit-popup s tablist json-mode)
         :delight docker-mode
         :custom
         (docker-containers-show-all t)
         :config
         ;;TODO: bind keys
         (docker-global-mode 1))

       (use-package docker-tramp :ensure t)

       (use-package vagrant-tramp :ensure t)
     #+END_SRC
*** eldoc
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package c-eldoc :ensure t)
      (use-package eldoc-eval :ensure t)

      (use-package eldoc
        :delight eldoc-mode
        :commands turn-on-eldoc-mode
        :hook (((emacs-lisp-mode-hook lisp-interaction-mode-hook ielm-mode-hook) . turn-on-eldoc-mode)
               ((c-mode-hook c++-mode-hook) . c-turn-on-eldoc-mode))
        :custom
        (eldoc-idle-delay 0))

      ;;TODO: maybe move to "webdev" section
      (use-package css-eldoc
        :ensure t
        :hook (css-mode-hook . turn-on-css-eldoc))
    #+END_SRC
*** common hooks
    #+BEGIN_SRC emacs-lisp :tangle yes
      ;; show FIXME/TODO/BUG keywords
      (defun common-hooks/prog-helpers ()
          ;; highlight additional keywords
          (font-lock-add-keywords nil '(("\\<\\(FIXME\\|FIX_ME\\|FIX ME\\):" 1 font-lock-warning-face t)))
          (font-lock-add-keywords nil '(("\\<\\(BUG\\|BUGS\\):" 1 font-lock-warning-face t)))
          (font-lock-add-keywords nil '(("\\<\\(TODO\\|TO DO\\NOTE\\|TBD\\):" 1 font-lock-warning-face t)))
          (font-lock-add-keywords nil '(("\\<\\(DONE\\|HACK\\):" 1 font-lock-doc-face t)))
          ;; highlight too long lines
          (font-lock-add-keywords nil '(("^[^\n]\\{120\\}\\(.*\\)$" 1 font-lock-warning-face t))))
    #+END_SRC
*** handy packages/modes
    #+BEGIN_SRC emacs-lisp :tangle yes
      ;;TODO: extend setup
      (use-package compile)
      (use-package gtags)

      (use-package regex-tool
        :ensure t
        :commands regex-tool)

      (use-package ini-mode
        :ensure t
        :mode ("\\.ini\\'" . ini-mode))

      (use-package multi-compile :ensure t)

      (use-package counsel-gtags
        :ensure t
        :after (counsel gtags)
        :delight (counsel-gtags-mode " CGT")
        :hook ((c-mode-hook . counsel-gtags-mode)
               (c++-mode-hook . counsel-gtags-mode))
        :bind (:map c-mode-map
               ("C-M-s" . counsel-gtags-find-symbol)
               ("C-c u" . counsel-gtags-update-tags)
               ("M-," . counsel-gtags-go-backward)
               ("M-." . counsel-gtags-dwim)
               ("M-r" . counsel-gtags-find-reference)
               :map c++-mode-map
               ("C-M-s" . counsel-gtags-find-symbol)
               ("C-c u" . counsel-gtags-update-tags)
               ("M-," . counsel-gtags-go-backward)
               ("M-." . counsel-gtags-dwim)
               ("M-r" . counsel-gtags-find-reference)
               :map counsel-gtags-mode-map
               ("C-M-s" . counsel-gtags-find-symbol)
               ("M-," . counsel-gtags-go-backward)
               ("M-." . counsel-gtags-dwim)
               ("M-r" . counsel-gtags-find-reference))
        :custom
        (counsel-gtags-path-style 'relative)
        (counsel-gtags-ignore-case t)
        (counsel-gtags-auto-update t)
        (counsel-gtags-suggested-key-mapping t)
        :config
        )
    #+END_SRC
*** related major modes
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package rpm-spec-mode
        :ensure t
        :mode ("\\.spec$" . rpm-spec-mode))

      (add-to-list 'auto-mode-alist '("\\.po$\\|\\.po\\." . po-mode))
      (add-to-list 'auto-mode-alist '("\\.gdb$" . gdb-script-mode))
      (add-to-list 'auto-mode-alist '("diff" . diff-mode))
      (add-to-list 'auto-mode-alist '("\\.scss$" . css-mode))
      (add-to-list 'auto-mode-alist '("[Mm]akefile" . makefile-mode))
    #+END_SRC
** vcs
*** git
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package magit
        :ensure t
        :after (async dash with-editor git-commit magit-popup)
        :commands magit-status magit-blame
        :bind (:map magit-status-mode-map
               ("E" . magit-rebase-interactive))
        :custom
        (magit-completing-read-function 'ivy-completing-read)
        (magit-blame-heading-format "%H %-20a %C %s")
        (magit-diff-refine-hunk t)
        (magit-display-buffer-function 'magit-display-buffer-fullframe-status-topleft-v1)
        (magit-repository-directories private/magit-repositories)
        :config
        (use-package magit-filenotify
          :ensure t
          :delight (magit-filenotify-mode " FN")
          :after magit
          :hook (magit-status-mode-hook . magit-filenotify-mode))
        (use-package vdiff-magit
          :ensure t
          :bind (:map magit-mode-map
                      ("d" . vdiff-magit-dwim)
                      ("p" . vdiff-magit-popup))
          :config
          (setcdr (assoc ?e (plist-get magit-dispatch-popup :actions))
                  '("vdiff dwim" 'vdiff-magit-dwim))
          (setcdr (assoc ?E (plist-get magit-dispatch-popup :actions))
                  '("vdiff popup" 'vdiff-magit-popup)))
        (defun open-global-repos-list ()
          (interactive)
          (let ((repos-buffer (get-buffer "*Magit Repositories*")))
            (if repos-buffer
                (switch-to-buffer repos-buffer)
              (magit-list-repositories))))
        (add-to-list 'auto-mode-alist '("COMMIT_EDITMSG" . conf-javaprop-mode))
        (add-to-list 'auto-mode-alist '("COMMIT" . git-commit-mode)))

      (use-package git-timemachine
        :ensure t
        :commands git-timemachine)

      (use-package gitignore-mode
        :ensure t
        :mode ("^.gitignore$" . gitignore-mode))

      ;; think of relocating, cause it supports not only Git
      (use-package diff-hl
        :ensure t
        :hook (magit-post-refresh-hook . diff-hl-magit-post-refresh)
        :config
        (global-diff-hl-mode 1))

      (use-package git-msg-prefix
        :ensure t
        :bind (:map git-commit-mode-map
               ("C-c i" . commit-msg-prefix))
        :custom
        (git-msg-prefix-log-flags " --since='1 week ago' ")
        (commit-msg-prefix-input-method 'ivy-read))
    #+END_SRC
**** BACKLOG [#A] find some way (maybe smth like spacemacs dashboard) to represent the states of repos from some list (either hardcoded or created dynamically), with unstaged/unpushed/whatever_useful info displayed
*** smerge mode
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package smerge-mode
        :hook (find-file-hooks . (lambda ()
                                   (save-excursion
                                     (goto-char (point-min))
                                     (when (re-search-forward "^<<<<<<< " nil t)
                                       (smerge-mode 1))))))
    #+END_SRC
**** BACKLOG try to make hydra, neat functions detected
*** hydra
    #+BEGIN_SRC emacs-lisp :tangle yes
      (defhydra hydra-vcs ()
        "
        PROJECT: %(projectile-project-root)

        Magit               Additional
        -----------------------------------------
        _s_: status         _k_ smerge / goto prev conflict
        _l_: log            _j_ smerge / goto next conflict
        _f_: file log       _l_ Show repositories _l_ist
        _r_: reflog
        _w_: diff worktree
        _t_: time machine
        _b_: blame
        _c_: checkout
        _B_: branch mgr
        "
        ("s" magit-status :color blue)
        ("f" magit-log-buffer-file :color blue)
        ("c" magit-checkout :color blue)
        ("w" magit-diff-working-tree :color blue)
        ("r" magit-reflog :color blue)
        ("b" magit-blame :color blue)
        ("B" magit-branch-manager :color blue)
        ("l" magit-log :color blue)
        ("t" git-timemachine :color blue)
        ("k" smerge-prev "previous conflict")
        ("j" smerge-next "next conflict")
        ("l" open-global-repos-list :color blue))
      (global-set-key (kbd "C-'") 'hydra-vcs/body)
    #+END_SRC
** languages
*** common
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package info-look)

      (use-package highlight-stages
        :ensure t
        :delight highlight-stages-mode
        :config
        (highlight-stages-global-mode))
    #+END_SRC
*** elisp
**** setup
     #+BEGIN_SRC emacs-lisp :tangle yes
       (setq print-circle t)
       (setq print-gensym t)
       (setq eval-expression-print-length nil)
       (setq eval-expression-print-level nil)

       (use-package edebug-x :ensure t)

       (use-package elisp-slime-nav
         :delight elisp-slime-nav-mode
         :ensure t
         :hook ((emacs-lisp-mode-hook ielm-mode-hook) . elisp-slime-nav-mode))

       (use-package elisp-mode
         :hook ((emacs-lisp-mode-hook . (lambda ()
                                          (auto-fill-mode 1)
                                          (setq indent-tabs-mode nil)
                                          (setq comment-start ";;")
                                          (turn-on-eldoc-mode)))
                (emacs-lisp-mode-hook . common-hooks/prog-helpers)
                (emacs-lisp-mode-hook . common-hooks/newline-hook)))

       (use-package company-elisp
         :after (elisp-mode company))

       (add-hook 'eval-expression-minibuffer-setup-hook #'eldoc-mode)
       (add-hook 'eval-expression-minibuffer-setup-hook #'eldoc-mode)

       (dolist (mode '(paredit-mode smartparens-mode))
         (when (fboundp mode)
           (add-hook 'eval-expression-minibuffer-setup-hook mode)))
     #+END_SRC
*** javascript
    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package js2-mode
        :ensure t
        :mode ("\\.js$" . js2-mode)
        :hook ((js2-post-parse-callbacks-hook . custom/parse-additional-externs)
               (js2-mode-hook . (lambda ()
                                  (setq flycheck-checker 'javascript-jshint)
                                  (tern-mode t))))
        :custom
        :config
        (use-package js2-imenu-extras :ensure t)
        (use-package xref-js2 :ensure t)
        (js2-imenu-extras-setup)
        (setq js2-use-font-lock-faces t)
        (setq js2-allow-keywords-as-property-names nil)
        (setq js2-bounce-indent-flag nil)
        (setq js2-cleanup-whitespace t)
        (setq js2-enter-indents-newline nil)
        (setq js2-highlight-level 3)
        (setq js2-indent-on-enter-key nil)
        (setq js2-skip-preprocessor-directives t)
        (setq js2-basic-offset 4)
        (setq js2-bounce-indent-p t)
        ;; Special improvements using the mooz fork
        ;; https://github.com/mooz/js2-mode
        (setq js2-consistent-level-indent-inner-bracket-p t)
        (setq js2-use-ast-for-indentation-p t)
        (add-to-list 'interpreter-mode-alist (cons "node" 'js2-mode))
        (setq-default js2-global-externs
                      '("module" "require" "jQuery" "$" "_" "buster"
                        "sinon" "assert" "refute" "setTimeout" "clearTimeout"
                        "setInterval" "clearInterval" "location" "__dirname" "console" "JSON"))
        (setq-default js2-idle-timer-delay 0.1)
        (setq-default js2-mirror-mode t)
        (setq-default js2-auto-indent-p t)
        (setq-default js2-concat-multiline-strings 'eol)
        ;; After js2 has parsed a js file, we look for jslint globals decl comment ("/* global Fred, _, Harry */") and
        ;; add any symbols to a buffer-local var of acceptable global vars
        ;; Note that we also support the "symbol: true" way of specifying names via a hack (remove any ":true"
        ;; to make it look like a plain decl, and any ':false' are left behind so they'll effectively be ignored as
        ;; you can;t have a symbol called "someName:false"
        (defun custom/parse-additional-externs ()
          (when (> (buffer-size) 0)
            (let ((btext (replace-regexp-in-string
                          ": *true" " "
                          (replace-regexp-in-string "[\n\t ]+" " " (buffer-substring-no-properties 1 (buffer-size)) t t))))
                        (mapc (apply-partially 'add-to-list 'js2-additional-externs)
                              (split-string
                               (if (string-match "/\\* *global *\\(.*?\\) *\\*/" btext) (match-string-no-properties 1 btext) "")
                               " *, *" t))
                        )))
        ;;TODO: maybe make hydra
        (bind-key "C-x C-e" 'js-send-last-sexp js2-mode-map)
        (bind-key "C-M-x" 'js-send-last-sexp-and-go js2-mode-map)
        (bind-key "C-c b" 'js-send-buffer js2-mode-map)
        (bind-key "C-c C-b" 'js-send-buffer-and-go js2-mode-map)
        (bind-key "C-c l" 'js-load-file-and-go js2-mode-map))

      ;; TODO: play with js2-refactor
      (use-package js2-refactor
        :ensure t
        :after (js2-mode s multiple-cursors dash s yasnippet)
        :config
        (js2r-add-keybindings-with-prefix "C-c C-j"))

      (use-package tern
        :ensure t
        :after (json cl-lib)
        :commands tern-mode)

      (use-package company-tern
        :ensure t
        :after (company tern))

      (use-package xref-js2
        :ensure t
        :after (js2-mode)
        :bind (:map js2-mode-map
                    ("M-." . nil))
        :hook (xref-backend-functions . xref-js2-xref-backend))
    #+END_SRC
*** lisp
**** slime setup
     #+BEGIN_SRC emacs-lisp :tangle yes
       (use-package slime
         :ensure t
         :pin melpa-stable ;; corresponds to quicklisp version
         :hook ((lisp-mode-hook . (lambda ()
                                    (slime-mode t)
                                    (set (make-local-variable 'slime-lisp-implementations)
                                         (list (assoc 'sbcl slime-lisp-implementations)))))
                (inferior-lisp-mode-hook . inferior-slime-mode)
                ;; (slime-mode-hook . slime-autodoc-mode) ;; some signature down the call stack is broken in 2.20
                (lisp-mode-hook . (lambda ()
                                    (auto-fill-mode 1)
                                    (setq indent-tabs-mode t)
                                    (setq tab-width 2)
                                    (turn-on-eldoc-mode)))
                (lisp-mode-hook . common-hooks/newline-hook)
                (lisp-mode-hook . common-hooks/prog-helpers))
         :init
         (use-package slime-autoloads)
         :custom
         (slime-complete-symbol*-fancy t)
         (slime-complete-symbol-function 'slime-fuzzy-complete-symbol)
         (slime-net-coding-system 'utf-8-unix)
         :config
         (defadvice slime-documentation-lookup
             (around change-browse-url-browser-function activate)
           "Use w3m for slime documentation lookup."
           (let ((browse-url-browser-function 'w3m-browse-url))
             ad-do-it))
         (slime-setup
          '(slime-fancy-inspector slime-fancy-trace slime-fontifying-fu
            slime-hyperdoc slime-package-fu slime-references slime-trace-dialog
            slime-xref-browser slime-asdf slime-autodoc slime-banner slime-fancy
            slime-fuzzy slime-repl slime-sbcl-exts))
         (add-to-list 'slime-lisp-implementations '(sbcl ("sbcl")  :coding-system utf-8-unix)))

       ;;TODO: check if there is any conflict inconsistency between slime-builtin/company completion
       (use-package slime-company
         :ensure t
         :after (slime company))
     #+END_SRC
**** additional setup
     #+BEGIN_SRC emacs-lisp :tangle yes
       (setq custom/hyperspec-root "~/help/HyperSpec/")

       (use-package inf-lisp
         :config
         (setq inferior-lisp-program "sbcl"))

       (use-package common-lisp-snippets
         :ensure t
         :after (yasnippet))

       ;; lookup information in hyperspec
       (info-lookup-add-help
        :mode 'lisp-mode
        :regexp "[^][()'\" \t\n]+"
        :ignore-case t
        :doc-spec '(("(ansicl)Symbol Index" nil nil nil)))

       (defhydra hydra-slime ()
         "
       Slime
       -----------
       _s_ run
       _l_ selector
       _;_ insert balanced comments
       _M-;_ remove balanced comments
       _h_ documentation lookup
       "
         ("s" slime "run slime" :color blue)
         ("l" slime-selector "slime selector" :color blue)
         (";" slime-insert-balanced-comments)
         ("M-;" slime-remove-balanced-comments)
         ("h" slime-documentation-lookup)
         ("q" nil "cancel"))
       (global-set-key (kbd "M-p") 'hydra-slime/body)
     #+END_SRC
*** python                                                               :review:
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package jedi-core
        :ensure t
        :hook (python-mode-hook . jedi:setup)
        :bind (:map python-mode-map
               ("M-/" . jedi:show-doc))
        :custom
        (jedi:complete-on-dot t)
        (jedi:goto-definition-marker-ring-length 32)
        (jedi:tooltip-method nil)
        (epc:accept-process-timeout 200)
        (jedi:get-in-function-call-timeout 0)
        (jedi:get-in-function-call-delay 0)
        (jedi:goto-definition-config '((nil definition nil)))
        (jedi:use-shortcuts t))

      (use-package company-jedi
        :ensure t
        :after (company jedi-core)
        :config
        (add-to-list 'company-backends 'company-jedi))

      (use-package python-mode
        :ensure t
        :mode ("\\.py$" . python-mode)
        :hook ((python-mode-hook . common-hooks/prog-helpers)
               (python-mode-hook . common-hooks/newline-hook)
               (python-mode-hook . (lambda ()
                                     (setq flycheck-checker 'python-flake8)
                                     (setq indent-tabs-mode nil)
                                     (setq tab-width 4)
                                     (setq imenu-create-index-function 'imenu-default-create-index-function)
                                     (modify-syntax-entry ?_ "." python-mode-syntax-table)
                                     (modify-syntax-entry ?- "." python-mode-syntax-table)
                                     (auto-fill-mode 1)))
               ;; Highlight the call to ipdb, src http://pedrokroger.com/2010/07/configuring-emacs-as-a-python-ide-2/
               (python-mode-hook . (lambda ()
                                     (highlight-lines-matching-regexp "import ipdb")
                                     (highlight-lines-matching-regexp "ipdb.set_trace()")
                                     (highlight-lines-matching-regexp "import wdb")
                                     (highlight-lines-matching-regexp "wdb.set_trace()"))))
        :bind (:map python-mode-map
               ("<M-left>" . py-shift-indent-left)
               ("<M-right>" . py-shift-indent-right))
        :config
        (add-function :before-until (local 'eldoc-documentation-function)
                      #'(lambda () "")))

      (use-package python-environment
        :ensure t
        :disabled
        :custom
        (setq python-environment-directory (at-user-data-dir ".python-environments")))

      (use-package virtualenvwrapper
        :ensure t
        :no-require t
        :hook (projectile-after-switch-project-hook . venv-projectile-auto-workon)
        :config
        (setq venv-location (at-homedir ".virtualenvs/"))
        (setq-default mode-line-format (cons '(:exec venv-current-name) mode-line-format)))

      (use-package smartparens-python
        :after (smartparens))

      (use-package flycheck-pycheckers
        :ensure t
        :no-require t
        :hook (flycheck-mode-hook . flycheck-pycheckers-setup)
        :after (flycheck))

      (use-package py-autopep8 :ensure t)

      (use-package importmagic
        :ensure t
        :disabled
        :hook (python-mode-hook . importmagic-mode))

      (use-package py-isort
        :ensure t
        :disabled) ;; TODO: bind py-isort-{buffer, region}

      (use-package pip-requirements
        :ensure t
        :mode ("requirements\\." . pip-requirements-mode))
    #+END_SRC
***** BACKLOG imports/formatting automation (search elpy/standalone extensions)
****** isort
***** BACKLOG fix new setup
****** incorrect flake8 config (excludes)
****** check/add W0512
****** automatic venv changing per project fails
****** with active venv some "cannot import.." messages still persist
****** check epc/importmagic work
****** actualize py-isort setup
****** review pylint setup
*** cc
**** specialization for PostgreSQL development
     #+BEGIN_SRC emacs-lisp :tangle yes
       (defun pgsql-c-mode ()
         ;; sets up formatting for PostgreSQL C code
         (interactive)
         (c-mode)
         (setq-default tab-width 4)
         (c-set-style "bsd")             ; set c-basic-offset to 4, plus other stuff
         (c-set-offset 'case-label '+)   ; tweak case indent to match PG custom
         (setq fill-column 79)           ; matches what pgindent does
         (setq indent-tabs-mode t))      ; make sure we keep tabs when indenting
     #+END_SRC
**** packages
     #+BEGIN_SRC emacs-lisp :tangle yes
       (use-package cc-mode
         :hook ((c++-mode-hook . common-hooks/newline-hook)
                (c-mode-common-hook . common-hooks/prog-helpers)
                (c-mode-hook . common-hooks/newline-hook)
                (c++-mode-hook . flycheck-mode)
                (c-mode-hook . flycheck-mode))
         :mode (("\\.ipp?$" . c++-mode)
                ("\\.h$" . c++-mode)
                ("CMakeLists\\.txt\\'" . cmake-mode)
                ("\\.cmake\\'" . cmake-mode)
                ("\\(postgres\\|pgsql\\).*\\.[ch]\\'" . pgsql-c-mode)
                ("\\(postgres\\|pgsql\\).*\\.cc\\'" . pgsql-c-mode)))

       (use-package company-c-headers
         :ensure t
         :after (company))

       (use-package function-args
         :ensure t
         :after (swiper cc-mode)
         :bind (:map c-mode-map
                ("C-c C-<tab>" . moo-complete)
                ("C-c j" . moo-jump-local)
                :map c++-mode-map
                ("C-c C-<tab>" . moo-complete)
                ("C-c j" . moo-jump-local)))

       (use-package rtags
         :after (cc-mode)
         :bind (:map c-mode-base-map
                ("M-." . tags-find-symbol-at-point)
                ("M-," . tags-find-references-at-point)
                ("M-;" . tags-find-file)
                ("C-." . tags-find-symbol)
                ("C-," . tags-find-references)
                ("C-<" . rtags-find-virtuals-at-point)
                :map global-map
                ("M-." . tags-find-symbol-at-point)
                ("M-," . tags-find-references-at-point)
                ("M-;" . tags-find-file)
                ("C-." . tags-find-symbol)
                ("C-," . tags-find-references)
                ("C-<" . rtags-find-virtuals-at-point))
         :custom
         (rtags-completions-enabled t)
         (rtags-autostart-diagnostics t)
         :config
         (use-package company-rtags
           :after (company))
         (use-package flycheck-rtags
           :hook (c-mode-common-hook . (lambda ()
                                         (flycheck-select-checker 'rtags)
                                         (setq-local flycheck-highlighting-mode nil) ;; RTags creates more accurate overlays.
                                         (setq-local flycheck-check-syntax-automatically nil))))
         (defun use-rtags (&optional useFileManager)
           (and (rtags-executable-find "rc")
                (cond ((not (gtags-get-rootpath)) t)
                      ((and (not (eq major-mode 'c++-mode))
                            (not (eq major-mode 'c-mode))) (rtags-has-filemanager))
                      (useFileManager (rtags-has-filemanager))
                      (t (rtags-is-indexed)))))
         (defun tags-find-symbol-at-point (&optional prefix)
           (interactive "P")
           (if (and (not (rtags-find-symbol-at-point prefix)) rtags-last-request-not-indexed)
               (gtags-find-tag)))
         (defun tags-find-references-at-point (&optional prefix)
           (interactive "P")
           (if (and (not (rtags-find-references-at-point prefix)) rtags-last-request-not-indexed)
               (gtags-find-rtag)))
         (defun tags-find-symbol ()
           (interactive)
           (call-interactively (if (use-rtags) 'rtags-find-symbol 'gtags-find-symbol)))
         (defun tags-find-references ()
           (interactive)
           (call-interactively (if (use-rtags) 'rtags-find-references 'gtags-find-rtag)))
         (defun tags-find-file ()
           (interactive)
           (call-interactively (if (use-rtags t) 'rtags-find-file 'gtags-find-file))))

       (use-package flycheck-clang-analyzer :ensure t)

       (info-lookup-add-help
        :mode 'c-mode
        :regexp "[^][()'\" \t\n]+"
        :ignore-case t
        :doc-spec '(("(libc)Symbol Index" nil nil nil)))
     #+END_SRC
**** TBD
***** BACKLOG review and maybe rebind keys
*** golang
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package go-mode
        :ensure t
        :no-require t
        :after (multi-compile)
        :mode ("\\.go$" . go-mode)
        :hook (before-save-hook . gofmt-before-save)
        :config
        (use-package godoctor :ensure t)
        (setq  gofmt-command "goimports")
        (add-to-list 'multi-compile-alist
                     '(go-mode . (("go-build/git" "go build -v"
                                   (locate-dominating-file buffer-file-name ".git")) ;;TODO: try to guess binary name from project name (investigate how this refers to libraries builds, etc.)
                                  ("go-build/main" "go build -v"
                                   (locate-dominating-file buffer-file-name "main.go"))
                                  ("go-build-and-run/git" "go build -v && echo '########## build finished ##########' && eval ./${PWD##*/}"
                                   (multi-compile-locate-file-dir ".git"))
                                  ("go-build-and-run/main" "go build -v && echo '########## build finished ##########' && eval ./${PWD##*/}"
                                   (multi-compile-locate-file-dir "main.go")))))
        (bind-key (kbd "C-c C-c") 'multi-compile-run go-mode-map)
        (bind-key (kbd "M-.") 'godef-jump go-mode-map)
        (bind-key (kbd "M-,") 'pop-tag-mark go-mode-map))

      (use-package company-go
        :ensure t
        :after (go-mode company)
        :config
        (add-to-list 'company-backends 'company-go))

      (use-package go-guru
        :ensure t
        :hook (go-mode-hook . go-guru-hl-identifier-mode))

      (use-package flycheck-gometalinter
        :ensure t
        :custom
        ;; only run fast linters
        (flycheck-gometalinter-fast t)
        ;; use in tests files
        (flycheck-gometalinter-test t)
        (flycheck-gometalinter-deadline "10s")
        ;; gometalinter: skips 'vendor' directories and sets GO15VENDOREXPERIMENT=1
        (flycheck-gometalinter-vendor t)
        ;; gometalinter: only enable selected linters
        (flycheck-gometalinter-disable-all t)
        (flycheck-gometalinter-enable-linters
         '("golint" "vet" "vetshadow" "golint" "ineffassign" "goconst" "errcheck" "deadcode"))
        :config
        (flycheck-gometalinter-setup))

      (use-package go-eldoc
        :ensure t
        :hook (go-mode-hook . go-eldoc-setup))

      (use-package gotest
        :ensure t
        :after (go-mode)
        :bind (:map go-mode-map
               ("C-c C-x f" . go-test-current-file)
               ("C-c C-x t" . go-test-current-test)
               ("C-c C-x p" . go-test-current-project)
               ("C-c C-x T" . go-test-current-benchmark)
               ("C-c C-x F" . go-test-current-file-benchmarks)
               ("C-c C-x P" . go-test-current-project-benchmarks)
               ("C-c C-x x" . go-run)))

      (use-package govet
        :ensure t)

      (use-package go-tag
        :ensure t
        :no-require t
        :after (go-mode)
        :bind (:map go-mode-map
               ("C-c t" . go-tag-add)
               ("C-c T" . go-tag-remove))
        :custom
        (go-tag-args '("-transform" "camelcase")))

      (use-package go-fill-struct
        :ensure t
        :disabled t ;;TODO: figure out how to actually use it
        :after (go-mode))

      (use-package go-playground
        :ensure t
        :after (go-mode))

      (use-package gorepl-mode
        :ensure t
        :hook (go-mode-hook . gorepl-mode))
    #+END_SRC
**** BACKLOG try to integrate https://getgb.io/
*** other
    Languages without much extra customization are going precisely here
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package actionscript-mode
        :ensure t
        :mode ("\\.actionscript" . actionscript-mode))

      (use-package json-mode
        :after (json-reformat json-snatcher)
        :mode ("\\.json$" . json-mode))

      (use-package lua-mode
        :ensure t
        :mode ("\\.lua$" . lua-mode)
        :hook (lua-mode-hook . (lambda ()
                                 (setq flycheck-checker 'lua-luacheck))))

      (use-package company-lua
        :ensure t
        :after (lua-mode company))

      (use-package rust-mode
        :ensure t
        :mode ("\\.rs" . rust-mode))
    #+END_SRC
** webdev
*** major modes
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package sgml-mode
        :bind (:map html-mode-map
               ("C-c C-w" . html-wrap-in-tag)))

      (use-package markdown-mode
        :ensure t

        :mode (("\\.markdown$" . markdown-mode)
               ("\\.md$" . markdown-mode)
               ("\\.mkd$" . markdown-mode)
               ("\\.pdc$" . markdown-mode)
               ("\\.README$" . markdown-mode))
        :bind (:map markdown-mode-map
               ("C-c C-v" . markdown-preview)
               ("C-<tab>" . yas/expand)))

      (use-package graphql-mode
        :ensure t
        :mode ("\\.graphql$" . graphql-mode))
    #+END_SRC
*** xml
    #+BEGIN_SRC emacs-lisp :tangle yes
      (defun custom/nxml-mode-hook ()
        (auto-fill-mode)
        (hs-minor-mode 1)
        (rng-validate-mode)
        (setq ispell-skip-html t)
        (unify-8859-on-decoding-mode))

      (setq nxml-auto-insert-xml-declaration-flag t)
      (setq nxml-bind-meta-tab-to-complete-flag t)
      (setq nxml-slash-auto-complete-flag t)

      (push '("<\\?xml" . nxml-mode) magic-mode-alist)

      (add-to-list 'hs-special-modes-alist
                   '(nxml-mode
                     "\\|<[^/>]&>\\|<[^/][^>]*[^/]>"
                     ""
                     nil))

      (add-hook 'nxml-mode-hook 'common-hooks/newline-hook)
      (add-hook 'nxml-mode-hook 'custom/nxml-mode-hook)

      (add-to-list 'auto-mode-alist
                   (cons (concat "\\."
                                 (regexp-opt '("xml" "xsd" "sch" "rng" "xslt" "svg" "rss" "rdf") t) "\\'")
                         'nxml-mode))

      (push '("<\\?xml" . nxml-mode) magic-mode-alist)
    #+END_SRC
*** multiple major modes
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package web-mode
        :ensure t
        :mode (("\\.phtml\\'" . web-mode)
               ("\\.tpl\\.php\\'" . web-mode)
               ("\\.[agj]sp\\'" . web-mode)
               ("\\.as[cp]x\\'" . web-mode)
               ("\\.erb\\'" . web-mode)
               ("\\.mustache\\'" . web-mode)
               ("\\.djhtml\\'" . web-mode)
               ("\\.html?\\'" . web-mode))
        :bind (:map web-mode-map
               ("M-SPC" . company-complete)) ;; manual autocomplete
        :hook (web-mode-hook . (lambda ()
                                 (set (make-local-variable 'company-backends)
                                      '(company-tern company-web-html company-yasnippet company-files))
                                 (company-mode t)))
        :custom
        (web-mode-enable-current-element-highlight t)
        (web-mode-enable-auto-closing t)
        (web-mode-enable-auto-expanding t)
        (web-mode-enable-auto-pairing t)
        (web-mode-enable-auto-quoting t)
        (web-mode-enable-css-colorization t)
        (web-mode-markup-indent-offset 2)
        (web-mode-code-indent-offset 2)
        (web-mode-css-indent-offset 2)
        :config
        (use-package web-mode-edit-element :ensure t)
        (use-package web-narrow-mode :ensure t)
        (add-to-list 'web-mode-engines-alist '("django" . "\\.html\\'"))
        ;; Enable JavaScript completion between <script>...</script> etc.
        ;; TODO: check why company and AC are mentioned together (see below)
        (defadvice company-tern (before web-mode-set-up-ac-sources activate)
          "Set `tern-mode' based on current language before running company-tern."
          (message "advice")
          (if (equal major-mode 'web-mode)
              (let ((web-mode-cur-language
                     (web-mode-language-at-pos)))
                (if (or (string= web-mode-cur-language "javascript")
                        (string= web-mode-cur-language "jsx")
                        )
                    (unless tern-mode (tern-mode))
                  (if tern-mode (tern-mode -1)))))))

      (use-package company-web
        :ensure t
        :after (company dash web-completion-data))

      (use-package web-mode-edit-element
        :ensure t
        :hook (web-mode-hook . web-mode-edit-element-minor-mode))

      (use-package web-narrow-mode
        :ensure t
        :hook (web-mode-hook . web-narrow-mode))
    #+END_SRC
*** color helper
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package rainbow-mode
        :ensure t
        :hook (css-mode-hook . rainbow-mode))
    #+END_SRC
*** emmet mode setup
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package emmet-mode
        :ensure t
        :delight emmet-mode
        :commands emmet-mode
        :bind (:map emmet-mode-keymap
               ("C-j" . nil)
               ("<C-return>" . nil)
               ("C-c C-j" . emmet-expand-line))
        :hook ((sgml-mode-hook . emmet-mode)
               (nxml-mode-hook . emmet-mode)
               (django-mode . emmet-mode)
               (sgml-mode-hook . emmet-mode)
               (css-mode-hook . emmet-mode))
        :custom
        (emmet-move-cursor-between-quotes t)
        (emmet-indentation 2))
    #+END_SRC
* clients
** restclient
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package company-restclient
       :ensure t
       :after (restclient company))

     (use-package ob-restclient
       :ensure
       :after (ob restclient)
       :config
       (org-babel-do-load-languages
        'org-babel-load-languages
        '((restclient . t))))

     (use-package httprepl :ensure t)
   #+END_SRC
** terminal
*** common
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package ansi-color
        :hook (compilation-filter-hook . (lambda ()
                                           "Colorize from `compilation-filter-start' to `point'."
                                           (let ((inhibit-read-only t))
                                             (ansi-color-apply-on-region
                                              compilation-filter-start (point))))))
    #+END_SRC
*** comint
    #+BEGIN_SRC emacs-lisp :tangle yes
      (define-namespace custom/

      ;;TODO: parametrize shell for terminal
      (defun terminal ()
        "Switch to terminal. Launch if nonexistent."
        (interactive)
        (if (get-buffer "*ansi-term*")
            (switch-to-buffer "*ansi-term*")
          (ansi-term "/bin/zsh"))
        (get-buffer-process "*ansi-term*"))

      (defalias 'tt 'terminal)

      (defun comint-clear-buffer ()
        (interactive)
        (let ((comint-buffer-maximum-size 0))
          (comint-truncate-buffer)))

      (defun term-exec-hook ()
        (let* ((buff (current-buffer))
               (proc (get-buffer-process buff)))
          (set-process-sentinel
           proc
           `(lambda (process event)
              (if (string= event "finished\n")
                  (kill-buffer ,buff))))))

      )

      (use-package term
        :commands term
        :bind (:map term-raw-map
               ("C-c C-y" . term-paste))
        :hook (term-exec-hook . custom/term-exec-hook)
        :custom
        (explicit-shell-file-name "/bin/zsh"))

      (bind-key "\C-c\M-o" 'custom/comint-clear-buffer comint-mode-map)
    #+END_SRC
*** shell/check syntax
    #+BEGIN_SRC emacs-lisp :tangle yes
      (defun custom/sh-check-finish-hook (buf msg)
        "Function, that is executed at the end of sh check"
        (when (not (string-match "finished" msg))
          (next-error 1 t)))

      (define-compilation-mode sh-check-mode "SH"
        "Mode for check sh source code."
        (set (make-local-variable 'compilation-disable-input) t)
        (set (make-local-variable 'compilation-scroll-output) nil)
        (set (make-local-variable 'compilation-finish-functions)
             (list 'custom/sh-check-finish-hook)))

      (use-package shell
        :mode ("\\.sh$" . shell-mode)
        :bind (:map shell-mode-map
                    ("C-c l" . (lambda ()
                                 "Check syntax of current file"
                                 (interactive)
                                 (when (string-match "^\\(ba\\|z\\)sh" (symbol-name sh-shell))
                                   (save-some-buffers t)
                                   (compilation-start (concat (symbol-name sh-shell) " -n " (buffer-file-name))
                                                      'sh-check-mode)))))
        :hook ((shell-mode-hook . ansi-color-for-comint-mode-on)
               (shell-mode-hook . common-hooks/newline-hook)
               (shell-mode-hook . common-hooks/prog-helpers)))

      (use-package company-shell
        :ensure t
        :after (shell company))
    #+END_SRC
**** BACKLOG try to leverage shellcheck util usage
*** tmux
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package emamux
        :ensure t
        :bind ("<f12>" . hydra-emamux/body)
        :config
        (defhydra hydra-emamux ()
          "
          _n_ew window
          _s_end region
          _r_un command
          "
          ("n" emamux:new-window)
          ("s" emamux:send-region)
          ("r" emamux:run-command)
          ("q" nil)))
    #+END_SRC
** internal browser (w3m/eww)
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package w3m
       :ensure t
       :commands w3m
       :hook (w3m-display-hook . (lambda (url)
                                   (rename-buffer
                                    (format "*w3m: %s*" (or w3m-current-title
                                                            w3m-current-url)) t)))
       :custom
       (w3m-coding-system 'utf-8)
       (w3m-file-coding-system 'utf-8)
       (w3m-file-name-coding-system 'utf-8)
       (w3m-input-coding-system 'utf-8)
       (w3m-output-coding-system 'utf-8)
       (w3m-terminal-coding-system 'utf-8)
       (w3m-use-cookies t)
       :config
       ;; special chars
       (standard-display-ascii ?\200 [15])
       (standard-display-ascii ?\201 [21])
       (standard-display-ascii ?\202 [24])
       (standard-display-ascii ?\203 [13])
       (standard-display-ascii ?\204 [22])
       (standard-display-ascii ?\205 [25])
       (standard-display-ascii ?\206 [12])
       (standard-display-ascii ?\210 [23])
       (standard-display-ascii ?\211 [14])
       (standard-display-ascii ?\212 [18])
       (standard-display-ascii ?\214 [11])
       (standard-display-ascii ?\222 [?\'])
       (standard-display-ascii ?\223 [?\"])
       (standard-display-ascii ?\224 [?\"])
       (standard-display-ascii ?\227 " -- "))

     (use-package w3m-search
       :after (w3m)
       :config
       (add-to-list 'w3m-search-engine-alist
                    '("emacs-wiki" "http://www.emacswiki.org/cgi-bin/wiki.pl?search=%s")))


     (defun eww-more-readable () ;;TODO: add to appropriate hook
       "Makes eww more pleasant to use. Run it after eww buffer is loaded."
       (interactive)
       (setq eww-header-line-format nil) ;; removes page title
       (setq mode-line-format nil) ;; removes mode-line
       (set-window-margins (get-buffer-window) 20 20) ;; increases size of margins
       (redraw-display) ;; apply mode-line changes
       (eww-reload 'local)) ;; apply eww-header changes
   #+END_SRC
** MPD
   #+BEGIN_SRC emacs-lisp :tangle yes


     (use-package mingus
       :ensure t
       :bind (("C-c m" . hydra-mingus/body)
              :map mingus-playlist-map
              ("<Backspace>" . mingus-del))
       :config
       (use-package libmpdee :ensure t)
       (defhydra hydra-mingus ()
         "
       Control               Playlist
       ------------------------------
       _<up>_ volume up        _s_ show playlist
       _<down>_ volume down    _/_ search for tracks
       _<right>_ seek forward
       _<left>_ seek backward
       "
         ("s" mingus "open mingus")
         ("/" mingus-search "Search")
         ("<up>" (dotimes (i 5) (mingus-vol-up)) "Louder")
         ("<down>" (dotimes (i 5) (mingus-vol-down)) "Quieter")
         ("<right>" mingus-seek "seek forward")
         ("<left>" mingus-seek-backward "seek backward")
         ("q" nil "cancel")))
   #+END_SRC
** open files in external apps
   #+BEGIN_SRC emacs-lisp :tangle yes
     (bind-key "C-!" 'crux-open-with dired-mode-map)
   #+END_SRC
** email
*** common
    #+BEGIN_SRC emacs-lisp :tangle yes
      (defvar custom/gmail-accounts private/gmail-accounts)

      (use-package footnote)

      ;; use tables in message mode
      (add-hook 'message-mode-hook 'turn-on-orgtbl)
    #+END_SRC
*** send mail
    #+BEGIN_SRC emacs-lisp :tangle yes
      (setq mail-specify-envelope-from t)
      (setq message-sendmail-envelope-from 'header)
      (setq mail-envelope-from 'header)
      (setq send-mail-function 'sendmail-send-it)
      (setq message-kill-buffer-on-exit t)
    #+END_SRC
*** notmuch
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package notmuch
        :ensure t
        :no-require t
        :commands notmuch
        :bind (:map notmuch-search-mode-map
               ("!" . (lambda ()
                        "toggle unread tag for thread"
                        (interactive)
                        (if (member "unread" (notmuch-search-get-tags))
                            (notmuch-search-tag '("-unread" "-spam"))
            (notmuch-search-tag '("+unread")))))
               ("g" . notmuch-refresh-this-buffer)
               :map notmuch-message-mode-map
               ("#" . mml-attach-file))
        :hook ((notmuch-hello-refresh-hook . (lambda ()
                                               (if (and (eq (point) (point-min))
                                                        (search-forward "Saved searches:" nil t))
                                                   (progn
                                                     (forward-line)
                                                     (widget-forward 1))
                                                 (if (eq (widget-type (widget-at)) 'editable-field)
                                                     (beginning-of-line)))))
               (message-setup-hook . mml-secure-message-sign-pgpmime))  ;; Crypto Settings
        :custom
        (mm-text-html-renderer 'w3m)
        (notmuch-mua-compose-in 'current-window)
        (notmuch-identities custom/gmail-accounts)
        (notmuch-fcc-dirs private/notmuch-fcc-dirs)
        (notmuch-search-line-faces '(("unread" . (:foreground "white"))
                                     ("deleted" . (:foreground "red" :background "blue"))))
        (notmuch-saved-searches private/notmuch-saved-searches)
        (notmuch-crypto-process-mime t) ; Automatically check signatures
        (notmuch-hello-hide-tags (quote ("killed")))
        :config
        (use-package org-notmuch))

      (use-package counsel-notmuch
        :ensure t
        :after (counsel notmuch)
        :commands counsel-notmuch)
    #+END_SRC
**** BACKLOG try tagging from https://asynchronous.in/2017/04/21/Email-with-notmuch-and-astroid/
*** hydra
    #+BEGIN_SRC emacs-lisp :tangle yes
      (defhydra hydra-email (:exit t :color red :idle 1.0)
        "Read mail"
        ("n" notmuch nil)
        ("N" counsel-notmuch nil))
      (global-set-key (kbd "C-c 4") 'hydra-email/body)
    #+END_SRC
** security
*** packages
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package pass :ensure t)

      (use-package auth-password-store
        :ensure t
        :config
        (auth-pass-enable))

      (use-package ivy-pass :ensure t)
    #+END_SRC
*** hydras
    #+BEGIN_SRC emacs-lisp :tangle yes
      (defhydra hydra-security (:idle 1.0)
        ("p" pass "pass" :color blue)
        ("!" ivy-pass "Ivy interface to Pass" :color blue)
        ("q" nil "cancel"))
      (global-set-key (kbd "<f6>") 'hydra-security/body)
    #+END_SRC
** various useful packages
   #+BEGIN_SRC emacs-lisp :tangle yes
     (imagemagick-register-types)

     (use-package google-translate
       :ensure t
       :bind (("C-c C-t" . google-translate-at-point)
              ("C-c C-T" . google-translate-smooth-translate))
       :init
       (use-package google-translate-default-ui))

     (use-package wttrin
       :ensure t
       :after (xterm-color)
       :custom
       (wttrin-default-cities '("Moscow")))

     (use-package webpaste
       :ensure t
       :bind ("M-t" . hydra-transpose/body)
       :config
       ;;TODO: fix keybindings
       (defhydra hydra-webpaste ()
         ("b" webpaste-paste-buffer "paste buffer")
         ("r" webpaste-paste-region "paste region")
         ("q" nil "cancel")))

     (use-package ein :ensure t)
   #+END_SRC
* pim
** elfeed
   #+BEGIN_SRC emacs-lisp :tangle no
     (use-package elfeed
       :ensure t
       :bind (("C-x w" . elfeed)
              :map elfeed-search-mode-map
              ("!" . elfeed-search-untag-all-unread)
              ("=" . elfeed-search-update--force)
              ("+" . elfeed-search-fetch))
       :config
       (defface elfeed-lisp-tag-face
         '((t :weight bold :foreground "cyan"))
         "Face used in search mode for unread entry titles.")
       (push '(lisp elfeed-lisp-tag-face) elfeed-search-face-alist)
       (defface elfeed-functional-tag-face
         '((t :weight bold :foreground "green"))
         "Face used in search mode for unread entry titles.")
       (push '(functional elfeed-functional-tag-face) elfeed-search-face-alist)
       (setq-default elfeed-search-filter "-junk @1-week-ago +unread"))

     (use-package elfeed-org
       :ensure t
       :after (elfeed)
       :custom
       (rmh-elfeed-org-files `(,(at-org-kb-dir "/feeds.org")))
       :config
       (elfeed-org))

     (use-package elfeed-goodies
       :ensure t
       :after (elfeed)
       :config
       (elfeed-goodies/setup))
   #+END_SRC
** calendars
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package calfw
       :ensure t
       :commands calfw
       :custom-face (cfw:face-title ((t (:foreground "#f0dfaf" :weight bold :height 2.0 :inherit variable-pitch))))
       :custom-face (cfw:face-header ((t (:foreground "#d0bf8f" :weight bold))))
       :custom-face (cfw:face-sunday ((t :foreground "#cc9393" :background "grey10" :weight bold)))
       :custom-face (cfw:face-saturday ((t :foreground "#8cd0d3" :background "grey10" :weight bold)))
       :custom-face (cfw:face-holiday ((t :background "grey10" :foreground "#8c5353" :weight bold)))
       :custom-face (cfw:face-grid ((t :foreground "DarkGrey")))
       :custom-face (cfw:face-default-content ((t :foreground "#bfebbf")))
       :custom-face (cfw:face-periods ((t :foreground "cyan")))
       :custom-face (cfw:face-day-title ((t :background "grey10")))
       :custom-face (cfw:face-default-day ((t :weight bold :inherit cfw:face-day-title)))
       :custom-face (cfw:face-annotation ((t :foreground "RosyBrown" :inherit cfw:face-day-title)))
       :custom-face (cfw:face-disable ((t :foreground "DarkGray" :inherit cfw:face-day-title)))
       :custom-face (cfw:face-today-title ((t :background "#7f9f7f" :weight bold)))
       :custom-face (cfw:face-today ((t :background: "grey10" :weight bold)))
       :custom-face (cfw:face-select ((t :background "#2f2f2f")))
       :custom-face (cfw:face-toolbar ((t :foreground "Steelblue4" :background "Steelblue4")))
       :custom-face (cfw:face-toolbar-button-off ((t :foreground "Gray10" :weight bold)))
       :custom-face (cfw:face-toolbar-button-on ((t :foreground "Gray50" :weight bold)))
       :custom
       (calendar-week-start-day 1) ; 0:Sunday, 1:Monday
       ;; Unicode characters
       (cfw:fchar-junction ?╬)
       (cfw:fchar-vertical-line ?║)
       (cfw:fchar-horizontal-line ?═)
       (cfw:fchar-left-junction ?╠)
       (cfw:fchar-right-junction ?╣)
       (cfw:fchar-top-junction ?╦)
       (cfw:fchar-top-left-corner ?╔)
       (cfw:fchar-top-right-corner ?╗)
       ;; Week days
       (calendar-day-name-array
        ["Воскресенье" "Понедельник" "Вторник" "Среда" "Четверг" "Пятница" "Суббота"])
       ;; Month
       (calendar-month-name-array
        ["Январь" "Февраль" "Март" "Апрель" "Май" "Июнь" "Июль" "Август" "Сентябрь"
         "Октябрь" "Ноябрь" "Декабрь"])
       :config
       (defun custom/calfw-open-calendar ()
         (interactive)
         (cfw:open-calendar-buffer
          :contents-sources
          (list
           (cfw:org-create-source "Green")  ; orgmode source
           (cfw:ical-create-source "gcal" private/google-calendar-url "IndianRed") ; google calendar ICS
           (cfw:ical-create-source "gcal" private/google-family-calendar-url "IndianRed")))))

     (use-package calfw-ical :ensure t)
     (use-package calfw-org :ensure t)

     (use-package calfw-gcal
       :ensure t
       :after (calfw))

     (use-package org-gcal
       :ensure t
       :after (request-deferred alert org)
       :custom
       (org-gcal-client-id private/org-gcal-client-id)
       (org-gcal-client-secret private/org-gcal-client-secret)
       (org-gcal-file-alist private/org-gcal-file-alist))
   #+END_SRC
** orgmode
*** preface
**** Notes about setting up org-capture
     update-desktop-database

     URL:
     javascript:location.href='org-protocol://capture://l/'+encodeURIComponent(location.href)+'/'+encodeURIComponent(document.title)+'/'+encodeURIComponent(window.getSelection())

     ~/.local/share/applications/mimeapps.list
     [Default Applications]
     x-scheme-handler/org-protocol=org-protocol.desktop

     ~/.local/share/applications/org-protocol.desktop
     [Desktop Entry]
     Name=org-protocol
     Exec=emacsclient %u
     Type=Application
     Terminal=false
     Categories=System;
     MimeType=x-scheme-handler/org-protocol;
**** org-id usage
     org-id usage example for the future:
     "* TODO___ %a\n  :PROPERTIES:\n  :ID: %(org-id-new)\n  :END:\n  %U\n\n  %i"
*** definitions
**** process thing at point
     #+BEGIN_SRC emacs-lisp :tangle yes
       (defadvice custom/browse-url-at-point (before org-position-url activate)
         (when (derived-mode-p 'org-mode)
           (let ((end nil))
             (save-excursion
               (org-back-to-heading t)
               (setq end (save-excursion (outline-next-heading) (point))))
             (org-back-to-heading t)
             (re-search-forward org-plain-link-re end t))))
     #+END_SRC
**** Org locations
     :PROPERTIES:
     :ID:       ac9bd4a6-f167-4408-aa97-c58843003584
     :END:
     #+BEGIN_SRC emacs-lisp :tangle yes
       (defvar custom/org-journal-file (at-org-dir "/journal.org"))
       (defvar custom/org-browser-tabs (at-org-dir "/browser-tabs.org"))

       (setq org-archive-location (concat custom/org-journal-file "::datetree/"))
     #+END_SRC
**** open org agenda when we need it
     #+BEGIN_SRC emacs-lisp :tangle yes
       (define-namespace custom/

       (defun jump-to-org-agenda ()
         (interactive)
         (let ((buf (get-buffer "*Org Agenda*"))
               wind)
           (if buf
               (if (setq wind (get-buffer-window buf))
                   (select-window wind)
                 (if (called-interactively-p)
                     (progn
                       (select-window (display-buffer buf t t))
                       (org-fit-window-to-buffer)
                       (org-agenda-redo))
                   (with-selected-window (display-buffer buf)
                     (org-fit-window-to-buffer)
                     (org-agenda-redo))))
             (call-interactively 'org-agenda-list)))
         (let ((buf (get-buffer "*Calendar*")))
          (unless (get-buffer-window buf)
            (org-agenda-goto-calendar))))

       (defun jump-to-custom-agenda-random ()
         (interactive)
         (let* ((agendas
                 (remove-if
                  (lambda (agenda) (= (length agenda) 1))
                  (mapcar (lambda (x) (car x)) org-agenda-custom-commands)))
                (agendas-count (length agendas)))
           (org-agenda nil
                       (car (nthcdr (random agendas-count) agendas)))))

       )
     #+END_SRC
**** timestamps utils
     #+BEGIN_SRC emacs-lisp :tangle yes
       (define-namespace custom/

       ;;TODO: use prefix arg
       (defun org-update-timestamp-with-time (&optional as-is)
         (interactive)
         (unless as-is
           (insert " "))
         (insert (format-time-string "%H:%M")))

       (defun get-org-timestamp ()
         (with-temp-buffer
           (call-interactively 'org-time-stamp-inactive)
           (buffer-string)))

       (defun strip-org-timestamp (ts)
         (let ((tslen (length ts)))
           (substring ts 1 (- tslen 4))))

       )
     #+END_SRC
**** navigation
     #+BEGIN_SRC emacs-lisp :tangle yes
       (define-namespace custom/

       ;; Exclude DONE state tasks from refile targets
       (defun verify-refile-target ()
         "Exclude todo keywords with a done state from refile targets"
         (not (member (nth 2 (org-heading-components)) org-done-keywords)))

       ;;TODO: customize "todo-only" parameter for "org-tags-view"
       (defun follow-tag-link (tag)
         "Display a list of TODO headlines with tag TAG.
         With prefix argument, also display headlines without a TODO keyword."
         (org-tags-view nil tag))              ;nil was (null current-prefix-arg) originally

       ;; http://irreal.org/blog/?p=6166
       (defun org-tags-all ()
         (interactive)
         (with-current-buffer (get-buffer-create "*org-tags*")
           (delete-region (point-min) (point-max))
           (org-mode)
           (let ((tags (sort (delete-dups
                              (cl-loop for buffer in (org-buffer-list 'agenda t)
                                       append (with-current-buffer buffer
                                                (org-with-wide-buffer
                                                 (goto-char (point-min))
                                                 (cl-loop while (re-search-forward org-complex-heading-regexp nil t)
                                                          when (match-string 5)
                                                          append (split-string (substring-no-properties (match-string 5))
                                                                               ":" t "[[:space:]]+"))))))
                             'string<)))
             (dolist (tag tags)
               (insert (concat "[[elisp:(org-tags-view nil \"" tag "\")][" tag "]]\n"))))
           (beginning-of-buffer)
           (switch-to-buffer (current-buffer))
           (read-only-mode)))

       (defun org-return-dwim ()
         "Add new list or headline"
         (interactive)
         (cond
          ((org-in-item-p)
           (if (org-element-property :contents-begin (org-element-context))
               (org-insert-heading)
             (beginning-of-line)
             (setf (buffer-substring
                    (line-beginning-position) (line-end-position)) "")
             (org-return)))
          ((org-at-heading-p)
           (if (not (string= "" (org-element-property :title (org-element-context))))
               (progn (org-end-of-meta-data)
                      (org-insert-heading))
             (beginning-of-line)
             (setf (buffer-substring
                    (line-beginning-position) (line-end-position)) "")))
          ((org-at-table-p)
           (if (-any?
                (lambda (x) (not (string= "" x)))
                (nth
                 (- (org-table-current-dline) 1)
                 (org-table-to-lisp)))
               (org-return)
             ;; empty row
             (beginning-of-line)
             (setf (buffer-substring
                    (line-beginning-position) (line-end-position)) "")
             (org-return)))
          (t
           (org-return))))

       )
     #+END_SRC
**** utils
     #+BEGIN_SRC emacs-lisp :tangle yes
       (define-namespace custom/

       ;; Remove empty CLOCK drawers on clock out
       (defun remove-empty-drawer-on-clock-out ()
           (interactive)
           (save-excursion
               (beginning-of-line 0)
           (org-remove-empty-drawer-at "CLOCK" (point))))

       (defun org-use-speed-commands-for-headings-and-lists ()
         "Activate speed commands on list items too."
         (or (and (looking-at org-outline-regexp) (looking-back "^\**"))
             (save-excursion (and (looking-at (org-item-re)) (looking-back "^[ \t]*")))))

       ;; TODO: bind somewhere
       (defun org-capture-refile-and-jump ()
         (interactive)
         (org-capture-refile)
         (org-refile-goto-last-stored))

       ;;TODO: investigate usage, seems useful
       (defun custom/org-tags ()
         (get-buffer-create "*org-tags*")
         (set-buffer "*org-tags*")
         (org-mode)
         (let ((tags (sort (delete-dups (apply 'append (delete-dups (org-map-entries (lambda () org-scanner-tags) t 'agenda)))) 'string<)))
           (dolist (tag tags)
             (insert (concat "[[elisp:(org-tags-view nil \"" tag "\")][" tag  "]]\n"))))
         (beginning-of-buffer)
         (switch-to-buffer "*org-tags*"))

       )
     #+END_SRC
**** pick up random Org task
     #+BEGIN_SRC emacs-lisp :tangle yes
       (use-package org-randomnote
         :bind ("C-c R" . org-randomnote)
         :custom
         (org-randomnote-candidates org-agenda-files)
         (org-randomnote-open-behavior 'indirect-buffer))
     #+END_SRC
**** clocking customizations
     #+BEGIN_SRC emacs-lisp :tangle yes
       (define-namespace custom/

       ;; (SEC-HIGH SEC-LOW MICROSEC PICOSEC) current-idle-time
       (defvar idle-clockout-timeout 1800
         "Perform first attempt to clock-out after this period of emacs
          inactivity. It can decide to postpone the clocking-out if it's
          only emacs that is idle, but not the computer itself.")

       (defvar idle-clockout-recheck-interval 300
         "After a sufficient idle time was achieved by emacs, we'll
          periodically check current idle time of the whole OS to decide
          whether we need to clock out")

       (defvar idle-clockout-repeat-timer nil
         "Timer for repeatedly (during a single idle interval) checking
          whether we need to clock-out")

       (defun clockout-when-idle ()
         (awhen custom/idle-clockout-repeat-timer
           (cancel-timer it))
         (when (org-clocking-p)
           (if (> (org-user-idle-seconds)
                  custom/idle-clockout-timeout)
               (let ((org-clock-out-switch-to-state "WAITING")) ;TODO: introduce variable
                 (org-clock-out nil t))
             (setf custom/idle-clockout-repeat-timer
                   (run-with-idle-timer
                    (time-add (current-idle-time) custom/idle-clockout-recheck-interval)
                    nil
                    'custom/clockout-when-idle)))))

       )
     #+END_SRC
**** to be done
***** TODO some handle for getting 'done' tasks within particular time range
***** TODO some tag for those tasks not directly needed for job tasks (e.g. my own setups, ssh, etc)
***** TODO save done.org after refiling finished
***** TODO auto change status TODO --> DONE before refiling
*** setup
**** customizations
     #+BEGIN_SRC emacs-lisp :tangle yes
       (use-package org
         :ensure org-plus-contrib
         :after (f)
         :mode (("\\.org$" . org-mode)
                ("\\.org_archive$" . org-mode))
         :config
         (add-to-list 'file-coding-system-alist (cons "\\.\\(org\\|org_archive\\|/TODO\\)$"  'utf-8))
         (setq org-list-demote-modify-bullet '(("+" . "-")
                                               ("*" . "-")
                                               ("1." . "-")
                                               ("1)" . "-")
                                               ("A)" . "-")
                                               ("B)" . "-")
                                               ("a)" . "-")
                                               ("b)" . "-")
                                               ("A." . "-")
                                               ("B." . "-")
                                               ("a." . "-")
                                               ("b." . "-")))
         (setq org-lowest-priority 70) ;; extend priorities set (given ascii code)
         (setq org-use-speed-commands 'custom/org-use-speed-commands-for-headings-and-lists)
         (setq org-use-speed-commands t)
         (add-to-list 'org-speed-commands-user '("x" org-todo "DONE"))
         (add-to-list 'org-speed-commands-user '("y" org-todo-yesterday "DONE"))
         (add-to-list 'org-speed-commands-user '("s" call-interactively 'org-schedule))
         (add-to-list 'org-speed-commands-user '("i" call-interactively 'org-clock-in))
         (add-to-list 'org-speed-commands-user '("o" call-interactively 'org-clock-out))
         (add-to-list 'org-speed-commands-user '("$" call-interactively 'org-archive-subtree))
         (f-entries (at-org-dir)
                    (lambda (entry) (when (and (f-file? entry)
                                               (s-suffix? "org" entry)
                                               (file-exists-p entry))
                                      (push entry org-agenda-files)))
                    t)
         (dolist (orgfile (directory-files (at-org-dir "/journals") t "journal") )
           (setq org-agenda-files
                 (delete orgfile org-agenda-files)))
         (add-to-list 'org-agenda-files (at-config-basedir "config.org"))
         ;; agenda customizations
         (setf org-agenda-clockreport-parameter-plist '(:link t :maxlevel 2 :narrow 60))
         (setq org-agenda-dim-blocked-tasks 'invisible)
         (setq org-agenda-include-all-todo t)
         (setq org-agenda-include-diary t)
         (setq org-agenda-inhibit-startup t)
         (setq org-agenda-persistent-filter t)
         (setq org-agenda-repeating-timestamp-show-all nil)
         (setq org-agenda-restore-windows-after-quit t)
         (setq org-agenda-show-all-dates t)
         (setq org-agenda-show-inherited-tags nil)
         (setq org-agenda-show-log t)
         (setq org-agenda-skip-additional-timestamps-same-entry t)
         (setq org-agenda-skip-deadline-if-done t)
         (setq org-agenda-skip-deadline-prewarning-if-scheduled 'pre-scheduled)
         (setq org-agenda-skip-scheduled-if-done t)
         (setq org-agenda-skip-timestamp-if-done t)
         (setq org-agenda-span 'month)
         (setq org-agenda-start-on-weekday 1)
         (setq org-agenda-sticky nil) ;otherwise agenda behaves strangely on non-stuck projects
         (setq org-agenda-tags-todo-honor-ignore-options t)
         (setq org-agenda-todo-ignore-deadlines 'all)
         (setq org-agenda-todo-ignore-scheduled 'all)
         (setq org-agenda-todo-ignore-timestamp 'past)
         (setq org-agenda-todo-ignore-with-date t)
         (setq org-agenda-todo-list-sublevels nil)
         (setq org-agenda-use-tag-inheritance t)
         (setq org-agenda-window-setup 'current-window)
         (setf agenda-opts-all-with-time
               '((org-agenda-todo-ignore-scheduled nil)
                 (org-agenda-todo-ignore-deadlines nil)
                 (org-agenda-todo-ignore-with-date nil)))
         (setq org-agenda-time-grid
               '((daily today require-timed remove-match)
                 "----------------"
                 (930 1000 1200 1400 1600 1800 2000 2200 2400 2500)))
         (setq org-agenda-custom-commands
               `(("d" . "some non-straightforward TODO statuses")
                 ("db" todo "BACKLOG" nil)
                 ("ds" todo "SOON" nil)
                 ("dc" todo "CANCELLED" nil)
                 ("dw" todo "WAITING|FEEDBACK" nil)
                 ("dg" todo "GOING" ,agenda-opts-all-with-time)
                 ("da" tags "+actual_p")
                 ("c" . "by context")
                 ("cp" tags "+@personal/GOING|WAITING|BACKLOG|SOON")
                 ("cr" tags "+@project/GOING|WAITING|BACKLOG|SOON")
                 ("cj" tags "+@job/GOING|WAITING|FEEDBACK|BACKLOG|SOON")
                 ("cw" tags "+@workplace/GOING|WAITING|BACKLOG|SOON")
                 ("ct" tags "+@phonecall/WAITING|BACKLOG|SOON")
                 ("cs" tags "+@someday")
                 ("cq" tags "+@quicknote")
                 ("e" . "by essence")
                 ;;TODO: find more handy shortcuts
                 ("ec" tags "+current")
                 ("ef" tags "+reference")
                 ("em" tags "+master")
                 ("eo" tags "+ordering")
                 ("er" tags "+repair")
                 ("ed" tags "+develop")
                 ("ei" tags "+investigate")
                 ("ee" tags "+entertainment")
                 ("ey" tags "+family")
                 ("eH" tags-todo "+housekeeping")
                 ("eC" tags-todo "+current")
                 ("eF" tags-todo "+reference")
                 ("eM" tags-todo "+master")
                 ("eO" tags-todo "+ordering")
                 ("eR" tags-todo "+repair")
                 ("eD" tags-todo "+develop")
                 ("eI" tags-todo "+investigate")
                 ("eE" tags-todo "+entertainment")
                 ("u" . "unassigned")
                 ("up" alltodo "Unprioritized TODO entries"
                  ((org-agenda-skip-function
                    (lambda nil
                      (org-agenda-skip-entry-if 'regexp "\\[#[ABC]]")))
                   (org-tags-match-list-sublevels 'indented)
                   (org-agenda-sorting-strategy
                    '((agenda time-up tag-up) ))
                   ;; '(org-agenda-sorting-strategy '((agenda time-up priority-down tag-up) (todo tag-up)))
                   (org-agenda-overriding-header "Unprioritized TODO entries: ")))
                 ("P" . "Prioritized tasks")
                 ("Pa" "Prioritized tasks A"
                  ((tags-todo "+PRIORITY=\"A\"") ))
                 ("Pb" "Prioritized tasks B"
                  ((tags-todo "+PRIORITY=\"B\"")))
                 ("Pc" "Prioritized tasks C"
                  ((tags-todo "+PRIORITY=\"C\"")))
                 ("S" "Scheduled tasks" agenda ""
                  ((org-agenda-time-grid nil)
                   (org-deadline-warning-days 32)
                   (org-agenda-entry-types '(:scheduled))
                   ))
                 ("p" tags "+purchase")
                 ("b" . "tickets")
                 ("be" tags "+ticket+emacs")
                 ("bs" tags "+ticket+stumpwm")
                 ("jc" tags "+@job+current/GOING|FEEDBACK")
                 ))
         (setq org-agenda-prefix-format '((agenda . " %i %-12:c%?-12t% s %b")
                                          (timeline . "  % s")
                                          (todo . " %i %-12:c")
                                          (tags . " %i %-12:c")
                                          (search . " %i %-12:c")))
         ;; clocking customizations
         (setq org-clock-history-length 35)
         (setq org-clock-idle-time 3)
         (setq org-clock-in-resume t)
         (setq org-clock-in-switch-to-state "GOING")
         (setq org-clock-out-switch-to-state "HOLD")
         (setq org-clock-into-drawer "CLOCK")
         (setq org-clock-out-remove-zero-time-clocks t)
         (setq org-clock-persist t)
         ;; just clock-out unconditionally - it seems easier to maintain (credits to @binarin)
         (setf org-clock-x11idle-program-name "xprintidle")
         (setf org-x11idle-exists-p t)
         ;; refiling customizations
         (setq org-refile-target-verify-function 'custom/verify-refile-target)
         (setq org-refile-targets '((org-agenda-files :maxlevel . 5) (nil :maxlevel . 5)))
         (setq org-refile-use-outline-path 'file)
         ;; various customizations
         (setf org-catch-invisible-edits nil)
         (setf org-fast-tag-selection-include-todo nil)
         (setf org-id-link-to-org-use-id t)
         (setq appt-display-interval 5)
         (setq appt-message-warning-time 10)
         (setq calendar-date-style 'european)
         (setq org-M-RET-may-split-line '((default . nil)))
         (setq org-align-all-tags t)
         (setq org-attach-directory (at-org-dir "/org-attach-data"))
         (setq org-blank-before-new-entry '((heading) (plain-list-item . auto)))
         (setq org-columns-default-format "%42ITEM %TODO %3Effort(E){:} %3CLOCKSUM_T(R) %SCHEDULED")
         (setq org-confirm-elisp-link-function 'y-or-n-p)
         (setq org-ctrl-k-protect-subtree t)
         (setq org-cycle-include-plain-lists 'integrate)
         (setq org-cycle-separator-lines 0)
         (setq org-deadline-warning-days 30)
         (setq org-default-notes-file (at-org-dir "/refile.org"))
         (setq org-ditaa-jar-path (at-config-basedir "resources/ditaa0_9.jar"))
         (setq org-element-use-cache nil)
         (setq org-enforce-todo-checkbox-dependencies t)
         (setq org-enforce-todo-dependencies t)  ;;TODO: try ORDERED/NOBLOCKING props : org-toggle-ordered-property
         (setq org-export-coding-system 'utf-8)
         (setq org-export-with-drawers t)
         (setq org-extend-today-until 2)
         (setq org-fast-tag-selection-single-key 'expert)
         (setq org-fontify-done-headline t)
         (setq org-global-properties '(("STYLE_ALL" . "habit")))
         (setq org-goto-max-level 10)
         (setq org-hide-leading-stars t)
         (setq org-indirect-buffer-display 'current-window)
         (setq org-insert-mode-line-in-empty-file t)
         (setq org-log-done t)
         (setq org-log-into-drawer t)
         (setq org-log-repeat 'time)
         (setq org-loop-over-headlines-in-active-region t)
         (setq org-outline-path-complete-in-steps nil)
         (setq org-read-date-prefer-future 'time)
         (setq org-return-follows-link t)
         (setq org-special-ctrl-a/e t)
         (setq org-special-ctrl-k t)
         (setq org-src-fontify-natively t)
         (setq org-startup-folded nil)
         (setq org-stuck-projects '("+LEVEL=1/-DONE" ("TODO" "GOING" "NEXT" "WAITING" "HOLD" "CANCELLED") nil ""))
         (setq org-tags-column -80)
         (setq org-track-ordered-property-with-tag t)
         (setq org-use-effective-time t)
         (setq org-use-property-inheritance t)
         (setq org-use-sub-superscripts nil)
         (setq org-yank-adjusted-subtrees t)
         (setq org-agenda-show-future-repeats 'next)
         (setq org-highlight-latex-and-related '(latex))
         (setq org-confirm-shell-link-function 'y-or-n-p)
         (setq org-confirm-elisp-link-function 'y-or-n-p)
         (setq org-src-window-setup 'current-window)
         (setq org-confirm-babel-evaluate nil)
         (when (featurep 'unicode-fonts)
           (setq org-ellipsis "⤵"))
         ;; keywords setup
         (setq kw-seq-common '(sequence "BACKLOG(b)" "SOON(s)" "REPEAT(r)" "GOING(g!)" "NEXT(x)" "WAITING(w@/!)" "FEEDBACK"
                                        "|" "DONE(d!/@)" "CANCELLED(c@/!)" "OUTDATED(o)"))
         (setq org-todo-keywords
                    `(,kw-seq-common))
         (setq org-todo-keywords-for-agenda '("BACKLOG(b)" "SOON(s)" "REPEAT(r)" "GOING(g!)" "NEXT(x)" "WAITING(w@/!)" "FEEDBACK"))
         (setq org-done-keywords-for-agenda '("DONE(d)" "CANCELLED(c)" "OUTDATED(o)"))
         ;; faces
         (setq org-todo-keyword-faces
               '(("BACKLOG" . (:foreground "gray" :weight bold))
                 ("SOON" . (:foreground "magenta" :weight bold))
                 ("REPEAT" . (:foreground "blue" :weight bold))
                 ("NEXT" . (:foreground "red" :weight bold))
                 ("WAITING" . (:foreground "orange" :weight bold))
                 ("FEEDBACK" . (:foreground "yellow" :weight bold))
                 ("CANCELLED" . (:foreground "cyan" :weight bold))
                 ("DONE" . (:foreground "green" :weight bold))))
         (setq org-priority-faces
               '((?A :foreground "red" :weight bold)
                 (?B :foreground "#94bff3" :weight bold)
                 (?C :foreground "#6f6f6f")
                 (?D :foreground "#c390d4")
                 (?E :foreground "#90c3d4")
                 (?F :foreground "#a1d490")))
         (set-face-attribute 'org-done nil :foreground "PaleGreen" :weight 'normal :strike-through t)
         (set-face-attribute 'org-headline-done nil :foreground "LightSalmon" :weight 'normal :strike-through t)
         ;; tags
         (setq org-tag-alist '(("current" . ?c)
                               ("reference" . ?f)
                               ("orgmode" . ?g)
                               ("purchase" . ?p)
                               ("master" . ?m)
                               ("ordering" . ?o)
                               ("housekeeping" . ?h)
                               ("entertainment" . ?e)
                               ("interesting" . ?i)
                               ("repair" . ?r)
                               ))
         (setq org-tags-exclude-from-inheritance '("project"))
         (setq org-todo-state-tags-triggers
               '(("GOING" ("current" . t))
                 ("DONE" ("current"))))
         (setq org-complete-tags-always-offer-all-agenda-tags t)
         ;;TODO: review whole tags cloud (in org corpus) and update org-tag-alist accordingly
         ;; org-habit
         (setq org-habit-graph-column 50)
         (setq org-habit-preceding-days 10)
         (setq org-habit-following-days 4)
         (setq org-habit-show-habits-only-for-today nil)
         ;; org-capture
         (setq org-capture-templates
               `(("q" "quick notes (uncategorized)" entry (file ,(at-org-dir "/refile.org")) "* %? %U :@quicknote:")
                 ("w" "workplace")
                 ("wt" "workplace try" entry (file+olp ,(at-org-dir "/workplace.org") "workplace" "tools reference") "* %? %U :@workplace:try")
                 ("wd" "workplace tasks" entry (file+olp ,(at-org-dir "/workplace.org") "workplace" "tasks") "* BACKLOG [#C] %? %U :@workplace:")
                 ("we" "emacs")
                 ("wed" "emacs todo" entry (file+olp ,(at-org-dir "/workplace.org") "emacs" "tickets") "* BACKLOG [#C] %? %U :emacs:ticket:")
                 ("wet" "emacs try" entry (file+olp ,(at-org-dir "/workplace.org") "emacs" "to try") "* %? %U :emacs:try:")
                 ("wef" "emacs foreign configs" entry (file+olp ,(at-org-dir "/workplace.org") "foreign dotfiles") "* %? %U :emacs-config:")
                 ("ws" "StumpWM")
                 ("wsc" "stumpwm todo" entry (file+olp ,(at-org-dir "/workplace.org") "StumpWM" "tickets") "* BACKLOG [#C] %? %U :stumpwm:ticket:")
                 ("wsf" "stumpwm foreign configs" entry (file+olp ,(at-org-dir "/workplace.org") "StumpWM" "foreign configs") "* %? %U :stumpwm-config:")
                 ("wa" "awesome config" entry (file+olp ,(at-org-dir "/workplace.org") "AwesomeWM" "foreign configs") "* %? %U :awesome-config:")
                 ("w." "dotfiles" entry (file+headline ,(at-org-dir "/workplace.org") "foreign dotfiles") "* %? %U :dotfiles:")
                 ("j" "job tasks")
                 ("jc" "current" entry (file ,(at-org-dir private/job-tasks-file)) "* SOON %? %U :@job:current:")
                 ("jb" "bug" entry (file ,(at-org-dir private/job-tasks-file)) "* SOON %? %U :@job:bug:")
                 ("jr" "reference item" entry (file ,(at-org-dir private/job-tasks-file)) "* %? %U :@job:reference:")
                 ("jp" "project" entry (file ,(at-org-dir private/job-tasks-file)) "* BACKLOG %? %U :@job:project:")
                 ("l" "links")
                 ("la" "links" entry (file ,(at-org-dir "/links.org")) "* %? %U :links:send:")
                 ("ld" "deferred tabs" entry (file+olp custom/org-browser-tabs "groups" "deferred tabs") "* %? %U :deferred:")
                 ("p" "projects")
                 ("pi" "project ideas" entry (file ,(at-org-dir "/projects.org")) "* %? %U :@project:idea:")
                 ("pn" "new project" entry (file ,(at-org-dir "/projects.org")) "* %? %U :@project:")
                 ("i" "sink")
                 ("ia" "newspaper articles" entry (file ,(at-org-dir "/sink.org")) "* %? %U :newspaper:toread:")
                 ("ic" "code snippet" entry (file ,(at-org-dir "/sink.org"))
                  "* %^{title} %^g :code_snippet:\n :PROPERTIES:\n :CREATED: %U\n :END:\n\n#+BEGIN_SRC %^{lang}\n %i%?\n#+END_SRC\n")
                 ("is" "search" entry (file ,(at-org-dir "/sink.org")) "* %? %U :search:")
                 ("g" "github")
                 ("gc" "common" entry (file ,(at-org-dir "/github.org")) "* %? %U :github:")
                 ("gl" "CL repo to review" entry (file ,(at-org-kb-dir "/cl-repos.org")) "* %? %U :github:common_lisp:")
                 ("m" "mastering" entry (file+headline ,(at-org-dir "/mastering.org") "inbox") "* %? %U")
                 ))
         ;; holidays
         (setq holiday-orthodox-holidays nil) ; Orthodox holidays to some extent
         (setq holiday-personal-holidays nil) ; personal anniversaries, etc.
         (setq holiday-other-holidays
               (append holiday-orthodox-holidays holiday-personal-holidays))
         (setq calendar-holidays
               (append holiday-other-holidays
                       holiday-solar-holidays))
         (add-hook 'org-mode-hook 'turn-on-font-lock)
         (add-hook 'org-clock-out-hook 'custom/remove-empty-drawer-on-clock-out 'append)
         (add-hook 'org-after-refile-insert-hook 'save-buffer)
         ;; run some commands
         (run-at-time nil 60 'org-save-all-org-buffers)
         (org-add-link-type "tag" 'custom/follow-tag-link)
         (org-clock-persistence-insinuate) ;; Resume clocking tasks when emacs is restarted
         (run-at-time "06:00" 86400 '(lambda () (setq org-habit-show-habits t)))
         (run-with-idle-timer 1800 t 'custom/jump-to-custom-agenda-random)
         (set-charset-priority 'unicode)
         (turn-on-orgtbl)
         (run-with-idle-timer custom/idle-clockout-timeout t 'custom/clockout-when-idle)
         (org-babel-do-load-languages
          'org-babel-load-languages
          '((css . t)
            (dot . t)
            (ditaa . t)
            (emacs-lisp . t)
            (lisp . t)
            (js . t)
            (latex . t)
            (org . t)
            (plantuml . t)
            (scheme . t)
            (shell . t)))
         (bind-key "<f7> ." 'org-agenda-clock-in org-agenda-mode-map)
         (bind-key "<f7> ," 'org-agenda-clock-out org-agenda-mode-map)
         (bind-key "<f7> o" 'ace-link-org org-agenda-mode-map)
         (bind-key "M-o" 'ace-link-org org-mode-map)
         (bind-key "C-'" nil org-mode-map)
         (bind-key "C-c [" nil org-mode-map)
         (bind-key "C-c ]" nil org-mode-map)
         (bind-key "C-c C-o" nil org-mode-map)
         (bind-key "s-j" 'org-babel-next-src-block org-mode-map)
         (bind-key "s-k" 'org-babel-previous-src-block org-mode-map)
         (bind-key "s-l" 'org-edit-src-code org-mode-map)
         (bind-key "s-l" 'org-edit-src-exit org-src-mode-map)
         (bind-key "C-c C-'" 'org-edit-src-code org-mode-map)
         (bind-key "C-c C-'" 'org-edit-src-exit org-src-mode-map)
         (bind-key [remap org-return] 'custom/org-return-dwim org-mode-map))
     #+END_SRC
**** advices
     show desktop notifications for org-capture
     #+BEGIN_SRC emacs-lisp :tangle yes
       (defadvice org-protocol-do-capture (around display-notify-after-capture)
         (let ((result ad-do-it))
           (when result
             (notifications-notify
              :title "Link captured"
              :body (concat (caar org-stored-links)
                            "\n"
                            (cadar org-stored-links))
              :app-name "emacs"
              :app-icon (expand-file-name "~/.rc/org.svg")
              :timeout 3000
              :urgency 'low))
           result))
     #+END_SRC
     and remove read-only props from yanked text (e.g. from jabber.el chat buffer)
     #+BEGIN_SRC emacs-lisp :tangle no
       (defadvice org-yank (after make-yank-writeable activate)
         (let ((inhibit-read-only t))
           (remove-text-properties (region-beginning) (region-end)
                                   '(read-only t))))
     #+END_SRC
**** additional packages / extensions
     #+BEGIN_SRC emacs-lisp :tangle yes
       (use-package ox-html)

       (use-package ob-async
         :ensure t
         :after (org ob))

       (use-package org-footnote)

       (use-package org-pomodoro
         :ensure t
         :after (alert))

       (use-package org-dashboard
         :ensure t
         :commands org-dashboard-display)

       (use-package orgit
         ;;TODO: automate insertion of links below (yasnippet/whatever)
         ;;    orgit:/path/to/repo/            links to a `magit-status' buffer
         ;;    orgit-rev:/path/to/repo/::REV   links to a `magit-revision' buffer
         ;;    orgit-log:/path/to/repo/::ARGS  links to a `magit-log' buffer
         :ensure t)

       (use-package org-bullets
         :ensure t
         :disabled
         :hook (org-mode-hook . (lambda () (org-bullets-mode 1)))
         :after (org))

       (use-package orglink
         :ensure t
         :delight (orglink-mode " OL")
         :config
         ;; TODO: customize orglink-activate-in-modes
         ;; TODO: automate insertion of link types below
         ;;   [[Code]]
         ;;   [[Code][start of code]]
         ;;   [[define-derived-mode orglink-mode][orglink-mode]]
         ;;   <mailto:jonas@bernoul.li>
         ;;   man:info
         ;;   <info:man>
         ;;   https://github.com/tarsius/orglink
         (global-orglink-mode))

       (use-package org-clock-today
         :ensure t
         :config
         (org-clock-today-mode 1))

       (use-package org-mru-clock :ensure t)

       (use-package org-recent-headings
         :ensure t
         :custom
         (org-recent-headings-save-file (at-user-data-dir "org-recent-headings"))
         :config
         (org-recent-headings-mode 1))

       (use-package org-sticky-header
         :ensure t
         :hook (org-mode-hook . org-sticky-header-mode))

       (use-package org-alert
         :ensure t
         :config
         (setq alert-default-style 'libnotify))

       (use-package org-link-minor-mode
         :ensure t
         :config
         (org-link-minor-mode t))

       (use-package org-super-agenda           ;TODO: investigate options (given initial setup below)
         :ensure t
         :config
         (setq org-super-agenda-groups
               '((:name "Today"
                        :time-grid t
                        :todo "TODAY")
                 (:todo "WAITING" :order 7)
                 (:todo "SOON"
                        :order 8)
                 (:todo ("SOMEDAY" "WAITING" "FEEDBACK" "OUTDATED")
                        :order 9)
                 (:priority<= "B" :order 1)
                 ))
         (org-super-agenda-mode 1))

       (use-package russian-holidays
         :ensure t
         :after (org)
         :config
         (setq calendar-holidays
          (push russian-holidays calendar-holidays)))
     #+END_SRC
** hydras
   #+BEGIN_SRC emacs-lisp :tangle yes
     (defhydra hydra-pim ()
       "
       BBDB                        Various
       --------------------------------------------------------
       _b_ as it is                _o_ calendar
       _c_ create                  _k_ show keys frequencies
       _u_ delete current record   _d_ deft
       _D_ quit deft
       "
       ("b" bbdb)
       ("c" bbdb-create)
       ("u" bbdb-delete-current-record)
       ("o" custom/calfw-open-calendar)
       ("k" keyfreq-show)
       ("d" deft)
       ("D" custom/deft/quit-deft)
       ("q" nil))
     (global-set-key (kbd "C-c c") 'hydra-pim/body)

     ;;TODO: update docstring
     (defhydra hydra-org-global (:color teal :idle 1.0)
       "
       ^Control^                 ^Editing^            ^Context^               ^Movement^
       ---------------------------------------------------------------------------------------------------------
       _g_oto clock              captur_e_            _a_genda                _<right>_ next visible heading
       _._ clock in              _w_ store link       dash_b_oard             _<left>_  prev visible heading
       _,_ clock out             _y_ank link          re_v_eal                _<down>_  forward same level
       _\^_ recently clocked     _S_et property       _f_ ace-link            _<up>_    backward same level
       _c_ancel clock            _D_elete property    _n_arrow to subtree     heading _u_p
       _d_isplay clocktime       footnote _A_ction    _-_ sparse tree         recent _H_eadings
       _R_eport clocks           _r_efile             agenda _h_eadings       Org _G_oto
       _p_omodoro                create _T_able       _=_ todo tree
       _s_chedule                                     _2_ random agenda
       _|_ deadline
       _i_ add time to TS
       _t_oggle TS type

       _\?_ clocking commands
       "
       ("g" org-clock-goto)
       ("." org-clock-in)
       ("," org-clock-out)
       ("^" org-mru-clock-select-recent-task)
       ("c" org-clock-cancel)
       ("d" org-clock-display)
       ("R" org-clock-report)
       ("p" org-pomodoro)
       ("s" org-schedule :color blue)
       ("|" org-deadline :color blue)
       ("i" custom/org-update-timestamp-with-time)
       ("t" org-toggle-timestamp-type)
       ("e" org-capture :color blue)
       ("w" org-store-link)
       ("y" org-insert-link-global)
       ("S" org-set-property)
       ("D" org-delete-property)
       ("A" org-footnote-action)
       ("r" org-refile "refile")
       ("T" org-table-create)
       ("a" org-agenda :color blue)
       ("b" org-dashboard-display :color blue)
       ("v" org-reveal "reveal")
       ("f" ace-link-org :color blue)
       ("n" org-narrow-to-subtree)
       ("-" org-sparse-tree)
       ("h" counsel-org-agenda-headlines)
       ("H" org-recent-headings-ivy)
       ("=" org-show-todo-tree)
       ("\\" counsel-org-tag)
       ("2" custom/jump-to-custom-agenda-random "show random custom agenda")
       ("<right>" outline-next-visible-heading "next heading")
       ("<left>" outline-previous-visible-heading "prev heading")
       ("<down>" org-forward-heading-same-level "next heading at same level")
       ("<up>" org-backward-heading-same-level "prev heading at same level")
       ("u" outline-up-heading "up heading")
       ("G" org-goto "goto" :exit t)
       (";" custom/org-tags-all  :exit t)
       ("?" (org-info "Clocking commands") "")
       ("q" nil "cancel"))
     (global-set-key (kbd "<f7>") 'hydra-org-global/body)
   #+END_SRC
* publishing
** setup
   #+BEGIN_SRC emacs-lisp :tangle yes
     (defun custom/tex-mode-hook ()
         (TeX-fold-mode 1)
         (turn-on-bib-cite)
         (setq bib-cite-use-reftex-view-crossref t))

     (use-package whizzytex
       :config
       (setq-default whizzy-viewers '(("-dvi" "xdvi") ("-ps" "gv"))))

     (use-package reftex
       :hook ((LaTeX-mode-hook . turn-on-reftex)
              (latex-mode-hook . turn-on-reftex))
       :custom
       (reftex-enable-partial-scans t)
       (reftex-save-parse-info t)
       (reftex-use-multiple-selection-buffers t))

     ;;TODO: maybe handle interdependencies between below features of auctex package
     ;; At the moment it works just fine, but there is no warranty.
     (use-package tex
       :hook (TeX-mode-hook . custom/tex-mode-hook)
       :custom
       (TeX-parse-self t)
       (TeX-default-mode 'latex-mode)
       (TeX-open-quote "``")
       (TeX-close-quote "''")
       (TeX-PDF-mode t)
       :config
       (setq-default TeX-master nil)
       (add-to-list 'safe-local-variable-values '(TeX-open-quote . "<<"))
       (add-to-list 'safe-local-variable-values '(TeX-close-quote . ">>")))

     (use-package bib-cite
       :custom
       (TeX-auto-save t)
       :config
       (use-package tex-fold))

     (use-package latex
       :mode ("\\.tex$" . latex-mode)
       :hook ((LaTeX-mode-hook . custom/tex-mode-hook)
              (LaTeX-mode-hook . TeX-PDF-mode)
              (LaTeX-mode-hook . visual-line-mode)
              (LaTeX-mode-hook . flyspell-mode)
              (LaTeX-mode-hook . LaTeX-math-mode)))

     (use-package tex-site)
     (use-package company-auctex
       :ensure t
       :after (yasnippet company tex latex))

     (use-package cdlatex
       :ensure t
       :hook ((LaTeX-mode-hook . turn-on-cdlatex)
              (latex-mode-hook . turn-on-cdlatex)))

     (use-package latex-preview-pane :ensure t)

     (setq font-latex-title-fontify 'color)      ; this gets rid of the large fonts
     (setq font-latex-fontify-sectioning 'color) ; in sections etc

     (setq ps-multibyte-buffer 'bdf-font-except-latin)

     (defvar ps-print-path "~/ps-print"
       "Path for ps-print output")

     ;;TODO: plan docstring or reorganize hydra
     (defhydra hydra-publishing ()
       ("w" whizzytex-mode)
       ("p" custom/ps-print-buffer-with-faces)
       ("P" custom/ps-print-region-with-faces)
       ("s" pdf-save-buffer-with-faces)
       ("S" pdf-save-region-with-faces)
       ("q" nil))
     (global-set-key (kbd "C-c n") 'hydra-publishing/body)

     ;; TODO: investigate TEXT_INPUTS usage
     ;; TODO: fix encoding issues (questions marks instead of russian letters)
     ;; TODO: investigate how to deal with bright letters on bright
     ;; background being printed (in such cases letters are almost invisible)

     (use-package blockdiag-mode :ensure t)

     (use-package ob-blockdiag
       :ensure t
       :config
       (org-babel-do-load-languages 'org-babel-load-languages
                                    '((blockdiag . t))))

     (use-package plantuml-mode
       :mode ("\\.plantuml\\'" . plantuml-mode)
       :custom
       (plantuml-jar-path "/usr/share/plantuml/lib/plantuml.jar")
       (org-plantuml-jar-path plantuml-jar-path)
       :config
       (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
       (org-babel-do-load-languages 'org-babel-load-languages
                                    '((plantuml . t))))
   #+END_SRC
** linux traits
   #+BEGIN_SRC emacs-lisp :tangle (if (eq system-type 'gnu/linux) "no" "no")
     (setq TeX-output-view-style '(("^pdf$" "." "zathura %s.pdf")
                                   ("^html?$" "." "open %o")))
   #+END_SRC
** darwin traits
   #+BEGIN_SRC emacs-lisp :tangle (if (eq system-type 'darwin) "no" "no")
     (setq TeX-output-view-style '(("^pdf$" "." "open -a preview %s.pdf")
                                   ("^html?$" "." "open %o")))
   #+END_SRC
* help
  #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package info)

    (use-package info-buffer
      :ensure t
      :bind (("C-h i" . info-buffer)))

    (use-package help+ :ensure t)

    (add-to-list 'Info-directory-list "/usr/share/info")

    (push "/usr/share/info" Info-directory-list)
    (setenv "MANPATH" "/usr/share/man:/usr/local/man")

    (defun custom/open-info (topic bname)
      "Open info on TOPIC in BNAME."
      (if (get-buffer bname)
          (progn
            (switch-to-buffer bname)
            (unless (string-match topic Info-current-file)
              (Info-goto-node (format "(%s)" topic))))
        (info topic bname)))

    (setq Info-additional-directory-list
          (list (concat home-directory "/help/info")))

    (defalias 'man 'woman) ;'Woman' offers completion better than 'man'.

    (defhydra hydra-apropos (:color blue)
      "
      Apropos
      ---------------
      _a_s it is =)
      _d_ocumentation
      _v_ariable
      _c_ommand
      _l_ibrary
      _u_ser option
      _i_nfo
      _t_ags
      valu_e_
      "
      ("a" apropos)
      ("d" apropos-documentation)
      ("v" apropos-variable)
      ("c" apropos-command)
      ("l" apropos-library)
      ("u" apropos-user-option)
      ("i" info-apropos "info")
      ("t" tags-apropos "tags")
      ("e" apropos-value))
    (global-set-key (kbd "C-c h") 'hydra-apropos/body)

    (defhydra hydra-info-to (:hint nil :color teal)
      "
      _o_rg _e_lisp e_m_acs _h_yperspec"
      ("o" (custom/open-info "org" "*org info*"))
      ("e" (custom/open-info "elisp" "*elisp info*"))
      ("m" (custom/open-info "emacs" "*emacs info*"))
      ("h" (custom/open-info "gcl" "*hyperspec*")))
    (global-set-key (kbd "C-c C-h") 'hydra-info-to/body)
  #+END_SRC
